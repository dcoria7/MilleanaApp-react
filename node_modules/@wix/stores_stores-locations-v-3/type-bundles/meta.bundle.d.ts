/** A location is a physical or virtual site where products are sold. */
interface StoresLocation$1 {
    /**
     * Stores location ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the Stores location is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the Stores location.
     *
     * Ignored when creating a Stores location.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the Stores location was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the Stores location was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Wix location ID.
     * Learn more about the [Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     */
    wixLocationId?: string | null;
    /**
     * Location type.
     *
     * + `VIRTUAL`: Online store.
     * + `PHYSICAL`: Physical location. For example, for POS.
     * @readonly
     */
    locationType?: LocationType$1;
    /**
     * Stores location name.
     * @readonly
     */
    name?: string;
    /** Whether the location is the site's default location. */
    defaultLocation?: boolean;
}
declare enum LocationType$1 {
    UNKNOWN_LOCATION_TYPE = "UNKNOWN_LOCATION_TYPE",
    /** Online stores location. */
    VIRTUAL = "VIRTUAL",
    /** Physical location like POS */
    PHYSICAL = "PHYSICAL"
}
interface GetStoresLocationRequest$1 {
    /** Stores location ID. */
    storesLocationId: string;
}
interface GetStoresLocationResponse$1 {
    /** Stores location. */
    storesLocation?: StoresLocation$1;
}
interface QueryStoresLocationsRequest$1 {
    /** Query options. */
    query?: CursorQuery$1;
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryStoresLocationsResponse$1 {
    /** List of Stores locations. */
    storesLocations?: StoresLocation$1[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface StoresLocationNonNullableFields$1 {
    locationType: LocationType$1;
    name: string;
    defaultLocation: boolean;
}
interface GetStoresLocationResponseNonNullableFields$1 {
    storesLocation?: StoresLocationNonNullableFields$1;
}
interface QueryStoresLocationsResponseNonNullableFields$1 {
    storesLocations: StoresLocationNonNullableFields$1[];
}

/** A location is a physical or virtual site where products are sold. */
interface StoresLocation {
    /**
     * Stores location ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the Stores location is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the Stores location.
     *
     * Ignored when creating a Stores location.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the Stores location was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the Stores location was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Wix location ID.
     * Learn more about the [Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     */
    wixLocationId?: string | null;
    /**
     * Location type.
     *
     * + `VIRTUAL`: Online store.
     * + `PHYSICAL`: Physical location. For example, for POS.
     * @readonly
     */
    locationType?: LocationType;
    /**
     * Stores location name.
     * @readonly
     */
    name?: string;
    /** Whether the location is the site's default location. */
    defaultLocation?: boolean;
}
declare enum LocationType {
    UNKNOWN_LOCATION_TYPE = "UNKNOWN_LOCATION_TYPE",
    /** Online stores location. */
    VIRTUAL = "VIRTUAL",
    /** Physical location like POS */
    PHYSICAL = "PHYSICAL"
}
interface GetStoresLocationRequest {
    /** Stores location ID. */
    storesLocationId: string;
}
interface GetStoresLocationResponse {
    /** Stores location. */
    storesLocation?: StoresLocation;
}
interface QueryStoresLocationsRequest {
    /** Query options. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryStoresLocationsResponse {
    /** List of Stores locations. */
    storesLocations?: StoresLocation[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface StoresLocationNonNullableFields {
    locationType: LocationType;
    name: string;
    defaultLocation: boolean;
}
interface GetStoresLocationResponseNonNullableFields {
    storesLocation?: StoresLocationNonNullableFields;
}
interface QueryStoresLocationsResponseNonNullableFields {
    storesLocations: StoresLocationNonNullableFields[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getStoresLocation(): __PublicMethodMetaInfo<'GET', {
    storesLocationId: string;
}, GetStoresLocationRequest, GetStoresLocationRequest$1, GetStoresLocationResponse & GetStoresLocationResponseNonNullableFields, GetStoresLocationResponse$1 & GetStoresLocationResponseNonNullableFields$1>;
declare function queryStoresLocations(): __PublicMethodMetaInfo<'POST', {}, QueryStoresLocationsRequest, QueryStoresLocationsRequest$1, QueryStoresLocationsResponse & QueryStoresLocationsResponseNonNullableFields, QueryStoresLocationsResponse$1 & QueryStoresLocationsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, getStoresLocation, queryStoresLocations };
