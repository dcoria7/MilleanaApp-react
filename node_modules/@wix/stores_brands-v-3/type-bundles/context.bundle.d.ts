type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A ? 1 : 2) extends
	(<G>() => G extends B ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;

/**
 * A brand is a visible property of a product.
 * Adding brands to your products can help improve site and product visibility on search engines.
 */
interface Brand {
    /**
     * Brand ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
}
interface App {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateBrandRequest {
    /** Brand to create. */
    brand: Brand;
}
interface CreateBrandResponse {
    /** Created brand. */
    brand?: Brand;
}
interface GetBrandRequest {
    /** Brand ID. */
    brandId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetBrandResponse {
    /** Brand. */
    brand?: Brand;
}
interface UpdateBrandRequest {
    /** Brand to update. */
    brand: Brand;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateBrandResponse {
    /** Updated brand. */
    brand?: Brand;
}
interface DeleteBrandRequest {
    /** Brand ID. */
    brandId: string;
}
interface DeleteBrandResponse {
}
interface QueryBrandsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBrandsResponse {
    /** List of brands. */
    brands?: Brand[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateBrandsRequest {
    /** Brands to create. */
    brands: Brand[];
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateBrandsResponse {
    /** Brands created by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata;
    /**
     * Full brand entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Brand;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateBrandsRequest {
    /** List of brands to update. */
    brands: MaskedBrand[];
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface MaskedBrand {
    /** Brand to update. */
    brand?: Brand;
}
interface BulkUpdateBrandsResponse {
    /** Brands updated by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface GetOrCreateBrandRequest {
    /** Brand name to retrieve or create. */
    brandName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface GetOrCreateBrandResponse {
    /** Brand. */
    brand?: Brand;
}
interface BulkGetOrCreateBrandsRequest {
    /** Brand names to retrieve or create. */
    brandNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateBrandsResponse {
    /** Brands retrieved or created by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteBrandsRequest {
    /** IDs of brands to delete. */
    brandIds: string[];
}
interface BulkDeleteBrandsResponse {
    /** Brands deleted by bulk action. */
    results?: BulkDeleteBrandsResponseBulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteBrandsResponseBulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface BrandNonNullableFields {
    name: string;
}
interface CreateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface GetBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface UpdateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface QueryBrandsResponseNonNullableFields {
    brands: BrandNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkBrandsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: BrandNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface GetOrCreateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface BulkGetOrCreateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkDeleteBrandsResponseNonNullableFields {
    results: BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface BrandCreatedEnvelope {
    entity: Brand;
    metadata: EventMetadata;
}
interface BrandUpdatedEnvelope {
    entity: Brand;
    metadata: EventMetadata;
}
interface BrandDeletedEnvelope {
    metadata: EventMetadata;
}
interface GetBrandOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateBrand {
    /**
     * Brand ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface UpdateBrandOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface QueryBrandsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[] | undefined;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface BrandsQueryResult extends QueryCursorResult {
    items: Brand[];
    query: BrandsQueryBuilder;
    next: () => Promise<BrandsQueryResult>;
    prev: () => Promise<BrandsQueryResult>;
}
interface BrandsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any[]) => BrandsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => BrandsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: boolean) => BrandsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => BrandsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => BrandsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => BrandsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => BrandsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<BrandsQueryResult>;
}
interface BulkCreateBrandsOptions {
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkUpdateBrandsOptions {
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface GetOrCreateBrandOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateBrandsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}

declare function createBrand$1(httpClient: HttpClient): CreateBrandSignature;
interface CreateBrandSignature {
    /**
     * Creates a brand.
     *
     * To assign the brand to a product, include the `brand.id` or `brand.name`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Brand to create.
     * @returns Created brand.
     */
    (brand: Brand): Promise<Brand & BrandNonNullableFields>;
}
declare function getBrand$1(httpClient: HttpClient): GetBrandSignature;
interface GetBrandSignature {
    /**
     * Retrieves a brand.
     * @param - Brand ID.
     * @returns Brand.
     */
    (brandId: string, options?: GetBrandOptions | undefined): Promise<Brand & BrandNonNullableFields>;
}
declare function updateBrand$1(httpClient: HttpClient): UpdateBrandSignature;
interface UpdateBrandSignature {
    /**
     * Updates a brand.
     *
     * Each time the brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - Brand ID.
     * @returns Updated brand.
     */
    (_id: string | null, brand: UpdateBrand, options?: UpdateBrandOptions | undefined): Promise<Brand & BrandNonNullableFields>;
}
declare function deleteBrand$1(httpClient: HttpClient): DeleteBrandSignature;
interface DeleteBrandSignature {
    /**
     * Deletes a brand.
     *
     * > **Note:** Deleting a brand will also remove it from all products it is assigned to.
     * @param - Brand ID.
     */
    (brandId: string): Promise<void>;
}
declare function queryBrands$1(httpClient: HttpClient): QueryBrandsSignature;
interface QueryBrandsSignature {
    /**
     * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryBrandsOptions | undefined): BrandsQueryBuilder;
}
declare function bulkCreateBrands$1(httpClient: HttpClient): BulkCreateBrandsSignature;
interface BulkCreateBrandsSignature {
    /**
     * Creates multiple brands.
     * @param - Brands to create.
     */
    (brands: Brand[], options?: BulkCreateBrandsOptions | undefined): Promise<BulkCreateBrandsResponse & BulkCreateBrandsResponseNonNullableFields>;
}
declare function bulkUpdateBrands$1(httpClient: HttpClient): BulkUpdateBrandsSignature;
interface BulkUpdateBrandsSignature {
    /**
     * Updates multiple brands.
     *
     * Each time a brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - List of brands to update.
     */
    (brands: MaskedBrand[], options?: BulkUpdateBrandsOptions | undefined): Promise<BulkUpdateBrandsResponse & BulkUpdateBrandsResponseNonNullableFields>;
}
declare function getOrCreateBrand$1(httpClient: HttpClient): GetOrCreateBrandSignature;
interface GetOrCreateBrandSignature {
    /**
     * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.
     * @param - Brand name to retrieve or create.
     */
    (brandName: string, options?: GetOrCreateBrandOptions | undefined): Promise<GetOrCreateBrandResponse & GetOrCreateBrandResponseNonNullableFields>;
}
declare function bulkGetOrCreateBrands$1(httpClient: HttpClient): BulkGetOrCreateBrandsSignature;
interface BulkGetOrCreateBrandsSignature {
    /**
     * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.
     * @param - Brand names to retrieve or create.
     */
    (brandNames: string[], options?: BulkGetOrCreateBrandsOptions | undefined): Promise<BulkGetOrCreateBrandsResponse & BulkGetOrCreateBrandsResponseNonNullableFields>;
}
declare function bulkDeleteBrands$1(httpClient: HttpClient): BulkDeleteBrandsSignature;
interface BulkDeleteBrandsSignature {
    /**
     * Deletes multiple brands.
     * @param - IDs of brands to delete.
     */
    (brandIds: string[]): Promise<BulkDeleteBrandsResponse & BulkDeleteBrandsResponseNonNullableFields>;
}
declare const onBrandCreated$1: EventDefinition<BrandCreatedEnvelope, "wix.stores.catalog.v3.brand_created">;
declare const onBrandUpdated$1: EventDefinition<BrandUpdatedEnvelope, "wix.stores.catalog.v3.brand_updated">;
declare const onBrandDeleted$1: EventDefinition<BrandDeletedEnvelope, "wix.stores.catalog.v3.brand_deleted">;

declare function createEventModule<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createBrand: MaybeContext<BuildRESTFunction<typeof createBrand$1> & typeof createBrand$1>;
declare const getBrand: MaybeContext<BuildRESTFunction<typeof getBrand$1> & typeof getBrand$1>;
declare const updateBrand: MaybeContext<BuildRESTFunction<typeof updateBrand$1> & typeof updateBrand$1>;
declare const deleteBrand: MaybeContext<BuildRESTFunction<typeof deleteBrand$1> & typeof deleteBrand$1>;
declare const queryBrands: MaybeContext<BuildRESTFunction<typeof queryBrands$1> & typeof queryBrands$1>;
declare const bulkCreateBrands: MaybeContext<BuildRESTFunction<typeof bulkCreateBrands$1> & typeof bulkCreateBrands$1>;
declare const bulkUpdateBrands: MaybeContext<BuildRESTFunction<typeof bulkUpdateBrands$1> & typeof bulkUpdateBrands$1>;
declare const getOrCreateBrand: MaybeContext<BuildRESTFunction<typeof getOrCreateBrand$1> & typeof getOrCreateBrand$1>;
declare const bulkGetOrCreateBrands: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateBrands$1> & typeof bulkGetOrCreateBrands$1>;
declare const bulkDeleteBrands: MaybeContext<BuildRESTFunction<typeof bulkDeleteBrands$1> & typeof bulkDeleteBrands$1>;

type _publicOnBrandCreatedType = typeof onBrandCreated$1;
/**
 * Triggered when a brand is created.
 */
declare const onBrandCreated: ReturnType<typeof createEventModule<_publicOnBrandCreatedType>>;

type _publicOnBrandUpdatedType = typeof onBrandUpdated$1;
/**
 * Triggered when a brand is updated.
 */
declare const onBrandUpdated: ReturnType<typeof createEventModule<_publicOnBrandUpdatedType>>;

type _publicOnBrandDeletedType = typeof onBrandDeleted$1;
/**
 * Triggered when a brand is deleted.
 */
declare const onBrandDeleted: ReturnType<typeof createEventModule<_publicOnBrandDeletedType>>;

export { type ActionEvent, type App, type ApplicationError, type BaseEventMetadata, type Brand, type BrandCreatedEnvelope, type BrandDeletedEnvelope, type BrandNonNullableFields, type BrandUpdatedEnvelope, type BrandsQueryBuilder, type BrandsQueryResult, type BulkActionMetadata, type BulkBrandsResult, type BulkCreateBrandsOptions, type BulkCreateBrandsRequest, type BulkCreateBrandsResponse, type BulkCreateBrandsResponseNonNullableFields, type BulkDeleteBrandsRequest, type BulkDeleteBrandsResponse, type BulkDeleteBrandsResponseBulkBrandsResult, type BulkDeleteBrandsResponseNonNullableFields, type BulkGetOrCreateBrandsOptions, type BulkGetOrCreateBrandsRequest, type BulkGetOrCreateBrandsResponse, type BulkGetOrCreateBrandsResponseNonNullableFields, type BulkUpdateBrandsOptions, type BulkUpdateBrandsRequest, type BulkUpdateBrandsResponse, type BulkUpdateBrandsResponseNonNullableFields, type CreateBrandRequest, type CreateBrandResponse, type CreateBrandResponseNonNullableFields, type CursorPaging, type CursorPagingMetadata, type CursorQuery, type CursorQueryPagingMethodOneOf, type Cursors, type DeleteBrandRequest, type DeleteBrandResponse, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type File, type GetBrandOptions, type GetBrandRequest, type GetBrandResponse, type GetBrandResponseNonNullableFields, type GetOrCreateBrandOptions, type GetOrCreateBrandRequest, type GetOrCreateBrandResponse, type GetOrCreateBrandResponseNonNullableFields, type IdentificationData, type IdentificationDataIdOneOf, type InvalidateCache, type InvalidateCacheGetByOneOf, type ItemMetadata, type MaskedBrand, type MessageEnvelope, type Page, type QueryBrandsOptions, type QueryBrandsRequest, type QueryBrandsResponse, type QueryBrandsResponseNonNullableFields, RequestedFields, type RestoreInfo, SortOrder, type Sorting, type URI, type UpdateBrand, type UpdateBrandOptions, type UpdateBrandRequest, type UpdateBrandResponse, type UpdateBrandResponseNonNullableFields, WebhookIdentityType, type _publicOnBrandCreatedType, type _publicOnBrandDeletedType, type _publicOnBrandUpdatedType, bulkCreateBrands, bulkDeleteBrands, bulkGetOrCreateBrands, bulkUpdateBrands, createBrand, deleteBrand, getBrand, getOrCreateBrand, onBrandCreated, onBrandDeleted, onBrandUpdated, onBrandCreated$1 as publicOnBrandCreated, onBrandDeleted$1 as publicOnBrandDeleted, onBrandUpdated$1 as publicOnBrandUpdated, queryBrands, updateBrand };
