interface Product$1 {
    /**
     * Product ID (generated automatically by the catalog).
     * @readonly
     */
    id?: string;
    /**
     * Product name.
     *
     * Min: 1 character
     * Max: 80 characters
     */
    name?: string | null;
    /** A friendly URL name (generated automatically by the catalog when a product is created), can be updated. */
    slug?: string;
    /** Whether the product is visible to site visitors. */
    visible?: boolean | null;
    /** Currently, only creating physical products ( `"productType": "physical"` ) is supported via the API. */
    productType?: ProductType$1;
    /** Product description. Accepts [rich text](https://dev.wix.com/api/rest/wix-stores/rich-text). */
    description?: string | null;
    /** Stock keeping unit. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, SKUs will be set per variant, and this field will be empty. */
    sku?: string | null;
    /** Product weight. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, weight will be set per variant, and this field will be empty. */
    weight?: number | null;
    /**
     * Product weight range. The minimum and maximum weights of all the variants.
     * @readonly
     */
    weightRange?: NumericPropertyRange$1;
    /**
     * Product inventory status (in future this will be writable via Inventory API).
     * @readonly
     */
    stock?: Stock$1;
    /**
     * Deprecated (use `priceData` instead).
     * @readonly
     * @deprecated
     */
    price?: PriceData$1;
    /** Price data. */
    priceData?: PriceData$1;
    /**
     * Price data, converted to the currency specified in request header.
     * @readonly
     */
    convertedPriceData?: PriceData$1;
    /**
     * Product price range. The minimum and maximum prices of all the variants.
     * @readonly
     */
    priceRange?: NumericPropertyRange$1;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData$1;
    /**
     * Product cost range. The minimum and maximum costs of all the variants.
     * @readonly
     */
    costRange?: NumericPropertyRange$1;
    /** Price per unit data. */
    pricePerUnitData?: PricePerUnitData$1;
    /** Additional text that the store owner can assign to the product (e.g. shipping details, refund policy, etc.). */
    additionalInfoSections?: AdditionalInfoSection$1[];
    /**
     * Deprecated (use `ribbon` instead).
     * @readonly
     * @deprecated
     */
    ribbons?: Ribbon$1[];
    /**
     * Media items (images, videos etc) associated with this product (writable via [Add Product Media](https://dev.wix.com/api/rest/wix-stores/catalog/products/add-product-media) endpoint).
     * @readonly
     */
    media?: Media$1;
    /**
     * Text box for the customer to add a message to their order (e.g., customization request). Currently writable only from the UI.
     * @readonly
     */
    customTextFields?: CustomTextField$1[];
    /** Whether variants are being managed for this product - enables unique SKU, price and weight per variant. Also affects inventory data. */
    manageVariants?: boolean | null;
    /** Options for this product. */
    productOptions?: ProductOption$1[];
    /**
     * Product page URL for this product (generated automatically by the server).
     * @readonly
     */
    productPageUrl?: PageUrl$1;
    /**
     * Productâ€™s unique numeric ID (assigned in ascending order).
     * Primarily used for sorting and filtering when crawling all products.
     * @readonly
     */
    numericId?: string;
    /**
     * Inventory item ID - ID referencing the inventory system.
     * @readonly
     */
    inventoryItemId?: string;
    /** Discount deducted from the product's original price. */
    discount?: Discount$1;
    /**
     * A list of all collection IDs that this product is included in (writable via the Catalog > Collection APIs).
     * @readonly
     */
    collectionIds?: string[];
    /**
     * Product variants, will be provided if the the request was sent with the `includeVariants: true`.
     *
     * Max: 1,000 variants
     * @readonly
     */
    variants?: Variant$1[];
    /**
     * Date and time the product was last updated.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    createdDate?: Date | null;
    /** Custom SEO data for the product. */
    seoData?: SeoSchema$1;
    /** Product ribbon. Used to highlight relevant information about a product. For example, "Sale", "New Arrival", "Sold Out". */
    ribbon?: string | null;
    /** Product brand. Including a brand name can help improve site and product [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores). */
    brand?: string | null;
}
declare enum ProductType$1 {
    unspecified_product_type = "unspecified_product_type",
    physical = "physical",
    digital = "digital"
}
interface NumericPropertyRange$1 {
    /** Minimum value. */
    minValue?: number;
    /** Maximum value. */
    maxValue?: number;
}
interface Stock$1 {
    /** Whether inventory is being tracked */
    trackInventory?: boolean;
    /** Quantity currently left in inventory */
    quantity?: number | null;
    /**
     * Whether the product is currently in stock (relevant only when tracking manually)
     * Deprecated (use `inventoryStatus` instead)
     * @deprecated
     */
    inStock?: boolean;
    /**
     * The current status of the inventory
     * + `IN_STOCK` - In stock
     * + `OUT_OF_STOCK` - Not in stock
     * + `PARTIALLY_OUT_OF_STOCK` - Some of the variants are not in stock
     */
    inventoryStatus?: InventoryStatus$1;
}
declare enum InventoryStatus$1 {
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
interface PriceData$1 {
    /**
     * Product price currency
     * @readonly
     */
    currency?: string;
    /** Product price */
    price?: number | null;
    /**
     * Discounted product price (if no discounted price is set, the product price is returned)
     * @readonly
     */
    discountedPrice?: number;
    /**
     * The product price and discounted price, formatted with the currency
     * @readonly
     */
    formatted?: FormattedPrice$1;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: number | null;
}
interface FormattedPrice$1 {
    /** Product price formatted with the currency */
    price?: string;
    /** Discounted product price formatted with the currency (if no discounted price is set, the product formatted price is returned) */
    discountedPrice?: string;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: string | null;
}
interface CostAndProfitData$1 {
    /** Item cost. */
    itemCost?: number | null;
    /**
     * Item cost formatted with currency symbol.
     * @readonly
     */
    formattedItemCost?: string;
    /**
     * Profit. Calculated by reducing `cost` from `discounted_price`.
     * @readonly
     */
    profit?: number;
    /**
     * Profit formatted with currency symbol.
     * @readonly
     */
    formattedProfit?: string;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discounted_price`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
interface PricePerUnitData$1 {
    /** Total quantity */
    totalQuantity?: number;
    /** Total measurement unit */
    totalMeasurementUnit?: MeasurementUnit$1;
    /** Base quantity */
    baseQuantity?: number;
    /** Base measurement unit */
    baseMeasurementUnit?: MeasurementUnit$1;
}
declare enum MeasurementUnit$1 {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
interface AdditionalInfoSection$1 {
    /** Product info section title */
    title?: string;
    /** Product info section description */
    description?: string;
}
interface Ribbon$1 {
    /** Ribbon text */
    text?: string;
}
interface Media$1 {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem$1;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem$1[];
}
interface MediaItem$1 extends MediaItemItemOneOf$1 {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize$1;
    /** Video data (URL, size). */
    video?: MediaItemVideo$1;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize$1;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType$1;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    id?: string;
}
/** @oneof */
interface MediaItemItemOneOf$1 {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize$1;
    /** Video data (URL, size). */
    video?: MediaItemVideo$1;
}
interface MediaItemUrlAndSize$1 {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType$1 {
    unspecified_media_item_type = "unspecified_media_item_type",
    image = "image",
    video = "video",
    audio = "audio",
    document = "document",
    zip = "zip"
}
interface MediaItemVideo$1 {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize$1[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface CustomTextField$1 {
    /** Text box title */
    title?: string;
    /** Text box input max length */
    maxLength?: number;
    /** Whether this text box is mandatory */
    mandatory?: boolean;
}
interface ProductOption$1 {
    /**
     * Option type - color or other(drop down)
     * @readonly
     */
    optionType?: OptionType$1;
    /** Option name. */
    name?: string;
    /** Choices available for this option. */
    choices?: Choice$1[];
}
declare enum OptionType$1 {
    unspecified_option_type = "unspecified_option_type",
    drop_down = "drop_down",
    color = "color"
}
interface Choice$1 {
    /** Choice value. */
    value?: string;
    /** Choice description. */
    description?: string;
    /**
     * Media items (images, videos) associated with this choice
     * @readonly
     */
    media?: Media$1;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are in stock
     * @readonly
     */
    inStock?: boolean;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are visible
     * @readonly
     */
    visible?: boolean;
}
interface PageUrl$1 {
    /** Base URL. For premium sites, this is the domain. For free sites, this is the site URL (e.g mysite.wixsite.com/mysite). */
    base?: string;
    /** Path to the product page - e.g /product-page/a-product. */
    path?: string;
}
interface Discount$1 {
    /**
     * Discount type:
     * + `"AMOUNT"`
     * + `"PERCENT"`
     */
    type?: DiscountType$1;
    /** Discount value */
    value?: number;
}
declare enum DiscountType$1 {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    NONE = "NONE",
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface Variant$1 {
    /** Requested Variant ID */
    id?: string;
    /** Specific choices within a selection, as option-choice key-value pairs */
    choices?: Record<string, string>;
    variant?: VariantDataWithNoStock$1;
    /**
     * Variant inventory status.
     * @readonly
     */
    stock?: VariantStock$1;
}
interface VariantDataWithNoStock$1 {
    /** Variant price. */
    priceData?: PriceData$1;
    /**
     * Variant price data, converted to currency requested in header.
     * @readonly
     */
    convertedPriceData?: PriceData$1;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData$1;
    /** Variant weight. */
    weight?: number;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface VariantStock$1 {
    /** Whether inventory is being tracked. */
    trackQuantity?: boolean;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema$1 {
    /** SEO tag information. */
    tags?: Tag$1[];
    /** SEO general settings. */
    settings?: Settings$1;
}
interface Keyword$1 {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag$1 {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings$1 {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword$1[];
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface CreateProductRequest$1 {
    /** Product information. */
    product?: Product$1;
}
interface CreateProductResponse$1 {
    product?: Product$1;
}
interface UpdateProductRequest$1 {
    product: Product$1;
}
interface UpdateProductResponse$1 {
    product?: Product$1;
}
interface DeleteProductRequest$1 {
    /** ID of the product to delete. */
    id: string;
}
interface DeleteProductResponse$1 {
}
interface UpdateVariantsRequest$1 {
    /** ID of the product with managed variants. */
    id: string;
    /** Variant info to update. */
    variants?: VariantOverride$1[];
}
interface VariantOverride$1 {
    /** The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice). You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (Not relevant when passing variant IDs) */
    choices?: Record<string, string>;
    /**
     * List of variant IDs
     * (Not relevant when passing choices)
     */
    variantIds?: string[];
    /** Variant price */
    price?: number | null;
    /** Variant cost of goods */
    cost?: number | null;
    /** Variant weight */
    weight?: number | null;
    /** Variant SKU (stock keeping unit) */
    sku?: string | null;
    /** Whether the variant is visible to  customers */
    visible?: boolean | null;
}
interface UpdateVariantsResponse$1 {
    /** List of the product's variants. */
    variants?: Variant$1[];
}
interface ResetAllVariantDataRequest$1 {
    /** Product ID. */
    id: string;
}
interface ResetAllVariantDataResponse$1 {
}
interface AddProductsToCollectionRequest$1 {
    /** Collection ID. */
    id: string;
    /** IDs of the products to add to the collection, separated by commas. */
    productIds?: string[];
}
interface AddProductsToCollectionResponse$1 {
}
interface RemoveProductsFromCollectionRequest$1 {
    /** Collection ID. */
    id: string;
    /** IDs of the products to remove from the collection. */
    productIds: string[];
}
interface RemoveProductsFromCollectionResponse$1 {
}
interface AddProductMediaRequest$1 {
    /** Product ID. */
    id: string;
    /** Sources of media items already uploaded to the Wix site. */
    media?: MediaDataForWrite$1[];
}
interface MediaDataForWrite$1 extends MediaDataForWriteMediaSourceOneOf$1 {
    /** Media ID. For media items previously saved in Wix Media, the media ID is returned in the Query Product response. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
    /**
     * Assign this media item to a specific product choice.
     * Note that you may set media items for choices under only one option (e.g., if Colors blue, green, and red have media items, Sizes S, M, and L can't have media items assigned to them).
     * You may clear existing media from choices with the [Remove Product Media From Choices](/catalog/products/remove-product-media-from-choices).
     */
    choice?: OptionAndChoice$1;
}
/** @oneof */
interface MediaDataForWriteMediaSourceOneOf$1 {
    /** Media ID. For media items previously saved in Wix Media, the media ID is returned in the Query Product response. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
}
interface OptionAndChoice$1 {
    /** Option to add the media to. */
    option?: string;
    /** Choice to add the media to. */
    choice?: string;
}
interface AddProductMediaResponse$1 {
}
interface RemoveProductMediaRequest$1 {
    /** Product ID. */
    id: string;
    /** List of media IDs to remove. Pass an empty array to delete all media items for the product. */
    mediaIds?: string[];
}
interface RemoveProductMediaResponse$1 {
}
interface AddProductMediaToChoicesRequest$1 {
    /** Product ID. */
    id: string;
    /** Product media items and the choices to add the media to. */
    media?: MediaAssignmentToChoice$1[];
}
interface MediaAssignmentToChoice$1 {
    /** Option name. */
    option?: string;
    /** Choice name. */
    choice?: string;
    /** Media IDs (available via the Query Product endpoint). */
    mediaIds?: string[];
}
interface AddProductMediaToChoicesResponse$1 {
}
interface RemoveProductMediaFromChoicesRequest$1 {
    /** Product ID from whose choices to remove media items. */
    id: string;
    /** Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product. */
    media?: MediaAssignmentToChoice$1[];
}
interface RemoveProductMediaFromChoicesResponse$1 {
}
interface DeleteProductOptionsRequest$1 {
    /** ID of the product with options to delete. */
    id: string;
}
interface DeleteProductOptionsResponse$1 {
}
interface RemoveProductBrandRequest$1 {
    /** Product ID. */
    id: string;
}
interface RemoveProductBrandResponse$1 {
}
interface CreateCollectionRequest$1 {
    /** Collection info. */
    collection: Collection$1;
}
interface Collection$1 {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media$1;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface CreateCollectionResponse$1 {
    /** Collection. */
    collection?: Collection$1;
}
interface UpdateCollectionRequest$1 {
    /** Collection info. */
    collection: Collection$1;
}
interface UpdateCollectionResponse$1 {
    /** Updated collection. */
    collection?: Collection$1;
}
interface DeleteCollectionRequest$1 {
    /** ID of the collection to delete. */
    id: string;
}
interface DeleteCollectionResponse$1 {
}
interface RemoveProductRibbonRequest$1 {
    /** Product ID. */
    id: string;
}
interface RemoveProductRibbonResponse$1 {
}
interface BulkUpdateProductsRequest$1 {
    /** Product IDs. */
    ids: string[];
    /** Field to update. */
    set?: SetValue$1;
}
interface SetValue$1 extends SetValueValueOneOf$1 {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
/** @oneof */
interface SetValueValueOneOf$1 {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
interface BulkUpdateProductsResponse$1 {
    /** Bulk action results. */
    results?: BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkProductResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkAdjustProductPropertiesRequest$1 {
    /** Product IDs. */
    ids: string[];
    /** Numerical property to adjust. */
    adjust?: AdjustValue$1;
}
interface AdjustValue$1 extends AdjustValueValueOneOf$1 {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData$1;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData$1;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData$1;
}
/** @oneof */
interface AdjustValueValueOneOf$1 {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData$1;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData$1;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData$1;
}
interface PropertyAdjustmentData$1 extends PropertyAdjustmentDataByOneOf$1 {
    /** Adjust by percentage. */
    percentage?: PercentageData$1;
    /** Adjust by amount. */
    amount?: number;
}
/** @oneof */
interface PropertyAdjustmentDataByOneOf$1 {
    /** Adjust by percentage. */
    percentage?: PercentageData$1;
    /** Adjust by amount. */
    amount?: number;
}
interface PercentageData$1 {
    /**
     * If `true`, result will be rounded to the nearest whole number.
     * If `false`, result will be rounded to 2 places after the decimal point.
     */
    roundToInt?: boolean;
    /**
     * Percentage value, as a whole number (integer) between `-100` and `1000`.
     *
     * For example:
     * + Pass `100` to increase value by 100% (multiply original value by 2).
     * + Pass `1000` to increase value by 1000% (multiply original value by 10).
     * + Pass `-50` to decrease value by 50% (original value is halved).
     */
    rate?: number;
}
interface BulkAdjustProductPropertiesResponse$1 {
    /** Bulk action results. */
    results?: BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface Paging$1 {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface PagingMetadata$1 {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface QueryProductsPlatformizedRequest$1 {
    query?: PlatformQuery$1;
}
interface PlatformQuery$1 extends PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$1[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryProductsPlatformizedResponse$1 {
    products?: Product$1[];
    metadata?: PlatformPagingMetadata$1;
}
interface PlatformPagingMetadata$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetProductRequest$1 {
    /** Requested product ID. */
    id: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface GetProductResponse$1 {
    /** Requested product data. */
    product?: Product$1;
}
interface GetCollectionBySlugRequest$1 {
    /** Slug of the collection to retrieve. */
    slug: string;
}
interface GetCollectionBySlugResponse$1 {
    /** The requested collection. */
    collection?: Collection$1;
}
interface ProductOptionsAvailabilityRequest$1 {
    /** Requested product ID. */
    id: string;
    /** Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`. */
    options?: Record<string, string>;
}
interface ProductOptionsAvailabilityResponse$1 {
    /** Variant information, given that all the choices were provided. */
    selectedVariant?: VariantData$1;
    /** Information about media items (images, videos, etc.) associated with this choice. */
    media?: Media$1;
    /** Options information (color, size, etc.) for this product, with the inventory and visibility fields updated based on the provided choices. */
    productOptions?: ProductOption$1[];
    /** Whether all the selected choices result in a visible, in-stock variant. */
    availableForPurchase?: boolean;
}
interface VariantData$1 {
    /** Variant price. */
    price?: PriceData$1;
    /**
     * Variant price data converted to currency provided in header.
     * @readonly
     */
    convertedPriceData?: PriceData$1;
    /** Variant weight. */
    weight?: number | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Quantity currently in inventory (relevant only when tracking by inventory). */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface QueryProductVariantsRequest$1 {
    /** Requested product ID. */
    id: string;
    /**
     * The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice).
     * You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (not relevant when passing variant IDs).
     */
    choices?: Record<string, string>;
    /** List of variant IDs (not relevant when passing choices). */
    variantIds?: string[];
    paging?: Paging$1;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface QueryProductVariantsResponse$1 {
    /** List of variants based on the specified filters and sorting. */
    variants?: Variant$1[];
    metadata?: PagingMetadata$1;
    totalResults?: number;
}
interface QueryStoreVariantsRequest$1 {
    /** Query options. */
    query?: PlatformQuery$1;
}
interface QueryStoreVariantsResponse$1 {
    /** List of variants based on the specified filters and sorting. */
    variants?: StoreVariant$1[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata$1;
}
interface StoreVariant$1 {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen: {productId}.{variantId}. */
    id?: string;
    /** Variant ID. */
    variantId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant name. */
    variantName?: string;
    /** Product name. */
    productName?: string;
    /** Whether the variant is managed or represents a product. */
    managedVariant?: boolean;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Variant inventory status. */
    stock?: VariantStock$1;
    /** The selected options of this variant. For example, `{"Color": "Blue", "Size": "Large"}`. */
    choices?: Record<string, string>;
    /** Collections that include this variant. */
    collectionIds?: string[];
    /**
     * Media items (images, videos) associated with this variant.
     * @readonly
     */
    media?: PlatformMedia$1;
    /** Preorder information. */
    preorderInfo?: PreorderInfo$1;
}
interface PlatformMedia$1 extends PlatformMediaMediaOneOf$1 {
    image?: Image;
    video?: VideoV2;
}
/** @oneof */
interface PlatformMediaMediaOneOf$1 {
    image?: Image;
    video?: VideoV2;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface VideoV2 {
    /** WixMedia ID. */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     */
    resolutions?: VideoResolution[];
    /**
     * Video filename.
     * @readonly
     */
    filename?: string | null;
}
interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
interface PreorderInfo$1 {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
interface GetStoreVariantRequest$1 {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`. */
    id: string;
}
interface GetStoreVariantResponse$1 {
    /** The requested store variant. */
    variant?: StoreVariant$1;
}
interface NumericPropertyRangeNonNullableFields$1 {
    minValue: number;
    maxValue: number;
}
interface StockNonNullableFields$1 {
    trackInventory: boolean;
    inStock: boolean;
    inventoryStatus: InventoryStatus$1;
}
interface FormattedPriceNonNullableFields$1 {
    price: string;
    discountedPrice: string;
}
interface PriceDataNonNullableFields$1 {
    currency: string;
    discountedPrice: number;
    formatted?: FormattedPriceNonNullableFields$1;
}
interface CostAndProfitDataNonNullableFields$1 {
    formattedItemCost: string;
    profit: number;
    formattedProfit: string;
    profitMargin: number;
}
interface PricePerUnitDataNonNullableFields$1 {
    totalQuantity: number;
    totalMeasurementUnit: MeasurementUnit$1;
    baseQuantity: number;
    baseMeasurementUnit: MeasurementUnit$1;
}
interface AdditionalInfoSectionNonNullableFields$1 {
    title: string;
    description: string;
}
interface RibbonNonNullableFields$1 {
    text: string;
}
interface MediaItemUrlAndSizeNonNullableFields$1 {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields$1 {
    files: MediaItemUrlAndSizeNonNullableFields$1[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields$1 {
    image?: MediaItemUrlAndSizeNonNullableFields$1;
    video?: MediaItemVideoNonNullableFields$1;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields$1;
    mediaType: MediaItemType$1;
    title: string;
    id: string;
}
interface MediaNonNullableFields$1 {
    mainMedia?: MediaItemNonNullableFields$1;
    items: MediaItemNonNullableFields$1[];
}
interface CustomTextFieldNonNullableFields$1 {
    title: string;
    maxLength: number;
    mandatory: boolean;
}
interface ChoiceNonNullableFields$1 {
    value: string;
    description: string;
    media?: MediaNonNullableFields$1;
    inStock: boolean;
    visible: boolean;
}
interface ProductOptionNonNullableFields$1 {
    optionType: OptionType$1;
    name: string;
    choices: ChoiceNonNullableFields$1[];
}
interface PageUrlNonNullableFields$1 {
    base: string;
    path: string;
}
interface DiscountNonNullableFields$1 {
    type: DiscountType$1;
    value: number;
}
interface VariantDataWithNoStockNonNullableFields$1 {
    priceData?: PriceDataNonNullableFields$1;
    convertedPriceData?: PriceDataNonNullableFields$1;
    costAndProfitData?: CostAndProfitDataNonNullableFields$1;
    weight: number;
    sku: string;
    visible: boolean;
}
interface VariantStockNonNullableFields$1 {
    trackQuantity: boolean;
    inStock: boolean;
}
interface VariantNonNullableFields$1 {
    id: string;
    variant?: VariantDataWithNoStockNonNullableFields$1;
    stock?: VariantStockNonNullableFields$1;
}
interface TagNonNullableFields$1 {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields$1 {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields$1 {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields$1[];
}
interface SeoSchemaNonNullableFields$1 {
    tags: TagNonNullableFields$1[];
    settings?: SettingsNonNullableFields$1;
}
interface SecuredMediaNonNullableFields$1 {
    id: string;
    fileName: string;
    fileType: FileType$1;
}
interface ProductNonNullableFields$1 {
    id: string;
    slug: string;
    productType: ProductType$1;
    weightRange?: NumericPropertyRangeNonNullableFields$1;
    stock?: StockNonNullableFields$1;
    price?: PriceDataNonNullableFields$1;
    priceData?: PriceDataNonNullableFields$1;
    convertedPriceData?: PriceDataNonNullableFields$1;
    priceRange?: NumericPropertyRangeNonNullableFields$1;
    costAndProfitData?: CostAndProfitDataNonNullableFields$1;
    costRange?: NumericPropertyRangeNonNullableFields$1;
    pricePerUnitData?: PricePerUnitDataNonNullableFields$1;
    additionalInfoSections: AdditionalInfoSectionNonNullableFields$1[];
    ribbons: RibbonNonNullableFields$1[];
    media?: MediaNonNullableFields$1;
    customTextFields: CustomTextFieldNonNullableFields$1[];
    productOptions: ProductOptionNonNullableFields$1[];
    productPageUrl?: PageUrlNonNullableFields$1;
    numericId: string;
    inventoryItemId: string;
    discount?: DiscountNonNullableFields$1;
    collectionIds: string[];
    variants: VariantNonNullableFields$1[];
    seoData?: SeoSchemaNonNullableFields$1;
    exportProductId: string;
    digitalFile?: SecuredMediaNonNullableFields$1;
}
interface CreateProductResponseNonNullableFields$1 {
    product?: ProductNonNullableFields$1;
}
interface UpdateProductResponseNonNullableFields$1 {
    product?: ProductNonNullableFields$1;
}
interface UpdateVariantsResponseNonNullableFields$1 {
    variants: VariantNonNullableFields$1[];
}
interface CollectionNonNullableFields$1 {
    media?: MediaNonNullableFields$1;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields$1;
}
interface CreateCollectionResponseNonNullableFields$1 {
    collection?: CollectionNonNullableFields$1;
}
interface UpdateCollectionResponseNonNullableFields$1 {
    collection?: CollectionNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkProductResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdateProductsResponseNonNullableFields$1 {
    results: BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkAdjustProductPropertiesResponseNonNullableFields$1 {
    results: BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface QueryProductsPlatformizedResponseNonNullableFields$1 {
    products: ProductNonNullableFields$1[];
}
interface GetProductResponseNonNullableFields$1 {
    product?: ProductNonNullableFields$1;
}
interface GetCollectionBySlugResponseNonNullableFields$1 {
    collection?: CollectionNonNullableFields$1;
}
interface VariantDataNonNullableFields$1 {
    price?: PriceDataNonNullableFields$1;
    convertedPriceData?: PriceDataNonNullableFields$1;
    sku: string;
    inStock: boolean;
    visible: boolean;
    variantId: string;
}
interface ProductOptionsAvailabilityResponseNonNullableFields$1 {
    selectedVariant?: VariantDataNonNullableFields$1;
    media?: MediaNonNullableFields$1;
    productOptions: ProductOptionNonNullableFields$1[];
    availableForPurchase: boolean;
    managedProduct: boolean;
}
interface PagingMetadataNonNullableFields$1 {
    items: number;
    offset: number;
}
interface QueryProductVariantsResponseNonNullableFields$1 {
    variants: VariantNonNullableFields$1[];
    metadata?: PagingMetadataNonNullableFields$1;
    totalResults: number;
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface VideoResolutionNonNullableFields {
    url: string;
    height: number;
    width: number;
    poster?: ImageNonNullableFields;
    format: string;
}
interface VideoV2NonNullableFields {
    id: string;
    url: string;
    resolutions: VideoResolutionNonNullableFields[];
    posters: ImageNonNullableFields[];
}
interface PlatformMediaNonNullableFields$1 {
    image?: ImageNonNullableFields;
    video?: VideoV2NonNullableFields;
}
interface PreorderInfoNonNullableFields$1 {
    enabled: boolean;
}
interface StoreVariantNonNullableFields$1 {
    id: string;
    variantId: string;
    productId: string;
    variantName: string;
    productName: string;
    managedVariant: boolean;
    sku: string;
    stock?: VariantStockNonNullableFields$1;
    collectionIds: string[];
    media?: PlatformMediaNonNullableFields$1;
    preorderInfo?: PreorderInfoNonNullableFields$1;
}
interface QueryStoreVariantsResponseNonNullableFields$1 {
    variants: StoreVariantNonNullableFields$1[];
}
interface GetStoreVariantResponseNonNullableFields$1 {
    variant?: StoreVariantNonNullableFields$1;
}

interface Product {
    /**
     * Product ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string;
    /**
     * Product name.
     *
     * Min: 1 character
     * Max: 80 characters
     */
    name?: string | null;
    /** A friendly URL name (generated automatically by the catalog when a product is created), can be updated. */
    slug?: string;
    /** Whether the product is visible to site visitors. */
    visible?: boolean | null;
    /** Currently, only creating physical products ( `"productType": "physical"` ) is supported via the API. */
    productType?: ProductType;
    /** Product description. */
    description?: string | null;
    /** Stock keeping unit. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, SKUs will be set per variant, and this field will be empty. */
    sku?: string | null;
    /** Product weight. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, weight will be set per variant, and this field will be empty. */
    weight?: number | null;
    /**
     * Product weight range. The minimum and maximum weights of all the variants.
     * @readonly
     */
    weightRange?: NumericPropertyRange;
    /**
     * Product inventory status (in future this will be writable via Inventory API).
     * @readonly
     */
    stock?: Stock;
    /**
     * Deprecated (use `priceData` instead).
     * @readonly
     * @deprecated
     */
    price?: PriceData;
    /** Price data. */
    priceData?: PriceData;
    /**
     * Price data, converted to the currency specified in request header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /**
     * Product price range. The minimum and maximum prices of all the variants.
     * @readonly
     */
    priceRange?: NumericPropertyRange;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /**
     * Product cost range. The minimum and maximum costs of all the variants.
     * @readonly
     */
    costRange?: NumericPropertyRange;
    /** Price per unit data. */
    pricePerUnitData?: PricePerUnitData;
    /** Additional text that the store owner can assign to the product (e.g. shipping details, refund policy, etc.). */
    additionalInfoSections?: AdditionalInfoSection[];
    /**
     * Deprecated (use `ribbon` instead).
     * @readonly
     * @deprecated
     */
    ribbons?: Ribbon[];
    /**
     * Media items (images, videos etc) associated with this product (writable via [Add Product Media](https://dev.wix.com/api/rest/wix-stores/catalog/products/add-product-media) endpoint).
     * @readonly
     */
    media?: Media;
    /**
     * Text box for the customer to add a message to their order (e.g., customization request). Currently writable only from the UI.
     * @readonly
     */
    customTextFields?: CustomTextField[];
    /** Whether variants are being managed for this product - enables unique SKU, price and weight per variant. Also affects inventory data. Once set to `true`, can be reset to `false` only if no variants exist. You cannot set `manageVariants` to `true` if more than 300 variants are defined. */
    manageVariants?: boolean | null;
    /** Options for this product. */
    productOptions?: ProductOption[];
    /**
     * Product page URL for this product (generated automatically by the server).
     * @readonly
     */
    productPageUrl?: PageUrl;
    /**
     * Productâ€™s unique numeric ID (assigned in ascending order).
     * Primarily used for sorting and filtering when crawling all products.
     * @readonly
     */
    numericId?: string;
    /**
     * Inventory item ID - ID referencing the inventory system.
     * @readonly
     */
    inventoryItemId?: string;
    /** Discount deducted from the product's original price. */
    discount?: Discount;
    /**
     * A list of all collection IDs that this product is included in (writable via the Catalog > Collection APIs).
     * @readonly
     */
    collectionIds?: string[];
    /**
     * Product variants, will be provided if the the request was sent with the `includeVariants: true`.
     *
     * Max: 1,000 variants
     * @readonly
     */
    variants?: Variant[];
    /**
     * Date and time the product was last updated.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Custom SEO data for the product. */
    seoData?: SeoSchema;
    /** Product ribbon. Used to highlight relevant information about a product. For example, "Sale", "New Arrival", "Sold Out". */
    ribbon?: string | null;
    /** Product brand. Including a brand name can help improve site and product [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores). */
    brand?: string | null;
}
declare enum ProductType {
    unspecified_product_type = "unspecified_product_type",
    physical = "physical",
    digital = "digital"
}
interface NumericPropertyRange {
    /** Minimum value. */
    minValue?: number;
    /** Maximum value. */
    maxValue?: number;
}
interface Stock {
    /** Whether inventory is being tracked */
    trackInventory?: boolean;
    /** Quantity currently left in inventory */
    quantity?: number | null;
    /**
     * Whether the product is currently in stock (relevant only when tracking manually)
     * Deprecated (use `inventoryStatus` instead)
     * @deprecated
     */
    inStock?: boolean;
    /**
     * The current status of the inventory
     * + `IN_STOCK` - In stock
     * + `OUT_OF_STOCK` - Not in stock
     * + `PARTIALLY_OUT_OF_STOCK` - Some of the variants are not in stock
     */
    inventoryStatus?: InventoryStatus;
}
declare enum InventoryStatus {
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
interface PriceData {
    /**
     * Product price currency
     * @readonly
     */
    currency?: string;
    /** Product price */
    price?: number | null;
    /**
     * Discounted product price (if no discounted price is set, the product price is returned)
     * @readonly
     */
    discountedPrice?: number;
    /**
     * The product price and discounted price, formatted with the currency
     * @readonly
     */
    formatted?: FormattedPrice;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: number | null;
}
interface FormattedPrice {
    /** Product price formatted with the currency */
    price?: string;
    /** Discounted product price formatted with the currency (if no discounted price is set, the product formatted price is returned) */
    discountedPrice?: string;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: string | null;
}
interface CostAndProfitData {
    /** Item cost. */
    itemCost?: number | null;
    /**
     * Item cost formatted with currency symbol.
     * @readonly
     */
    formattedItemCost?: string;
    /**
     * Profit. Calculated by reducing `cost` from `discounted_price`.
     * @readonly
     */
    profit?: number;
    /**
     * Profit formatted with currency symbol.
     * @readonly
     */
    formattedProfit?: string;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discounted_price`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
interface PricePerUnitData {
    /** Total quantity */
    totalQuantity?: number;
    /** Total measurement unit */
    totalMeasurementUnit?: MeasurementUnit;
    /** Base quantity */
    baseQuantity?: number;
    /** Base measurement unit */
    baseMeasurementUnit?: MeasurementUnit;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
interface AdditionalInfoSection {
    /** Product info section title */
    title?: string;
    /** Product info section description */
    description?: string;
}
interface Ribbon {
    /** Ribbon text */
    text?: string;
}
interface Media {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    _id?: string;
}
/** @oneof */
interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
interface MediaItemUrlAndSize {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    image = "image",
    video = "video",
    audio = "audio",
    document = "document",
    zip = "zip"
}
interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface CustomTextField {
    /** Text box title */
    title?: string;
    /** Text box input max length */
    maxLength?: number;
    /** Whether this text box is mandatory */
    mandatory?: boolean;
}
interface ProductOption {
    /**
     * Option type - color or other(drop down)
     * @readonly
     */
    optionType?: OptionType;
    /** Option name. */
    name?: string;
    /** Choices available for this option. */
    choices?: Choice[];
}
declare enum OptionType {
    unspecified_option_type = "unspecified_option_type",
    drop_down = "drop_down",
    color = "color"
}
interface Choice {
    /** Choice value. */
    value?: string;
    /** Choice description. */
    description?: string;
    /**
     * Media items (images, videos) associated with this choice
     * @readonly
     */
    media?: Media;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are in stock
     * @readonly
     */
    inStock?: boolean;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are visible
     * @readonly
     */
    visible?: boolean;
}
interface PageUrl {
    /** Base URL. For premium sites, this is the domain. For free sites, this is the site URL (e.g mysite.wixsite.com/mysite). */
    base?: string;
    /** Path to the product page - e.g /product-page/a-product. */
    path?: string;
}
interface Discount {
    /**
     * Discount type:
     * + `"AMOUNT"`
     * + `"PERCENT"`
     */
    type?: DiscountType;
    /** Discount value */
    value?: number;
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    NONE = "NONE",
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface Variant {
    /** Requested Variant ID */
    _id?: string;
    /** Specific choices within a selection, as option-choice key-value pairs */
    choices?: Record<string, string>;
    variant?: VariantDataWithNoStock;
    /**
     * Variant inventory status.
     * @readonly
     */
    stock?: VariantStock;
}
interface VariantDataWithNoStock {
    /** Variant price. */
    priceData?: PriceData;
    /**
     * Variant price data, converted to currency requested in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /** Variant weight. */
    weight?: number;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface VariantStock {
    /** Whether inventory is being tracked. */
    trackQuantity?: boolean;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface CreateProductRequest {
    /** Product information. */
    product?: Product;
}
interface CreateProductResponse {
    product?: Product;
}
interface UpdateProductRequest {
    product: Product;
}
interface UpdateProductResponse {
    product?: Product;
}
interface DeleteProductRequest {
    /** ID of the product to delete. */
    _id: string;
}
interface DeleteProductResponse {
}
interface UpdateVariantsRequest {
    /** ID of the product with managed variants. */
    _id: string;
    /** Variant info to update. */
    variants?: VariantOverride[];
}
interface VariantOverride {
    /** The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice). You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (Not relevant when passing variant IDs) */
    choices?: Record<string, string>;
    /**
     * List of variant IDs
     * (Not relevant when passing choices)
     */
    variantIds?: string[];
    /** Variant price */
    price?: number | null;
    /** Variant cost of goods */
    cost?: number | null;
    /** Variant weight */
    weight?: number | null;
    /** Variant SKU (stock keeping unit) */
    sku?: string | null;
    /** Whether the variant is visible to  customers */
    visible?: boolean | null;
}
interface UpdateVariantsResponse {
    /** List of the product's variants. */
    variants?: Variant[];
}
interface ResetAllVariantDataRequest {
    /** Product ID. */
    _id: string;
}
interface ResetAllVariantDataResponse {
}
interface AddProductsToCollectionRequest {
    /** Collection ID. */
    _id: string;
    /** IDs of the products to add to the collection, separated by commas. */
    productIds?: string[];
}
interface AddProductsToCollectionResponse {
}
interface RemoveProductsFromCollectionRequest {
    /** ID of the collection from which to remove products. */
    _id: string;
    /** IDs of the products to remove from the collection. */
    productIds: string[];
}
interface RemoveProductsFromCollectionResponse {
}
interface AddProductMediaRequest {
    /** Product ID. */
    _id: string;
    /** Sources of media items already uploaded to the Wix site. */
    media?: MediaDataForWrite[];
}
interface MediaDataForWrite extends MediaDataForWriteMediaSourceOneOf {
    /** Media ID. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
    /** Assign this media item to a specific product choice. Note that you may set media items for choices under only one option (e.g., if Colors blue, green, and red have media items, Sizes S, M, and L can't have media items assigned to them). You may clear existing media from choices with the [Remove Product Media From Choices](#removeproductmediafromchoices). */
    choice?: OptionAndChoice;
}
/** @oneof */
interface MediaDataForWriteMediaSourceOneOf {
    /** Media ID. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
}
interface OptionAndChoice {
    /** Option to add the media to. */
    option?: string;
    /** Choice to add the media to. */
    choice?: string;
}
interface AddProductMediaResponse {
}
interface RemoveProductMediaRequest {
    /** Product ID. */
    _id: string;
    /** List of media IDs to remove. Pass an empty array to delete all media items for the product. */
    mediaIds?: string[];
}
interface RemoveProductMediaResponse {
}
interface AddProductMediaToChoicesRequest {
    /** Product ID. */
    _id: string;
    /** Product media items and the choices to add the media to. */
    media?: MediaAssignmentToChoice[];
}
interface MediaAssignmentToChoice {
    /** Option name. */
    option?: string;
    /** Choice name. */
    choice?: string;
    /** Media IDs (available via the Query Product endpoint). */
    mediaIds?: string[];
}
interface AddProductMediaToChoicesResponse {
}
interface RemoveProductMediaFromChoicesRequest {
    /** Product ID from whose choices to remove media items. */
    _id: string;
    /** Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product. */
    media?: MediaAssignmentToChoice[];
}
interface RemoveProductMediaFromChoicesResponse {
}
interface DeleteProductOptionsRequest {
    /** ID of the product with options to delete. */
    _id: string;
}
interface DeleteProductOptionsResponse {
}
interface RemoveProductBrandRequest {
    /** Product ID. */
    _id: string;
}
interface RemoveProductBrandResponse {
}
interface CreateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface CreateCollectionResponse {
    /** Collection. */
    collection?: Collection;
}
interface UpdateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
interface UpdateCollectionResponse {
    /** Updated collection. */
    collection?: Collection;
}
interface DeleteCollectionRequest {
    /** ID of the collection to delete. */
    _id: string;
}
interface DeleteCollectionResponse {
}
interface RemoveProductRibbonRequest {
    /** Product ID. */
    _id: string;
}
interface RemoveProductRibbonResponse {
}
interface BulkUpdateProductsRequest {
    /** Product IDs. */
    ids: string[];
    /** Field to update. */
    set?: SetValue;
}
interface SetValue extends SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
/** @oneof */
interface SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
interface BulkUpdateProductsResponse {
    /** Bulk action results. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkProductResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkAdjustProductPropertiesRequest {
    /** Product IDs. */
    ids: string[];
    /** Numerical property to adjust. */
    adjust?: AdjustValue;
}
interface AdjustValue extends AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
/** @oneof */
interface AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
interface PropertyAdjustmentData extends PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /** Adjust by amount. */
    amount?: number;
}
/** @oneof */
interface PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /** Adjust by amount. */
    amount?: number;
}
interface PercentageData {
    /**
     * If `true`, result will be rounded to the nearest whole number.
     * If `false`, result will be rounded to 2 places after the decimal point.
     */
    roundToInt?: boolean;
    /**
     * Percentage value, as a whole number (integer) between `-100` and `1000`.
     *
     * For example:
     * + Pass `100` to increase value by 100% (multiply original value by 2).
     * + Pass `1000` to increase value by 1000% (multiply original value by 10).
     * + Pass `-50` to decrease value by 50% (original value is halved).
     */
    rate?: number;
}
interface BulkAdjustProductPropertiesResponse {
    /** Bulk action results. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface Paging {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface QueryProductsPlatformizedRequest {
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryProductsPlatformizedResponse {
    products?: Product[];
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetProductRequest {
    /** Requested product ID. */
    _id: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface GetProductResponse {
    /** Requested product data. */
    product?: Product;
}
interface GetCollectionBySlugRequest {
    /** Slug of the collection to retrieve. */
    slug: string;
}
interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}
interface ProductOptionsAvailabilityRequest {
    /** Requested product ID. */
    _id: string;
    /** Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`. */
    options?: Record<string, string>;
}
interface ProductOptionsAvailabilityResponse {
    /** Variant information, given that all the choices were provided. */
    selectedVariant?: VariantData;
    /** Information about media items (images, videos, etc.) associated with this choice. */
    media?: Media;
    /** Options information (color, size, etc.) for this product, with the inventory and visibility fields updated based on the provided choices. */
    productOptions?: ProductOption[];
    /** Whether all the selected choices result in a visible, in-stock variant. */
    availableForPurchase?: boolean;
}
interface VariantData {
    /** Variant price. */
    price?: PriceData;
    /**
     * Variant price data converted to currency provided in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Variant weight. */
    weight?: number | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Quantity currently in inventory (relevant only when tracking by inventory). */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface QueryProductVariantsRequest {
    /** Requested product ID. */
    _id: string;
    /**
     * The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice).
     * You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (not relevant when passing variant IDs).
     */
    choices?: Record<string, string>;
    /** List of variant IDs (not relevant when passing choices). */
    variantIds?: string[];
    paging?: Paging;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface QueryProductVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: Variant[];
    metadata?: PagingMetadata;
    totalResults?: number;
}
interface QueryStoreVariantsRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface QueryStoreVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: StoreVariant[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface StoreVariant {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen: {productId}.{variantId}. */
    _id?: string;
    /** Variant ID. */
    variantId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant name. */
    variantName?: string;
    /** Product name. */
    productName?: string;
    /** Whether the variant is managed or represents a product. */
    managedVariant?: boolean;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Variant inventory status. */
    stock?: VariantStock;
    /** The selected options of this variant. For example, `{"Color": "Blue", "Size": "Large"}`. */
    choices?: Record<string, string>;
    /** Collections that include this variant. */
    collectionIds?: string[];
    /**
     * Media items (images, videos) associated with this variant.
     * @readonly
     */
    media?: PlatformMedia;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
interface PlatformMedia extends PlatformMediaMediaOneOf {
    image?: string;
    video?: string;
}
/** @oneof */
interface PlatformMediaMediaOneOf {
    image?: string;
    video?: string;
}
interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
interface GetStoreVariantRequest {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`. */
    _id: string;
}
interface GetStoreVariantResponse {
    /** The requested store variant. */
    variant?: StoreVariant;
}
interface NumericPropertyRangeNonNullableFields {
    minValue: number;
    maxValue: number;
}
interface StockNonNullableFields {
    trackInventory: boolean;
    inStock: boolean;
    inventoryStatus: InventoryStatus;
}
interface FormattedPriceNonNullableFields {
    price: string;
    discountedPrice: string;
}
interface PriceDataNonNullableFields {
    currency: string;
    discountedPrice: number;
    formatted?: FormattedPriceNonNullableFields;
}
interface CostAndProfitDataNonNullableFields {
    formattedItemCost: string;
    profit: number;
    formattedProfit: string;
    profitMargin: number;
}
interface PricePerUnitDataNonNullableFields {
    totalQuantity: number;
    totalMeasurementUnit: MeasurementUnit;
    baseQuantity: number;
    baseMeasurementUnit: MeasurementUnit;
}
interface AdditionalInfoSectionNonNullableFields {
    title: string;
    description: string;
}
interface RibbonNonNullableFields {
    text: string;
}
interface MediaItemUrlAndSizeNonNullableFields {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields {
    files: MediaItemUrlAndSizeNonNullableFields[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields {
    image?: MediaItemUrlAndSizeNonNullableFields;
    video?: MediaItemVideoNonNullableFields;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields;
    mediaType: MediaItemType;
    title: string;
    _id: string;
}
interface MediaNonNullableFields {
    mainMedia?: MediaItemNonNullableFields;
    items: MediaItemNonNullableFields[];
}
interface CustomTextFieldNonNullableFields {
    title: string;
    maxLength: number;
    mandatory: boolean;
}
interface ChoiceNonNullableFields {
    value: string;
    description: string;
    media?: MediaNonNullableFields;
    inStock: boolean;
    visible: boolean;
}
interface ProductOptionNonNullableFields {
    optionType: OptionType;
    name: string;
    choices: ChoiceNonNullableFields[];
}
interface PageUrlNonNullableFields {
    base: string;
    path: string;
}
interface DiscountNonNullableFields {
    type: DiscountType;
    value: number;
}
interface VariantDataWithNoStockNonNullableFields {
    priceData?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    costAndProfitData?: CostAndProfitDataNonNullableFields;
    weight: number;
    sku: string;
    visible: boolean;
}
interface VariantStockNonNullableFields {
    trackQuantity: boolean;
    inStock: boolean;
}
interface VariantNonNullableFields {
    _id: string;
    variant?: VariantDataWithNoStockNonNullableFields;
    stock?: VariantStockNonNullableFields;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface ProductNonNullableFields {
    _id: string;
    slug: string;
    productType: ProductType;
    weightRange?: NumericPropertyRangeNonNullableFields;
    stock?: StockNonNullableFields;
    price?: PriceDataNonNullableFields;
    priceData?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    priceRange?: NumericPropertyRangeNonNullableFields;
    costAndProfitData?: CostAndProfitDataNonNullableFields;
    costRange?: NumericPropertyRangeNonNullableFields;
    pricePerUnitData?: PricePerUnitDataNonNullableFields;
    additionalInfoSections: AdditionalInfoSectionNonNullableFields[];
    ribbons: RibbonNonNullableFields[];
    media?: MediaNonNullableFields;
    customTextFields: CustomTextFieldNonNullableFields[];
    productOptions: ProductOptionNonNullableFields[];
    productPageUrl?: PageUrlNonNullableFields;
    numericId: string;
    inventoryItemId: string;
    discount?: DiscountNonNullableFields;
    collectionIds: string[];
    variants: VariantNonNullableFields[];
    seoData?: SeoSchemaNonNullableFields;
    exportProductId: string;
    digitalFile?: SecuredMediaNonNullableFields;
}
interface CreateProductResponseNonNullableFields {
    product?: ProductNonNullableFields;
}
interface UpdateProductResponseNonNullableFields {
    product?: ProductNonNullableFields;
}
interface UpdateVariantsResponseNonNullableFields {
    variants: VariantNonNullableFields[];
}
interface CollectionNonNullableFields {
    media?: MediaNonNullableFields;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields;
}
interface CreateCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface UpdateCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkProductResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdateProductsResponseNonNullableFields {
    results: BulkProductResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkAdjustProductPropertiesResponseNonNullableFields {
    results: BulkProductResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface QueryProductsPlatformizedResponseNonNullableFields {
    products: ProductNonNullableFields[];
}
interface GetProductResponseNonNullableFields {
    product?: ProductNonNullableFields;
}
interface GetCollectionBySlugResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface VariantDataNonNullableFields {
    price?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    sku: string;
    inStock: boolean;
    visible: boolean;
    variantId: string;
}
interface ProductOptionsAvailabilityResponseNonNullableFields {
    selectedVariant?: VariantDataNonNullableFields;
    media?: MediaNonNullableFields;
    productOptions: ProductOptionNonNullableFields[];
    availableForPurchase: boolean;
    managedProduct: boolean;
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
interface QueryProductVariantsResponseNonNullableFields {
    variants: VariantNonNullableFields[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}
interface PlatformMediaNonNullableFields {
    image: string;
    video: string;
}
interface PreorderInfoNonNullableFields {
    enabled: boolean;
}
interface StoreVariantNonNullableFields {
    _id: string;
    variantId: string;
    productId: string;
    variantName: string;
    productName: string;
    managedVariant: boolean;
    sku: string;
    stock?: VariantStockNonNullableFields;
    collectionIds: string[];
    media?: PlatformMediaNonNullableFields;
    preorderInfo?: PreorderInfoNonNullableFields;
}
interface QueryStoreVariantsResponseNonNullableFields {
    variants: StoreVariantNonNullableFields[];
}
interface GetStoreVariantResponseNonNullableFields {
    variant?: StoreVariantNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createProduct(): __PublicMethodMetaInfo<'POST', {}, CreateProductRequest, CreateProductRequest$1, CreateProductResponse & CreateProductResponseNonNullableFields, CreateProductResponse$1 & CreateProductResponseNonNullableFields$1>;
declare function updateProduct(): __PublicMethodMetaInfo<'PATCH', {
    productId: string;
}, UpdateProductRequest, UpdateProductRequest$1, UpdateProductResponse & UpdateProductResponseNonNullableFields, UpdateProductResponse$1 & UpdateProductResponseNonNullableFields$1>;
declare function deleteProduct(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteProductRequest, DeleteProductRequest$1, DeleteProductResponse, DeleteProductResponse$1>;
declare function updateProductVariants(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
}, UpdateVariantsRequest, UpdateVariantsRequest$1, UpdateVariantsResponse & UpdateVariantsResponseNonNullableFields, UpdateVariantsResponse$1 & UpdateVariantsResponseNonNullableFields$1>;
declare function resetAllProductVariantData(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, ResetAllVariantDataRequest, ResetAllVariantDataRequest$1, ResetAllVariantDataResponse, ResetAllVariantDataResponse$1>;
declare function addProductsToCollection(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddProductsToCollectionRequest, AddProductsToCollectionRequest$1, AddProductsToCollectionResponse, AddProductsToCollectionResponse$1>;
declare function removeProductsFromCollection(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductsFromCollectionRequest, RemoveProductsFromCollectionRequest$1, RemoveProductsFromCollectionResponse, RemoveProductsFromCollectionResponse$1>;
declare function addProductMedia(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddProductMediaRequest, AddProductMediaRequest$1, AddProductMediaResponse, AddProductMediaResponse$1>;
declare function removeProductMedia(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductMediaRequest, RemoveProductMediaRequest$1, RemoveProductMediaResponse, RemoveProductMediaResponse$1>;
declare function addProductMediaToChoices(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
}, AddProductMediaToChoicesRequest, AddProductMediaToChoicesRequest$1, AddProductMediaToChoicesResponse, AddProductMediaToChoicesResponse$1>;
declare function removeProductMediaFromChoices(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductMediaFromChoicesRequest, RemoveProductMediaFromChoicesRequest$1, RemoveProductMediaFromChoicesResponse, RemoveProductMediaFromChoicesResponse$1>;
declare function deleteProductOptions(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteProductOptionsRequest, DeleteProductOptionsRequest$1, DeleteProductOptionsResponse, DeleteProductOptionsResponse$1>;
declare function removeBrand(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductBrandRequest, RemoveProductBrandRequest$1, RemoveProductBrandResponse, RemoveProductBrandResponse$1>;
declare function createCollection(): __PublicMethodMetaInfo<'POST', {}, CreateCollectionRequest, CreateCollectionRequest$1, CreateCollectionResponse & CreateCollectionResponseNonNullableFields, CreateCollectionResponse$1 & CreateCollectionResponseNonNullableFields$1>;
declare function updateCollection(): __PublicMethodMetaInfo<'PATCH', {
    collectionId: string;
}, UpdateCollectionRequest, UpdateCollectionRequest$1, UpdateCollectionResponse & UpdateCollectionResponseNonNullableFields, UpdateCollectionResponse$1 & UpdateCollectionResponseNonNullableFields$1>;
declare function deleteCollection(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteCollectionRequest, DeleteCollectionRequest$1, DeleteCollectionResponse, DeleteCollectionResponse$1>;
declare function removeRibbon(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductRibbonRequest, RemoveProductRibbonRequest$1, RemoveProductRibbonResponse, RemoveProductRibbonResponse$1>;
declare function bulkUpdateProductsProperty(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateProductsRequest, BulkUpdateProductsRequest$1, BulkUpdateProductsResponse & BulkUpdateProductsResponseNonNullableFields, BulkUpdateProductsResponse$1 & BulkUpdateProductsResponseNonNullableFields$1>;
declare function bulkAdjustProductProperty(): __PublicMethodMetaInfo<'POST', {}, BulkAdjustProductPropertiesRequest, BulkAdjustProductPropertiesRequest$1, BulkAdjustProductPropertiesResponse & BulkAdjustProductPropertiesResponseNonNullableFields, BulkAdjustProductPropertiesResponse$1 & BulkAdjustProductPropertiesResponseNonNullableFields$1>;
declare function queryProducts(): __PublicMethodMetaInfo<'GET', {}, QueryProductsPlatformizedRequest, QueryProductsPlatformizedRequest$1, QueryProductsPlatformizedResponse & QueryProductsPlatformizedResponseNonNullableFields, QueryProductsPlatformizedResponse$1 & QueryProductsPlatformizedResponseNonNullableFields$1>;
declare function getProduct(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetProductRequest, GetProductRequest$1, GetProductResponse & GetProductResponseNonNullableFields, GetProductResponse$1 & GetProductResponseNonNullableFields$1>;
declare function getCollectionBySlug(): __PublicMethodMetaInfo<'GET', {
    slug: string;
}, GetCollectionBySlugRequest, GetCollectionBySlugRequest$1, GetCollectionBySlugResponse & GetCollectionBySlugResponseNonNullableFields, GetCollectionBySlugResponse$1 & GetCollectionBySlugResponseNonNullableFields$1>;
declare function getProductOptionsAvailability(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, ProductOptionsAvailabilityRequest, ProductOptionsAvailabilityRequest$1, ProductOptionsAvailabilityResponse & ProductOptionsAvailabilityResponseNonNullableFields, ProductOptionsAvailabilityResponse$1 & ProductOptionsAvailabilityResponseNonNullableFields$1>;
declare function queryProductVariants(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, QueryProductVariantsRequest, QueryProductVariantsRequest$1, QueryProductVariantsResponse & QueryProductVariantsResponseNonNullableFields, QueryProductVariantsResponse$1 & QueryProductVariantsResponseNonNullableFields$1>;
declare function queryStoreVariants(): __PublicMethodMetaInfo<'POST', {}, QueryStoreVariantsRequest, QueryStoreVariantsRequest$1, QueryStoreVariantsResponse & QueryStoreVariantsResponseNonNullableFields, QueryStoreVariantsResponse$1 & QueryStoreVariantsResponseNonNullableFields$1>;
declare function getStoreVariant(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetStoreVariantRequest, GetStoreVariantRequest$1, GetStoreVariantResponse & GetStoreVariantResponseNonNullableFields, GetStoreVariantResponse$1 & GetStoreVariantResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addProductMedia, addProductMediaToChoices, addProductsToCollection, bulkAdjustProductProperty, bulkUpdateProductsProperty, createCollection, createProduct, deleteCollection, deleteProduct, deleteProductOptions, getCollectionBySlug, getProduct, getProductOptionsAvailability, getStoreVariant, queryProductVariants, queryProducts, queryStoreVariants, removeBrand, removeProductMedia, removeProductMediaFromChoices, removeProductsFromCollection, removeRibbon, resetAllProductVariantData, updateCollection, updateProduct, updateProductVariants };
