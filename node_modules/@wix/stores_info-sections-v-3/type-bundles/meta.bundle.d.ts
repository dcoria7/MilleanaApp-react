/**
 * An info section is a visible property of a product
 * Add info sections to a product to provide all the explanations your customers need.
 */
interface InfoSection$1 {
    /**
     * Info section ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the info section is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the info section.
     *
     * Ignored when creating an info section.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the info section was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the info section was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Unique name. Used as an identifier. */
    uniqueName?: string;
    /** Info section title. */
    title?: string;
    /**
     * Info section description using rich content.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent$1;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
    /**
     * Number of products this info section is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Info Sections API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface RichContent$1 {
    /** Node objects representing a rich content document. */
    nodes?: Node$1[];
    /** Object metadata. */
    metadata?: Metadata$1;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle$1;
}
interface Node$1 extends NodeDataOneOf$1 {
    /** Data for a button node. */
    buttonData?: ButtonData$1;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData$1;
    /** Data for a divider node. */
    dividerData?: DividerData$1;
    /** Data for a file node. */
    fileData?: FileData$1;
    /** Data for a gallery node. */
    galleryData?: GalleryData$1;
    /** Data for a GIF node. */
    gifData?: GIFData$1;
    /** Data for a heading node. */
    headingData?: HeadingData$1;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData$1;
    /** Data for an image node. */
    imageData?: ImageData$1;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData$1;
    /** Data for a map node. */
    mapData?: MapData$1;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData$1;
    /** Data for a poll node. */
    pollData?: PollData$1;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData$1;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData$1;
    /** Data for a video node. */
    videoData?: VideoData$1;
    /** Data for an oEmbed node. */
    embedData?: EmbedData$1;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData$1;
    /** Data for a table node. */
    tableData?: TableData$1;
    /** Data for a table cell node. */
    tableCellData?: TableCellData$1;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData$1;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData$1;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData$1;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData$1;
    /** Data for a caption node. */
    captionData?: CaptionData$1;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType$1;
    /** Node ID. */
    id?: string;
    /** A list of child nodes. */
    nodes?: Node$1[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle$1;
}
/** @oneof */
interface NodeDataOneOf$1 {
    /** Data for a button node. */
    buttonData?: ButtonData$1;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData$1;
    /** Data for a divider node. */
    dividerData?: DividerData$1;
    /** Data for a file node. */
    fileData?: FileData$1;
    /** Data for a gallery node. */
    galleryData?: GalleryData$1;
    /** Data for a GIF node. */
    gifData?: GIFData$1;
    /** Data for a heading node. */
    headingData?: HeadingData$1;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData$1;
    /** Data for an image node. */
    imageData?: ImageData$1;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData$1;
    /** Data for a map node. */
    mapData?: MapData$1;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData$1;
    /** Data for a poll node. */
    pollData?: PollData$1;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData$1;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData$1;
    /** Data for a video node. */
    videoData?: VideoData$1;
    /** Data for an oEmbed node. */
    embedData?: EmbedData$1;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData$1;
    /** Data for a table node. */
    tableData?: TableData$1;
    /** Data for a table cell node. */
    tableCellData?: TableCellData$1;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData$1;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData$1;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData$1;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData$1;
    /** Data for a caption node. */
    captionData?: CaptionData$1;
}
declare enum NodeType$1 {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION"
}
interface NodeStyle$1 {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData$1 {
    /** Styling for the button's container. */
    containerData?: PluginContainerData$1;
    /** The button type. */
    type?: Type$1;
    /** Styling for the button. */
    styles?: Styles$1;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link$1;
}
interface Border$1 {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface Colors$1 {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
interface PluginContainerData$1 {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth$1;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment$1;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler$1;
    /** The height of the node when it's displayed. */
    height?: Height$1;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType$1 {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
interface PluginContainerDataWidth$1 extends PluginContainerDataWidthDataOneOf$1 {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType$1;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf$1 {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType$1;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment$1 {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
interface Spoiler$1 {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height$1 {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type$1 {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
interface Styles$1 {
    /** Border attributes. */
    border?: Border$1;
    /** Color attributes. */
    colors?: Colors$1;
}
interface Link$1 extends LinkDataOneOf$1 {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target$1;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel$1;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf$1 {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target$1 {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
interface Rel$1 {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData$1 {
    /** Styling for the code block's text. */
    textStyle?: TextStyle$1;
}
interface TextStyle$1 {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment$1;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment$1 {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
interface DividerData$1 {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData$1;
    /** Divider line style. */
    lineStyle?: LineStyle$1;
    /** Divider width. */
    width?: Width$1;
    /** Divider alignment. */
    alignment?: Alignment$1;
}
declare enum LineStyle$1 {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
declare enum Width$1 {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
declare enum Alignment$1 {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
interface FileData$1 {
    /** Styling for the file's container. */
    containerData?: PluginContainerData$1;
    /** The source for the file's data. */
    src?: FileSource$1;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings$1;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode$1 {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
interface FileSource$1 extends FileSourceDataOneOf$1 {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf$1 {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
}
interface PDFSettings$1 {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode$1;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData$1 {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData$1;
    /** The items in the gallery. */
    items?: Item$1[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions$1;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface Media$1 {
    /** The source for the media's data. */
    src?: FileSource$1;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image$1 {
    /** Image file details. */
    media?: Media$1;
    /** Link details for images that are links. */
    link?: Link$1;
}
interface Video$1 {
    /** Video file details. */
    media?: Media$1;
    /** Video thumbnail file details. */
    thumbnail?: Media$1;
}
interface Item$1 extends ItemDataOneOf$1 {
    /** An image item. */
    image?: Image$1;
    /** A video item. */
    video?: Video$1;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf$1 {
    /** An image item. */
    image?: Image$1;
    /** A video item. */
    video?: Video$1;
}
interface GalleryOptions$1 {
    /** Gallery layout. */
    layout?: Layout$1;
    /** Styling for gallery items. */
    item?: ItemStyle$1;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails$1;
}
declare enum LayoutType$1 {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
declare enum Orientation$1 {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
declare enum Crop$1 {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
declare enum ThumbnailsAlignment$1 {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
interface Layout$1 {
    /** Gallery layout type. */
    type?: LayoutType$1;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation$1;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle$1 {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop$1;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails$1 {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment$1;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData$1 {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData$1;
    /** The source of the full size GIF. */
    original?: GIF$1;
    /** The source of the downsized GIF. */
    downsized?: GIF$1;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
}
interface GIF$1 {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
interface HeadingData$1 {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle$1;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData$1 extends HTMLDataDataOneOf$1 {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. */
    containerData?: PluginContainerData$1;
    /** The type of HTML code. */
    source?: Source$1;
}
/** @oneof */
interface HTMLDataDataOneOf$1 {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source$1 {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
interface ImageData$1 {
    /** Styling for the image's container. */
    containerData?: PluginContainerData$1;
    /** Image file details. */
    image?: Media$1;
    /** Link details for images that are links. */
    link?: Link$1;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface LinkPreviewData$1 {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData$1;
    /** Link details. */
    link?: Link$1;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
interface MapData$1 {
    /** Styling for the map's container. */
    containerData?: PluginContainerData$1;
    /** Map settings. */
    mapSettings?: MapSettings$1;
}
interface MapSettings$1 {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType$1;
}
declare enum MapType$1 {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
interface ParagraphData$1 {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle$1;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData$1 {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData$1;
    /** Poll data. */
    poll?: Poll$1;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout$1;
    /** Styling for the poll and voting options. */
    design?: Design$1;
}
declare enum ViewRole$1 {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
declare enum VoteRole$1 {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
interface Permissions$1 {
    /** Sets who can view the poll results. */
    view?: ViewRole$1;
    /** Sets who can vote. */
    vote?: VoteRole$1;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option$1 {
    /** Option ID. */
    id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: Media$1;
}
interface Settings$1 {
    /** Permissions settings for voting. */
    permissions?: Permissions$1;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType$1 {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
declare enum PollLayoutDirection$1 {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface PollLayout$1 {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType$1;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection$1;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout$1 {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType$1 {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
interface Gradient$1 {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
interface Background$1 extends BackgroundBackgroundOneOf$1 {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: Media$1;
    /** Details for a gradient background. */
    gradient?: Gradient$1;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType$1;
}
/** @oneof */
interface BackgroundBackgroundOneOf$1 {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: Media$1;
    /** Details for a gradient background. */
    gradient?: Gradient$1;
}
interface PollDesign$1 {
    /** Background styling. */
    background?: Background$1;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign$1 {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll$1 {
    /** Poll ID. */
    id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: Media$1;
    /** Voting options. */
    options?: Option$1[];
    /** The poll's permissions and display settings. */
    settings?: Settings$1;
}
interface PollDataLayout$1 {
    /** Poll layout settings. */
    poll?: PollLayout$1;
    /** Voting otpions layout settings. */
    options?: OptionLayout$1;
}
interface Design$1 {
    /** Styling for the poll. */
    poll?: PollDesign$1;
    /** Styling for voting options. */
    options?: OptionDesign$1;
}
interface TextData$1 {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration$1[];
}
/** Adds appearence changes to text */
interface Decoration$1 extends DecorationDataOneOf$1 {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData$1;
    /** Data for a color decoration. */
    colorData?: ColorData$1;
    /** Data for an external link decoration. */
    linkData?: LinkData$1;
    /** Data for a mention decoration. */
    mentionData?: MentionData$1;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData$1;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData$1;
    /** The type of decoration to apply. */
    type?: DecorationType$1;
}
/** @oneof */
interface DecorationDataOneOf$1 {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData$1;
    /** Data for a color decoration. */
    colorData?: ColorData$1;
    /** Data for an external link decoration. */
    linkData?: LinkData$1;
    /** Data for a mention decoration. */
    mentionData?: MentionData$1;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData$1;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData$1;
}
declare enum DecorationType$1 {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
interface AnchorData$1 {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData$1 {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData$1 {
    /** Link details. */
    link?: Link$1;
}
interface MentionData$1 {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    id?: string | null;
}
interface FontSizeData$1 {
    /** The units used for the font size. */
    unit?: FontType$1;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType$1 {
    PX = "PX",
    EM = "EM"
}
interface SpoilerData$1 {
    /** Spoiler ID. */
    id?: string | null;
}
interface AppEmbedData$1 extends AppEmbedDataAppDataOneOf$1 {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData$1;
    /** Data for embedded Wix Events content. */
    eventData?: EventData$1;
    /** The type of Wix App content being embedded. */
    type?: AppType$1;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: Media$1;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf$1 {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData$1;
    /** Data for embedded Wix Events content. */
    eventData?: EventData$1;
}
declare enum AppType$1 {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
interface BookingData$1 {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData$1 {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData$1 {
    /** Styling for the video's container. */
    containerData?: PluginContainerData$1;
    /** Video details. */
    video?: Media$1;
    /** Video thumbnail details. */
    thumbnail?: Media$1;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions$1;
}
interface PlaybackOptions$1 {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData$1 {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData$1;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed$1;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed$1 {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData$1 {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData$1;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems$1;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction$1;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems$1 {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
declare enum Direction$1 {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface TableData$1 {
    /** Styling for the table's container. */
    containerData?: PluginContainerData$1;
    /** The table's dimensions. */
    dimensions?: Dimensions$1;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions$1 {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData$1 {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle$1;
    /** The cell's border colors. */
    borderColors?: BorderColors$1;
}
declare enum VerticalAlignment$1 {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
interface CellStyle$1 {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment$1;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface BorderColors$1 {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
interface AudioData$1 {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData$1;
    /** Audio file details. */
    audio?: Media$1;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: Media$1;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData$1 {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData$1 {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData$1 {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData$1 {
    textStyle?: TextStyle$1;
}
interface Metadata$1 {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    id?: string | null;
}
interface DocumentStyle$1 {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle$1;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle$1;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle$1;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle$1;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle$1;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle$1;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle$1;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle$1;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle$1;
}
interface TextNodeStyle$1 {
    /** The decorations to apply to the node. */
    decorations?: Decoration$1[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle$1;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface CreateInfoSectionRequest$1 {
    /** Info section to create. */
    infoSection: InfoSection$1;
}
interface CreateInfoSectionResponse$1 {
    /** Created info section. */
    infoSection?: InfoSection$1;
}
interface GetInfoSectionRequest$1 {
    /** Info section ID. */
    infoSectionId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
declare enum RequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetInfoSectionResponse$1 {
    /** Info section. */
    infoSection?: InfoSection$1;
}
interface GetOrCreateInfoSectionRequest$1 {
    /** Info section to retrieve or create. */
    infoSection?: InfoSectionForGetOrCreate$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface InfoSectionForGetOrCreate$1 {
    /**
     * Info section ID.
     * Pass an ID to retrieve an existing info section.
     */
    id?: string | null;
    /**
     * Info section unique name.
     *
     * > **Note:**
     * > + Pass the `uniqueName` of an existing info section to return it.
     * > + If no such info section exists - pass `uniqueName` and `title` to create an info section.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     *
     * Required when passing `uniqueName` to create a new info section.
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     *
     * Learn more about [Working with Rich Content](https://dev.wix.com/docs/go-headless/tutorials-templates/other-tutorials/working-with-rich-content).
     */
    description?: RichContent$1;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
}
interface GetOrCreateInfoSectionResponse$1 {
    /** Info section. */
    infoSection?: InfoSection$1;
}
interface BulkGetOrCreateInfoSectionsRequest$1 {
    /** Info sections to retrieve or create. */
    infoSections?: InfoSectionForGetOrCreate$1[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface BulkGetOrCreateInfoSectionsResponse$1 {
    /** Info sections retrieved or created by bulk action. */
    results?: BulkInfoSectionItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkInfoSectionItemResult$1 {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InfoSection$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateInfoSectionRequest$1 {
    /** Info section to update. */
    infoSection: InfoSection$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface UpdateInfoSectionResponse$1 {
    /** Updated info section. */
    infoSection?: InfoSection$1;
}
interface DeleteInfoSectionRequest$1 {
    /** Info section ID */
    infoSectionId: string;
}
interface DeleteInfoSectionResponse$1 {
}
interface QueryInfoSectionsRequest$1 {
    /** Query options. */
    query?: CursorQuery$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryInfoSectionsResponse$1 {
    /** List of info sections. */
    infoSections?: InfoSection$1[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateInfoSectionsRequest$1 {
    /** Info sections to create. */
    infoSections: InfoSection$1[];
    /**
     * Whether to return the full created info section entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInfoSectionsResponse$1 {
    /** Info sections created by bulk action. */
    results?: BulkInfoSectionItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUpdateInfoSectionsRequest$1 {
    /** List of info sections to update. */
    infoSections: MaskedInfoSection$1[];
    /**
     * Whether to return the full updated info sections entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface MaskedInfoSection$1 {
    /** Info section to update. */
    infoSection?: InfoSection$1;
}
interface BulkUpdateInfoSectionsResponse$1 {
    /** Info sections updated by bulk action. */
    results?: BulkInfoSectionItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkDeleteInfoSectionsRequest$1 {
    /** IDs of info sections to delete. */
    infoSectionIds: string[];
}
interface BulkDeleteInfoSectionsResponse$1 {
    /** Info sections deleted by bulk action */
    results?: BulkInfoSectionResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkInfoSectionResult$1 {
    /** Bulk action metadata for info section. */
    itemMetadata?: ItemMetadata$1;
}
interface PluginContainerDataWidthNonNullableFields$1 {
    size: WidthType$1;
}
interface PluginContainerDataNonNullableFields$1 {
    width?: PluginContainerDataWidthNonNullableFields$1;
    alignment: PluginContainerDataAlignment$1;
}
interface LinkNonNullableFields$1 {
    url: string;
    anchor: string;
    target: Target$1;
}
interface ButtonDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    type: Type$1;
    link?: LinkNonNullableFields$1;
}
interface TextStyleNonNullableFields$1 {
    textAlignment: TextAlignment$1;
}
interface CodeBlockDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface DividerDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    lineStyle: LineStyle$1;
    width: Width$1;
    alignment: Alignment$1;
}
interface PDFSettingsNonNullableFields$1 {
    viewMode: ViewMode$1;
}
interface FileDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    pdfSettings?: PDFSettingsNonNullableFields$1;
}
interface ImageNonNullableFields$1 {
    link?: LinkNonNullableFields$1;
}
interface ItemNonNullableFields$1 {
    image?: ImageNonNullableFields$1;
}
interface LayoutNonNullableFields$1 {
    type: LayoutType$1;
    orientation: Orientation$1;
}
interface ItemStyleNonNullableFields$1 {
    crop: Crop$1;
}
interface ThumbnailsNonNullableFields$1 {
    placement: ThumbnailsAlignment$1;
}
interface GalleryOptionsNonNullableFields$1 {
    layout?: LayoutNonNullableFields$1;
    item?: ItemStyleNonNullableFields$1;
    thumbnails?: ThumbnailsNonNullableFields$1;
}
interface GalleryDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    items: ItemNonNullableFields$1[];
    options?: GalleryOptionsNonNullableFields$1;
}
interface GIFDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    height: number;
    width: number;
}
interface HeadingDataNonNullableFields$1 {
    level: number;
    textStyle?: TextStyleNonNullableFields$1;
}
interface HTMLDataNonNullableFields$1 {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields$1;
    source: Source$1;
}
interface ImageDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    link?: LinkNonNullableFields$1;
}
interface LinkPreviewDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    link?: LinkNonNullableFields$1;
}
interface MapSettingsNonNullableFields$1 {
    mapType: MapType$1;
}
interface MapDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    mapSettings?: MapSettingsNonNullableFields$1;
}
interface ParagraphDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface PermissionsNonNullableFields$1 {
    view: ViewRole$1;
    vote: VoteRole$1;
}
interface SettingsNonNullableFields$1 {
    permissions?: PermissionsNonNullableFields$1;
}
interface PollNonNullableFields$1 {
    settings?: SettingsNonNullableFields$1;
}
interface PollLayoutNonNullableFields$1 {
    type: PollLayoutType$1;
    direction: PollLayoutDirection$1;
}
interface PollDataLayoutNonNullableFields$1 {
    poll?: PollLayoutNonNullableFields$1;
}
interface BackgroundNonNullableFields$1 {
    type: BackgroundType$1;
}
interface PollDesignNonNullableFields$1 {
    background?: BackgroundNonNullableFields$1;
}
interface DesignNonNullableFields$1 {
    poll?: PollDesignNonNullableFields$1;
}
interface PollDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    poll?: PollNonNullableFields$1;
    layout?: PollDataLayoutNonNullableFields$1;
    design?: DesignNonNullableFields$1;
}
interface AnchorDataNonNullableFields$1 {
    anchor: string;
}
interface LinkDataNonNullableFields$1 {
    link?: LinkNonNullableFields$1;
}
interface MentionDataNonNullableFields$1 {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields$1 {
    unit: FontType$1;
}
interface DecorationNonNullableFields$1 {
    anchorData?: AnchorDataNonNullableFields$1;
    linkData?: LinkDataNonNullableFields$1;
    mentionData?: MentionDataNonNullableFields$1;
    fontSizeData?: FontSizeDataNonNullableFields$1;
    type: DecorationType$1;
}
interface TextDataNonNullableFields$1 {
    text: string;
    decorations: DecorationNonNullableFields$1[];
}
interface AppEmbedDataNonNullableFields$1 {
    type: AppType$1;
}
interface VideoDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface EmbedDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface CollapsibleListDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    initialExpandedItems: InitialExpandedItems$1;
    direction: Direction$1;
}
interface DimensionsNonNullableFields$1 {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    dimensions?: DimensionsNonNullableFields$1;
}
interface CellStyleNonNullableFields$1 {
    verticalAlignment: VerticalAlignment$1;
}
interface TableCellDataNonNullableFields$1 {
    cellStyle?: CellStyleNonNullableFields$1;
}
interface AudioDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface OrderedListDataNonNullableFields$1 {
    indentation: number;
}
interface BulletedListDataNonNullableFields$1 {
    indentation: number;
}
interface BlockquoteDataNonNullableFields$1 {
    indentation: number;
}
interface CaptionDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface NodeNonNullableFields$1 {
    buttonData?: ButtonDataNonNullableFields$1;
    codeBlockData?: CodeBlockDataNonNullableFields$1;
    dividerData?: DividerDataNonNullableFields$1;
    fileData?: FileDataNonNullableFields$1;
    galleryData?: GalleryDataNonNullableFields$1;
    gifData?: GIFDataNonNullableFields$1;
    headingData?: HeadingDataNonNullableFields$1;
    htmlData?: HTMLDataNonNullableFields$1;
    imageData?: ImageDataNonNullableFields$1;
    linkPreviewData?: LinkPreviewDataNonNullableFields$1;
    mapData?: MapDataNonNullableFields$1;
    paragraphData?: ParagraphDataNonNullableFields$1;
    pollData?: PollDataNonNullableFields$1;
    textData?: TextDataNonNullableFields$1;
    appEmbedData?: AppEmbedDataNonNullableFields$1;
    videoData?: VideoDataNonNullableFields$1;
    embedData?: EmbedDataNonNullableFields$1;
    collapsibleListData?: CollapsibleListDataNonNullableFields$1;
    tableData?: TableDataNonNullableFields$1;
    tableCellData?: TableCellDataNonNullableFields$1;
    audioData?: AudioDataNonNullableFields$1;
    orderedListData?: OrderedListDataNonNullableFields$1;
    bulletedListData?: BulletedListDataNonNullableFields$1;
    blockquoteData?: BlockquoteDataNonNullableFields$1;
    captionData?: CaptionDataNonNullableFields$1;
    type: NodeType$1;
    id: string;
    nodes: NodeNonNullableFields$1[];
}
interface MetadataNonNullableFields$1 {
    version: number;
}
interface TextNodeStyleNonNullableFields$1 {
    decorations: DecorationNonNullableFields$1[];
}
interface DocumentStyleNonNullableFields$1 {
    headerOne?: TextNodeStyleNonNullableFields$1;
    headerTwo?: TextNodeStyleNonNullableFields$1;
    headerThree?: TextNodeStyleNonNullableFields$1;
    headerFour?: TextNodeStyleNonNullableFields$1;
    headerFive?: TextNodeStyleNonNullableFields$1;
    headerSix?: TextNodeStyleNonNullableFields$1;
    paragraph?: TextNodeStyleNonNullableFields$1;
    blockquote?: TextNodeStyleNonNullableFields$1;
    codeBlock?: TextNodeStyleNonNullableFields$1;
}
interface RichContentNonNullableFields$1 {
    nodes: NodeNonNullableFields$1[];
    metadata?: MetadataNonNullableFields$1;
    documentStyle?: DocumentStyleNonNullableFields$1;
}
interface InfoSectionNonNullableFields$1 {
    uniqueName: string;
    title: string;
    description?: RichContentNonNullableFields$1;
}
interface CreateInfoSectionResponseNonNullableFields$1 {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface GetInfoSectionResponseNonNullableFields$1 {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface GetOrCreateInfoSectionResponseNonNullableFields$1 {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkInfoSectionItemResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: InfoSectionNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkGetOrCreateInfoSectionsResponseNonNullableFields$1 {
    results: BulkInfoSectionItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface UpdateInfoSectionResponseNonNullableFields$1 {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface QueryInfoSectionsResponseNonNullableFields$1 {
    infoSections: InfoSectionNonNullableFields$1[];
}
interface BulkCreateInfoSectionsResponseNonNullableFields$1 {
    results: BulkInfoSectionItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateInfoSectionsResponseNonNullableFields$1 {
    results: BulkInfoSectionItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkInfoSectionResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkDeleteInfoSectionsResponseNonNullableFields$1 {
    results: BulkInfoSectionResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

/**
 * An info section is a visible property of a product
 * Add info sections to a product to provide all the explanations your customers need.
 */
interface InfoSection {
    /**
     * Info section ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the info section is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the info section.
     *
     * Ignored when creating an info section.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the info section was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the info section was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Unique name. Used as an identifier. */
    uniqueName?: string;
    /** Info section title. */
    title?: string;
    /**
     * Info section description using rich content.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
    /**
     * Number of products this info section is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Info Sections API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** Data for a map node. */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType;
    /** Node ID. */
    _id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** Data for a map node. */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
}
declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION"
}
interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: Type;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
interface Border {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface Colors {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
interface Styles {
    /** Border attributes. */
    border?: Border;
    /** Color attributes. */
    colors?: Colors;
}
interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyle;
    /** Divider width. */
    width?: Width;
    /** Divider alignment. */
    alignment?: Alignment;
}
declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
declare enum Alignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
}
interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image {
    /** Image file details. */
    media?: Media;
    /** Link details for images that are links. */
    link?: Link;
}
interface Video {
    /** Video file details. */
    media?: Media;
    /** Video thumbnail file details. */
    thumbnail?: Media;
}
interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
}
interface GalleryOptions {
    /** Gallery layout. */
    layout?: Layout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
interface Layout {
    /** Gallery layout type. */
    type?: LayoutType;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
}
interface GIF {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: Source;
}
/** @oneof */
interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType;
}
declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRole;
    /** Sets who can vote. */
    vote?: VoteRole;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option {
    /** Option ID. */
    _id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: Media;
}
interface Settings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
interface Background extends BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType;
}
/** @oneof */
interface BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll {
    /** Poll ID. */
    _id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: Settings;
}
interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** The type of decoration to apply. */
    type?: DecorationType;
}
/** @oneof */
interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
}
declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData {
    /** Link details. */
    link?: Link;
}
interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    _id?: string | null;
}
interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontType;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType {
    PX = "PX",
    EM = "EM"
}
interface SpoilerData {
    /** Spoiler ID. */
    _id?: string | null;
}
interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppType;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: Media;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: Media;
    /** Video thumbnail details. */
    thumbnail?: Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface BorderColors {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData {
    textStyle?: TextStyle;
}
interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface CreateInfoSectionRequest {
    /** Info section to create. */
    infoSection: InfoSection;
}
interface CreateInfoSectionResponse {
    /** Created info section. */
    infoSection?: InfoSection;
}
interface GetInfoSectionRequest {
    /** Info section ID. */
    infoSectionId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetInfoSectionResponse {
    /** Info section. */
    infoSection?: InfoSection;
}
interface GetOrCreateInfoSectionRequest {
    /** Info section to retrieve or create. */
    infoSection?: InfoSectionForGetOrCreate;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface InfoSectionForGetOrCreate {
    /**
     * Info section ID.
     * Pass an ID to retrieve an existing info section.
     */
    _id?: string | null;
    /**
     * Info section unique name.
     *
     * > **Note:**
     * > + Pass the `uniqueName` of an existing info section to return it.
     * > + If no such info section exists - pass `uniqueName` and `title` to create an info section.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     *
     * Required when passing `uniqueName` to create a new info section.
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     *
     * Learn more about [Working with Rich Content](https://dev.wix.com/docs/go-headless/tutorials-templates/other-tutorials/working-with-rich-content).
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
}
interface GetOrCreateInfoSectionResponse {
    /** Info section. */
    infoSection?: InfoSection;
}
interface BulkGetOrCreateInfoSectionsRequest {
    /** Info sections to retrieve or create. */
    infoSections?: InfoSectionForGetOrCreate[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateInfoSectionsResponse {
    /** Info sections retrieved or created by bulk action. */
    results?: BulkInfoSectionItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkInfoSectionItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InfoSection;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateInfoSectionRequest {
    /** Info section to update. */
    infoSection: InfoSection;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateInfoSectionResponse {
    /** Updated info section. */
    infoSection?: InfoSection;
}
interface DeleteInfoSectionRequest {
    /** Info section ID */
    infoSectionId: string;
}
interface DeleteInfoSectionResponse {
}
interface QueryInfoSectionsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryInfoSectionsResponse {
    /** List of info sections. */
    infoSections?: InfoSection[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateInfoSectionsRequest {
    /** Info sections to create. */
    infoSections: InfoSection[];
    /**
     * Whether to return the full created info section entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInfoSectionsResponse {
    /** Info sections created by bulk action. */
    results?: BulkInfoSectionItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateInfoSectionsRequest {
    /** List of info sections to update. */
    infoSections: MaskedInfoSection[];
    /**
     * Whether to return the full updated info sections entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface MaskedInfoSection {
    /** Info section to update. */
    infoSection?: InfoSection;
}
interface BulkUpdateInfoSectionsResponse {
    /** Info sections updated by bulk action. */
    results?: BulkInfoSectionItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteInfoSectionsRequest {
    /** IDs of info sections to delete. */
    infoSectionIds: string[];
}
interface BulkDeleteInfoSectionsResponse {
    /** Info sections deleted by bulk action */
    results?: BulkInfoSectionResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkInfoSectionResult {
    /** Bulk action metadata for info section. */
    itemMetadata?: ItemMetadata;
}
interface PluginContainerDataWidthNonNullableFields {
    size: WidthType;
}
interface PluginContainerDataNonNullableFields {
    width?: PluginContainerDataWidthNonNullableFields;
    alignment: PluginContainerDataAlignment;
}
interface LinkNonNullableFields {
    url: string;
    anchor: string;
    target: Target;
}
interface ButtonDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    type: Type;
    link?: LinkNonNullableFields;
}
interface TextStyleNonNullableFields {
    textAlignment: TextAlignment;
}
interface CodeBlockDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface DividerDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    lineStyle: LineStyle;
    width: Width;
    alignment: Alignment;
}
interface PDFSettingsNonNullableFields {
    viewMode: ViewMode;
}
interface FileDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    pdfSettings?: PDFSettingsNonNullableFields;
}
interface ImageNonNullableFields {
    link?: LinkNonNullableFields;
}
interface ItemNonNullableFields {
    image?: ImageNonNullableFields;
}
interface LayoutNonNullableFields {
    type: LayoutType;
    orientation: Orientation;
}
interface ItemStyleNonNullableFields {
    crop: Crop;
}
interface ThumbnailsNonNullableFields {
    placement: ThumbnailsAlignment;
}
interface GalleryOptionsNonNullableFields {
    layout?: LayoutNonNullableFields;
    item?: ItemStyleNonNullableFields;
    thumbnails?: ThumbnailsNonNullableFields;
}
interface GalleryDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    items: ItemNonNullableFields[];
    options?: GalleryOptionsNonNullableFields;
}
interface GIFDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    height: number;
    width: number;
}
interface HeadingDataNonNullableFields {
    level: number;
    textStyle?: TextStyleNonNullableFields;
}
interface HTMLDataNonNullableFields {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields;
    source: Source;
}
interface ImageDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface LinkPreviewDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface MapSettingsNonNullableFields {
    mapType: MapType;
}
interface MapDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    mapSettings?: MapSettingsNonNullableFields;
}
interface ParagraphDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface PermissionsNonNullableFields {
    view: ViewRole;
    vote: VoteRole;
}
interface SettingsNonNullableFields {
    permissions?: PermissionsNonNullableFields;
}
interface PollNonNullableFields {
    settings?: SettingsNonNullableFields;
}
interface PollLayoutNonNullableFields {
    type: PollLayoutType;
    direction: PollLayoutDirection;
}
interface PollDataLayoutNonNullableFields {
    poll?: PollLayoutNonNullableFields;
}
interface BackgroundNonNullableFields {
    type: BackgroundType;
}
interface PollDesignNonNullableFields {
    background?: BackgroundNonNullableFields;
}
interface DesignNonNullableFields {
    poll?: PollDesignNonNullableFields;
}
interface PollDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    poll?: PollNonNullableFields;
    layout?: PollDataLayoutNonNullableFields;
    design?: DesignNonNullableFields;
}
interface AnchorDataNonNullableFields {
    anchor: string;
}
interface LinkDataNonNullableFields {
    link?: LinkNonNullableFields;
}
interface MentionDataNonNullableFields {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields {
    unit: FontType;
}
interface DecorationNonNullableFields {
    anchorData?: AnchorDataNonNullableFields;
    linkData?: LinkDataNonNullableFields;
    mentionData?: MentionDataNonNullableFields;
    fontSizeData?: FontSizeDataNonNullableFields;
    type: DecorationType;
}
interface TextDataNonNullableFields {
    text: string;
    decorations: DecorationNonNullableFields[];
}
interface AppEmbedDataNonNullableFields {
    type: AppType;
}
interface VideoDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface EmbedDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface CollapsibleListDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    initialExpandedItems: InitialExpandedItems;
    direction: Direction;
}
interface DimensionsNonNullableFields {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    dimensions?: DimensionsNonNullableFields;
}
interface CellStyleNonNullableFields {
    verticalAlignment: VerticalAlignment;
}
interface TableCellDataNonNullableFields {
    cellStyle?: CellStyleNonNullableFields;
}
interface AudioDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface OrderedListDataNonNullableFields {
    indentation: number;
}
interface BulletedListDataNonNullableFields {
    indentation: number;
}
interface BlockquoteDataNonNullableFields {
    indentation: number;
}
interface CaptionDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface NodeNonNullableFields {
    buttonData?: ButtonDataNonNullableFields;
    codeBlockData?: CodeBlockDataNonNullableFields;
    dividerData?: DividerDataNonNullableFields;
    fileData?: FileDataNonNullableFields;
    galleryData?: GalleryDataNonNullableFields;
    gifData?: GIFDataNonNullableFields;
    headingData?: HeadingDataNonNullableFields;
    htmlData?: HTMLDataNonNullableFields;
    imageData?: ImageDataNonNullableFields;
    linkPreviewData?: LinkPreviewDataNonNullableFields;
    mapData?: MapDataNonNullableFields;
    paragraphData?: ParagraphDataNonNullableFields;
    pollData?: PollDataNonNullableFields;
    textData?: TextDataNonNullableFields;
    appEmbedData?: AppEmbedDataNonNullableFields;
    videoData?: VideoDataNonNullableFields;
    embedData?: EmbedDataNonNullableFields;
    collapsibleListData?: CollapsibleListDataNonNullableFields;
    tableData?: TableDataNonNullableFields;
    tableCellData?: TableCellDataNonNullableFields;
    audioData?: AudioDataNonNullableFields;
    orderedListData?: OrderedListDataNonNullableFields;
    bulletedListData?: BulletedListDataNonNullableFields;
    blockquoteData?: BlockquoteDataNonNullableFields;
    captionData?: CaptionDataNonNullableFields;
    type: NodeType;
    _id: string;
    nodes: NodeNonNullableFields[];
}
interface MetadataNonNullableFields {
    version: number;
}
interface TextNodeStyleNonNullableFields {
    decorations: DecorationNonNullableFields[];
}
interface DocumentStyleNonNullableFields {
    headerOne?: TextNodeStyleNonNullableFields;
    headerTwo?: TextNodeStyleNonNullableFields;
    headerThree?: TextNodeStyleNonNullableFields;
    headerFour?: TextNodeStyleNonNullableFields;
    headerFive?: TextNodeStyleNonNullableFields;
    headerSix?: TextNodeStyleNonNullableFields;
    paragraph?: TextNodeStyleNonNullableFields;
    blockquote?: TextNodeStyleNonNullableFields;
    codeBlock?: TextNodeStyleNonNullableFields;
}
interface RichContentNonNullableFields {
    nodes: NodeNonNullableFields[];
    metadata?: MetadataNonNullableFields;
    documentStyle?: DocumentStyleNonNullableFields;
}
interface InfoSectionNonNullableFields {
    uniqueName: string;
    title: string;
    description?: RichContentNonNullableFields;
}
interface CreateInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields;
}
interface GetInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields;
}
interface GetOrCreateInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkInfoSectionItemResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: InfoSectionNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkGetOrCreateInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface UpdateInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields;
}
interface QueryInfoSectionsResponseNonNullableFields {
    infoSections: InfoSectionNonNullableFields[];
}
interface BulkCreateInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkInfoSectionResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkDeleteInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createInfoSection(): __PublicMethodMetaInfo<'POST', {}, CreateInfoSectionRequest, CreateInfoSectionRequest$1, CreateInfoSectionResponse & CreateInfoSectionResponseNonNullableFields, CreateInfoSectionResponse$1 & CreateInfoSectionResponseNonNullableFields$1>;
declare function getInfoSection(): __PublicMethodMetaInfo<'GET', {
    infoSectionId: string;
}, GetInfoSectionRequest, GetInfoSectionRequest$1, GetInfoSectionResponse & GetInfoSectionResponseNonNullableFields, GetInfoSectionResponse$1 & GetInfoSectionResponseNonNullableFields$1>;
declare function getOrCreateInfoSection(): __PublicMethodMetaInfo<'POST', {}, GetOrCreateInfoSectionRequest, GetOrCreateInfoSectionRequest$1, GetOrCreateInfoSectionResponse & GetOrCreateInfoSectionResponseNonNullableFields, GetOrCreateInfoSectionResponse$1 & GetOrCreateInfoSectionResponseNonNullableFields$1>;
declare function bulkGetOrCreateInfoSections(): __PublicMethodMetaInfo<'POST', {}, BulkGetOrCreateInfoSectionsRequest, BulkGetOrCreateInfoSectionsRequest$1, BulkGetOrCreateInfoSectionsResponse & BulkGetOrCreateInfoSectionsResponseNonNullableFields, BulkGetOrCreateInfoSectionsResponse$1 & BulkGetOrCreateInfoSectionsResponseNonNullableFields$1>;
declare function updateInfoSection(): __PublicMethodMetaInfo<'PATCH', {
    infoSectionId: string;
}, UpdateInfoSectionRequest, UpdateInfoSectionRequest$1, UpdateInfoSectionResponse & UpdateInfoSectionResponseNonNullableFields, UpdateInfoSectionResponse$1 & UpdateInfoSectionResponseNonNullableFields$1>;
declare function deleteInfoSection(): __PublicMethodMetaInfo<'DELETE', {
    infoSectionId: string;
}, DeleteInfoSectionRequest, DeleteInfoSectionRequest$1, DeleteInfoSectionResponse, DeleteInfoSectionResponse$1>;
declare function queryInfoSections(): __PublicMethodMetaInfo<'POST', {}, QueryInfoSectionsRequest, QueryInfoSectionsRequest$1, QueryInfoSectionsResponse & QueryInfoSectionsResponseNonNullableFields, QueryInfoSectionsResponse$1 & QueryInfoSectionsResponseNonNullableFields$1>;
declare function bulkCreateInfoSections(): __PublicMethodMetaInfo<'POST', {}, BulkCreateInfoSectionsRequest, BulkCreateInfoSectionsRequest$1, BulkCreateInfoSectionsResponse & BulkCreateInfoSectionsResponseNonNullableFields, BulkCreateInfoSectionsResponse$1 & BulkCreateInfoSectionsResponseNonNullableFields$1>;
declare function bulkUpdateInfoSections(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateInfoSectionsRequest, BulkUpdateInfoSectionsRequest$1, BulkUpdateInfoSectionsResponse & BulkUpdateInfoSectionsResponseNonNullableFields, BulkUpdateInfoSectionsResponse$1 & BulkUpdateInfoSectionsResponseNonNullableFields$1>;
declare function bulkDeleteInfoSections(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteInfoSectionsRequest, BulkDeleteInfoSectionsRequest$1, BulkDeleteInfoSectionsResponse & BulkDeleteInfoSectionsResponseNonNullableFields, BulkDeleteInfoSectionsResponse$1 & BulkDeleteInfoSectionsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, bulkCreateInfoSections, bulkDeleteInfoSections, bulkGetOrCreateInfoSections, bulkUpdateInfoSections, createInfoSection, deleteInfoSection, getInfoSection, getOrCreateInfoSection, queryInfoSections, updateInfoSection };
