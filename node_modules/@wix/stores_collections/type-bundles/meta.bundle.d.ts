interface Collection$1 {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media$1;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface Media$1 {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem$1;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem$1[];
}
interface MediaItem$1 extends MediaItemItemOneOf$1 {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize$1;
    /** Video data (URL, size). */
    video?: MediaItemVideo$1;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize$1;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType$1;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    id?: string;
}
/** @oneof */
interface MediaItemItemOneOf$1 {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize$1;
    /** Video data (URL, size). */
    video?: MediaItemVideo$1;
}
interface MediaItemUrlAndSize$1 {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType$1 {
    unspecified_media_item_type = "unspecified_media_item_type",
    image = "image",
    video = "video",
    audio = "audio",
    document = "document",
    zip = "zip"
}
interface MediaItemVideo$1 {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize$1[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface QueryCollectionsRequest$1 {
    query?: PlatformQuery$1;
}
interface PlatformQuery$1 extends PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$1[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCollectionsResponse$1 {
    collections?: Collection$1[];
    metadata?: PlatformPagingMetadata$1;
}
interface PlatformPagingMetadata$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetCollectionRequest$1 {
    /** Requested collection ID. */
    id: string;
}
interface GetCollectionResponse$1 {
    collection?: Collection$1;
}
interface GetCollectionBySlugRequest$1 {
    /** Slug of the collection to retrieve. */
    slug: string;
}
interface GetCollectionBySlugResponse$1 {
    /** The requested collection. */
    collection?: Collection$1;
}
interface MediaItemUrlAndSizeNonNullableFields$1 {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields$1 {
    files: MediaItemUrlAndSizeNonNullableFields$1[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields$1 {
    image?: MediaItemUrlAndSizeNonNullableFields$1;
    video?: MediaItemVideoNonNullableFields$1;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields$1;
    mediaType: MediaItemType$1;
    title: string;
    id: string;
}
interface MediaNonNullableFields$1 {
    mainMedia?: MediaItemNonNullableFields$1;
    items: MediaItemNonNullableFields$1[];
}
interface TagNonNullableFields$1 {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields$1 {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields$1 {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields$1[];
}
interface SeoSchemaNonNullableFields$1 {
    tags: TagNonNullableFields$1[];
    settings?: SettingsNonNullableFields$1;
}
interface CollectionNonNullableFields$1 {
    media?: MediaNonNullableFields$1;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields$1;
}
interface QueryCollectionsResponseNonNullableFields$1 {
    collections: CollectionNonNullableFields$1[];
}
interface GetCollectionResponseNonNullableFields$1 {
    collection?: CollectionNonNullableFields$1;
}
interface GetCollectionBySlugResponseNonNullableFields$1 {
    collection?: CollectionNonNullableFields$1;
}

interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface Media {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    _id?: string;
}
/** @oneof */
interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
interface MediaItemUrlAndSize {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    image = "image",
    video = "video",
    audio = "audio",
    document = "document",
    zip = "zip"
}
interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface QueryCollectionsRequest {
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCollectionsResponse {
    collections?: Collection[];
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetCollectionRequest {
    /** Requested collection ID. */
    _id: string;
}
interface GetCollectionResponse {
    collection?: Collection;
}
interface GetCollectionBySlugRequest {
    /** Slug of the collection to retrieve. */
    slug: string;
}
interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}
interface MediaItemUrlAndSizeNonNullableFields {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields {
    files: MediaItemUrlAndSizeNonNullableFields[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields {
    image?: MediaItemUrlAndSizeNonNullableFields;
    video?: MediaItemVideoNonNullableFields;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields;
    mediaType: MediaItemType;
    title: string;
    _id: string;
}
interface MediaNonNullableFields {
    mainMedia?: MediaItemNonNullableFields;
    items: MediaItemNonNullableFields[];
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface CollectionNonNullableFields {
    media?: MediaNonNullableFields;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields;
}
interface QueryCollectionsResponseNonNullableFields {
    collections: CollectionNonNullableFields[];
}
interface GetCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface GetCollectionBySlugResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function queryCollections(): __PublicMethodMetaInfo<'GET', {}, QueryCollectionsRequest, QueryCollectionsRequest$1, QueryCollectionsResponse & QueryCollectionsResponseNonNullableFields, QueryCollectionsResponse$1 & QueryCollectionsResponseNonNullableFields$1>;
declare function getCollection(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCollectionRequest, GetCollectionRequest$1, GetCollectionResponse & GetCollectionResponseNonNullableFields, GetCollectionResponse$1 & GetCollectionResponseNonNullableFields$1>;
declare function getCollectionBySlug(): __PublicMethodMetaInfo<'GET', {
    slug: string;
}, GetCollectionBySlugRequest, GetCollectionBySlugRequest$1, GetCollectionBySlugResponse & GetCollectionBySlugResponseNonNullableFields, GetCollectionBySlugResponse$1 & GetCollectionBySlugResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, getCollection, getCollectionBySlug, queryCollections };
