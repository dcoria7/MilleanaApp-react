interface V3Product$1 extends V3ProductTypedPropertiesOneOf$1 {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Product ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Product name. Translatable. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: PageUrlV2;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent$1;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media$1;
    /** Product SEO data. */
    seoData?: SeoSchema$1;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     */
    options?: ConnectedOption$1[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     */
    modifiers?: ConnectedModifier$1[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand$1;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection$1[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon$1;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo$1;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo$1;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product base price range - minimum and maximum prices of all product variants.
     * @readonly
     */
    basePriceRange?: PriceRange$1;
    /**
     * Product sale price range - minimum and maximum sale prices of all product variants.
     * @readonly
     */
    salePriceRange?: PriceRange$1;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange$1;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory$1;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType$1;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo$1;
    /** Product variants. */
    variantsInfo?: VariantsInfo$1;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails$1;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary$1;
}
/** @oneof */
interface V3ProductTypedPropertiesOneOf$1 {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties$1;
}
interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
interface RichContent$1 {
    /** Node objects representing a rich content document. */
    nodes?: Node$1[];
    /** Object metadata. */
    metadata?: Metadata$1;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle$1;
}
interface Node$1 extends NodeDataOneOf$1 {
    /** Data for a button node. */
    buttonData?: ButtonData$1;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData$1;
    /** Data for a divider node. */
    dividerData?: DividerData$1;
    /** Data for a file node. */
    fileData?: FileData$1;
    /** Data for a gallery node. */
    galleryData?: GalleryData$1;
    /** Data for a GIF node. */
    gifData?: GIFData$1;
    /** Data for a heading node. */
    headingData?: HeadingData$1;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData$1;
    /** Data for an image node. */
    imageData?: ImageData$1;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData$1;
    /** Data for a map node. */
    mapData?: MapData$1;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData$1;
    /** Data for a poll node. */
    pollData?: PollData$1;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData$1;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData$1;
    /** Data for a video node. */
    videoData?: VideoData$1;
    /** Data for an oEmbed node. */
    embedData?: EmbedData$1;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData$1;
    /** Data for a table node. */
    tableData?: TableData$1;
    /** Data for a table cell node. */
    tableCellData?: TableCellData$1;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData$1;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData$1;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData$1;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData$1;
    /** Data for a caption node. */
    captionData?: CaptionData$1;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType$1;
    /** Node ID. */
    id?: string;
    /** A list of child nodes. */
    nodes?: Node$1[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle$1;
}
/** @oneof */
interface NodeDataOneOf$1 {
    /** Data for a button node. */
    buttonData?: ButtonData$1;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData$1;
    /** Data for a divider node. */
    dividerData?: DividerData$1;
    /** Data for a file node. */
    fileData?: FileData$1;
    /** Data for a gallery node. */
    galleryData?: GalleryData$1;
    /** Data for a GIF node. */
    gifData?: GIFData$1;
    /** Data for a heading node. */
    headingData?: HeadingData$1;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData$1;
    /** Data for an image node. */
    imageData?: ImageData$1;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData$1;
    /** Data for a map node. */
    mapData?: MapData$1;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData$1;
    /** Data for a poll node. */
    pollData?: PollData$1;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData$1;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData$1;
    /** Data for a video node. */
    videoData?: VideoData$1;
    /** Data for an oEmbed node. */
    embedData?: EmbedData$1;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData$1;
    /** Data for a table node. */
    tableData?: TableData$1;
    /** Data for a table cell node. */
    tableCellData?: TableCellData$1;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData$1;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData$1;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData$1;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData$1;
    /** Data for a caption node. */
    captionData?: CaptionData$1;
}
declare enum NodeType$1 {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION"
}
interface NodeStyle$1 {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData$1 {
    /** Styling for the button's container. */
    containerData?: PluginContainerData$1;
    /** The button type. */
    type?: Type$1;
    /** Styling for the button. */
    styles?: Styles$1;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link$1;
}
interface Border$1 {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface Colors$1 {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
interface PluginContainerData$1 {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth$1;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment$1;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler$1;
    /** The height of the node when it's displayed. */
    height?: Height$1;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType$1 {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
interface PluginContainerDataWidth$1 extends PluginContainerDataWidthDataOneOf$1 {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType$1;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf$1 {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType$1;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment$1 {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
interface Spoiler$1 {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height$1 {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type$1 {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
interface Styles$1 {
    /** Border attributes. */
    border?: Border$1;
    /** Color attributes. */
    colors?: Colors$1;
}
interface Link$1 extends LinkDataOneOf$1 {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target$1;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel$1;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf$1 {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target$1 {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
interface Rel$1 {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData$1 {
    /** Styling for the code block's text. */
    textStyle?: TextStyle$1;
}
interface TextStyle$1 {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment$1;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment$1 {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
interface DividerData$1 {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData$1;
    /** Divider line style. */
    lineStyle?: LineStyle$1;
    /** Divider width. */
    width?: Width$1;
    /** Divider alignment. */
    alignment?: Alignment$1;
}
declare enum LineStyle$1 {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
declare enum Width$1 {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
declare enum Alignment$1 {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
interface FileData$1 {
    /** Styling for the file's container. */
    containerData?: PluginContainerData$1;
    /** The source for the file's data. */
    src?: FileSource$1;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings$1;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode$1 {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
interface FileSource$1 extends FileSourceDataOneOf$1 {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf$1 {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
}
interface PDFSettings$1 {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode$1;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData$1 {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData$1;
    /** The items in the gallery. */
    items?: Item$1[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions$1;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface V1Media$1 {
    /** The source for the media's data. */
    src?: FileSource$1;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface ItemImage {
    /** Image file details. */
    media?: V1Media$1;
    /** Link details for images that are links. */
    link?: Link$1;
}
interface Video$1 {
    /** Video file details. */
    media?: V1Media$1;
    /** Video thumbnail file details. */
    thumbnail?: V1Media$1;
}
interface Item$1 extends ItemDataOneOf$1 {
    /** An image item. */
    image?: ItemImage;
    /** A video item. */
    video?: Video$1;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf$1 {
    /** An image item. */
    image?: ItemImage;
    /** A video item. */
    video?: Video$1;
}
interface GalleryOptions$1 {
    /** Gallery layout. */
    layout?: Layout$1;
    /** Styling for gallery items. */
    item?: ItemStyle$1;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails$1;
}
declare enum LayoutType$1 {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
declare enum Orientation$1 {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
declare enum Crop$1 {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
declare enum ThumbnailsAlignment$1 {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
interface Layout$1 {
    /** Gallery layout type. */
    type?: LayoutType$1;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation$1;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle$1 {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop$1;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails$1 {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment$1;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData$1 {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData$1;
    /** The source of the full size GIF. */
    original?: GIF$1;
    /** The source of the downsized GIF. */
    downsized?: GIF$1;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
}
interface GIF$1 {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
interface HeadingData$1 {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle$1;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData$1 extends HTMLDataDataOneOf$1 {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. */
    containerData?: PluginContainerData$1;
    /** The type of HTML code. */
    source?: Source$1;
}
/** @oneof */
interface HTMLDataDataOneOf$1 {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source$1 {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
interface ImageData$1 {
    /** Styling for the image's container. */
    containerData?: PluginContainerData$1;
    /** Image file details. */
    image?: V1Media$1;
    /** Link details for images that are links. */
    link?: Link$1;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface LinkPreviewData$1 {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData$1;
    /** Link details. */
    link?: Link$1;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
interface MapData$1 {
    /** Styling for the map's container. */
    containerData?: PluginContainerData$1;
    /** Map settings. */
    mapSettings?: MapSettings$1;
}
interface MapSettings$1 {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType$1;
}
declare enum MapType$1 {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
interface ParagraphData$1 {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle$1;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData$1 {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData$1;
    /** Poll data. */
    poll?: Poll$1;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout$1;
    /** Styling for the poll and voting options. */
    design?: Design$1;
}
declare enum ViewRole$1 {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
declare enum VoteRole$1 {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
interface Permissions$1 {
    /** Sets who can view the poll results. */
    view?: ViewRole$1;
    /** Sets who can vote. */
    vote?: VoteRole$1;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option$1 {
    /** Option ID. */
    id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media$1;
}
interface PollSettings$1 {
    /** Permissions settings for voting. */
    permissions?: Permissions$1;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType$1 {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
declare enum PollLayoutDirection$1 {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface PollLayout$1 {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType$1;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection$1;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout$1 {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType$1 {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
interface Gradient$1 {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
interface Background$1 extends BackgroundBackgroundOneOf$1 {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media$1;
    /** Details for a gradient background. */
    gradient?: Gradient$1;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType$1;
}
/** @oneof */
interface BackgroundBackgroundOneOf$1 {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media$1;
    /** Details for a gradient background. */
    gradient?: Gradient$1;
}
interface PollDesign$1 {
    /** Background styling. */
    background?: Background$1;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign$1 {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll$1 {
    /** Poll ID. */
    id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media$1;
    /** Voting options. */
    options?: Option$1[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings$1;
}
interface PollDataLayout$1 {
    /** Poll layout settings. */
    poll?: PollLayout$1;
    /** Voting otpions layout settings. */
    options?: OptionLayout$1;
}
interface Design$1 {
    /** Styling for the poll. */
    poll?: PollDesign$1;
    /** Styling for voting options. */
    options?: OptionDesign$1;
}
interface TextData$1 {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration$1[];
}
/** Adds appearence changes to text */
interface Decoration$1 extends DecorationDataOneOf$1 {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData$1;
    /** Data for a color decoration. */
    colorData?: ColorData$1;
    /** Data for an external link decoration. */
    linkData?: LinkData$1;
    /** Data for a mention decoration. */
    mentionData?: MentionData$1;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData$1;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData$1;
    /** The type of decoration to apply. */
    type?: DecorationType$1;
}
/** @oneof */
interface DecorationDataOneOf$1 {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData$1;
    /** Data for a color decoration. */
    colorData?: ColorData$1;
    /** Data for an external link decoration. */
    linkData?: LinkData$1;
    /** Data for a mention decoration. */
    mentionData?: MentionData$1;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData$1;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData$1;
}
declare enum DecorationType$1 {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
interface AnchorData$1 {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData$1 {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData$1 {
    /** Link details. */
    link?: Link$1;
}
interface MentionData$1 {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    id?: string | null;
}
interface FontSizeData$1 {
    /** The units used for the font size. */
    unit?: FontType$1;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType$1 {
    PX = "PX",
    EM = "EM"
}
interface SpoilerData$1 {
    /** Spoiler ID. */
    id?: string | null;
}
interface AppEmbedData$1 extends AppEmbedDataAppDataOneOf$1 {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData$1;
    /** Data for embedded Wix Events content. */
    eventData?: EventData$1;
    /** The type of Wix App content being embedded. */
    type?: AppType$1;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media$1;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf$1 {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData$1;
    /** Data for embedded Wix Events content. */
    eventData?: EventData$1;
}
declare enum AppType$1 {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
interface BookingData$1 {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData$1 {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData$1 {
    /** Styling for the video's container. */
    containerData?: PluginContainerData$1;
    /** Video details. */
    video?: V1Media$1;
    /** Video thumbnail details. */
    thumbnail?: V1Media$1;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions$1;
}
interface PlaybackOptions$1 {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData$1 {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData$1;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed$1;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed$1 {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData$1 {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData$1;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems$1;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction$1;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems$1 {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
declare enum Direction$1 {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface TableData$1 {
    /** Styling for the table's container. */
    containerData?: PluginContainerData$1;
    /** The table's dimensions. */
    dimensions?: Dimensions$1;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions$1 {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData$1 {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle$1;
    /** The cell's border colors. */
    borderColors?: BorderColors$1;
}
declare enum VerticalAlignment$1 {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
interface CellStyle$1 {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment$1;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface BorderColors$1 {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
interface AudioData$1 {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData$1;
    /** Audio file details. */
    audio?: V1Media$1;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media$1;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData$1 {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData$1 {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData$1 {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData$1 {
    textStyle?: TextStyle$1;
}
interface Metadata$1 {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    id?: string | null;
}
interface DocumentStyle$1 {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle$1;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle$1;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle$1;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle$1;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle$1;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle$1;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle$1;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle$1;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle$1;
}
interface TextNodeStyle$1 {
    /** The decorations to apply to the node. */
    decorations?: Decoration$1[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle$1;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface Media$1 {
    /**
     * Main media (image, video, etc.) associated with this product.
     * @readonly
     */
    main?: ProductMedia$1;
    /**
     * All media items.
     * > **Note:** Returned only when you pass `"MEDIA_ITEMS_INFO"` to the `fields` array in Products API requests.
     */
    itemsInfo?: MediaItemsInfo$1;
}
interface ProductMedia$1 extends ProductMediaSetByOneOf$1, ProductMediaMediaOneOf$1 {
    /** ID of existing media from Wix Media Manager. */
    id?: string;
    /** Media URL. */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: Image$1;
    /**
     * Product video.
     * @readonly
     */
    video?: VideoV2;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: MediaType$1;
    /**
     * Media thumbnail.
     * > **Note:** Returned only when you pass `"THUMBNAIL"` to the `fields` array in Products API requests.
     */
    thumbnail?: Thumbnail$1;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     */
    uploadId?: string;
}
/** @oneof */
interface ProductMediaSetByOneOf$1 {
    /** ID of existing media from Wix Media Manager. */
    id?: string;
    /** Media URL. */
    url?: string;
}
/** @oneof */
interface ProductMediaMediaOneOf$1 {
    /**
     * Product image.
     * @readonly
     */
    image?: Image$1;
    /**
     * Product video.
     * @readonly
     */
    video?: VideoV2;
}
interface Image$1 {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface VideoV2 {
    /** WixMedia ID. */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     */
    resolutions?: VideoResolution[];
    /**
     * Video filename.
     * @readonly
     */
    filename?: string | null;
}
interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
declare enum MediaType$1 {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    IMAGE = "IMAGE",
    VIDEO = "VIDEO"
}
interface Thumbnail$1 {
    /** Thumbnail url. */
    url?: string;
    /** Thumbnail height. */
    height?: number;
    /** Thumbnail width. */
    width?: number;
    /** Thumbnail alt text. */
    altText?: string | null;
}
interface MediaItemsInfo$1 {
    /** All media items (images, videos etc) associated with this product. */
    items?: ProductMedia$1[];
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema$1 {
    /** SEO tag information. */
    tags?: Tag$1[];
    /** SEO general settings. */
    settings?: Settings$1;
}
interface Keyword$1 {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag$1 {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings$1 {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword$1[];
}
interface ConnectedOption$1 extends ConnectedOptionOptionSettingsOneOf$1 {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings$1;
    /** ID of a customization with `customizationType: PRODUCT_OPTION`. */
    id?: string | null;
    /** Option name. */
    name?: string | null;
    /** Option render type. */
    optionRenderType?: ProductOptionRenderType$1;
}
/** @oneof */
interface ConnectedOptionOptionSettingsOneOf$1 {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings$1;
}
declare enum ProductOptionRenderType$1 {
    UNKNOWN_OPTION_RENDER_TYPE = "UNKNOWN_OPTION_RENDER_TYPE",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface ChoicesSettings$1 {
    /** List of available choices for the option. */
    choices?: ConnectedOptionChoice$1[];
}
interface ConnectedOptionChoice$1 extends ConnectedOptionChoiceValueOneOf$1 {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** The id of the choice. */
    choiceId?: string | null;
    /**
     * Product media overrides. When not empty only these images will be shown when such choices selected by customer. Otherwise all images of product.
     * When several choices from different options selected only media filter present in `media_overrides` of ALL choices will be shown.
     * For example if Color:red has images 1,2,3 and Material:Silk has images 2,3,5 then only images 2,3 will be shown when both of them selected.
     */
    linkedMedia?: ProductMedia$1[];
    /** The type of this choice. */
    choiceType?: ChoiceType$1;
    /** Choice name. */
    name?: string | null;
    /**
     * A flag that indicates if at least one variant with this choice is in stock in the default store's location.
     * For example, a product with 'Color' and 'Size' options with variants: [Blue, Small] which is out of stock and [Red Large] which is in stock. For choice 'Blue' ths flag will be 'false' and for 'Red' the flag will be true
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether at least one variant with this choice is visible.
     *
     * Default: `false`
     * @readonly
     */
    visible?: boolean;
}
/** @oneof */
interface ConnectedOptionChoiceValueOneOf$1 {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
declare enum ChoiceType$1 {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    CHOICE_TEXT = "CHOICE_TEXT",
    ONE_COLOR = "ONE_COLOR",
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    IMAGE = "IMAGE"
}
interface ConnectedModifier$1 extends ConnectedModifierModifierSettingsOneOf$1 {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings$1;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings$1;
    /** ID of a customization with `customizationType: MODIFIER`. */
    id?: string | null;
    /** Modifier title. */
    name?: string | null;
    /** Modifier render type. */
    modifierRenderType?: ModifierRenderType$1;
    /** Whether customer input is required for this modifier. */
    mandatory?: boolean;
}
/** @oneof */
interface ConnectedModifierModifierSettingsOneOf$1 {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings$1;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings$1;
}
declare enum ModifierRenderType$1 {
    UNKNOWN_MODIFIER_RENDER_TYPE = "UNKNOWN_MODIFIER_RENDER_TYPE",
    FREE_TEXT = "FREE_TEXT",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface FreeTextSettings$1 {
    /** Minimum number of characters. */
    minCharCount?: number;
    /** Maximum number of characters. */
    maxCharCount?: number;
    /** Default amount to be added to the product's price. */
    defaultAddedPrice?: string | null;
    /** Title of the text to be input by the customer. */
    title?: string;
}
interface ModifierChoicesSettings$1 {
    /** List of modifier choices. */
    choices?: ConnectedModifierChoice$1[];
}
interface ConnectedModifierChoice$1 extends ConnectedModifierChoiceValueOneOf$1 {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** Choice ID. */
    choiceId?: string | null;
    /** Product media. */
    linkedMedia?: ProductMedia$1[];
    /** Choice type. */
    choiceType?: ChoiceType$1;
    /**
     * Modifier key. Used for eCommerce integration.
     * @readonly
     */
    key?: string;
    /** Choice name. */
    name?: string | null;
    /** Added price. */
    addedPrice?: string | null;
}
/** @oneof */
interface ConnectedModifierChoiceValueOneOf$1 {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
interface Brand$1 {
    /** Brand ID. */
    id?: string | null;
    /** Brand name. */
    name?: string | null;
}
interface InfoSection$1 {
    /** Info section ID. */
    id?: string | null;
    /**
     * Info section unique name.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @readonly
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     * > **Note:** Returned only when you pass `"INFO_SECTION_DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    description?: RichContent$1;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"INFO_SECTION_PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
}
interface Ribbon$1 {
    /** Ribbon ID. */
    id?: string | null;
    /** Ribbon name. */
    name?: string | null;
}
interface ProductCategoriesInfo$1 {
    /**
     * A list of categories related to product.
     * @readonly
     */
    categories?: ProductCategory$1[];
}
interface ProductCategory$1 {
    /** Category ID. */
    id?: string;
    /** Index location of the product within the category, which can be utilized for sorting products in a specific category. For detailed instructions on how to set this up, refer to the [Add and arrange products in category](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/sample-use-cases-and-flows#add-and-arrange-products-in-category) sample flow. */
    index?: number | null;
}
interface PriceRange$1 {
    /** Minimum value. */
    minValue?: FixedMonetaryAmount$1;
    /** Maximum value. */
    maxValue?: FixedMonetaryAmount$1;
}
interface FixedMonetaryAmount$1 {
    /** Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount. */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    formattedAmount?: string | null;
}
interface Inventory$1 {
    /**
     * Current availability status.
     *
     * + `IN_STOCK`: All variants are in stock and available for purchase
     * + `OUT_OF_STOCK`: All variants are out of stock
     * + `PARTIALLY_OUT_OF_STOCK`: Some variants are out of stock and some are in stock and available for purchase
     * @readonly
     */
    availabilityStatus?: InventoryAvailabilityStatus$1;
    /**
     * Current preorder status/
     *
     * + `ENABLED`: All variants are enabled for preorder
     * + `DISABLED`: All variants are disabled for preorder
     * + `PARTIALLY_ENABLED`: Some variants are disabled and some are enabled for preorder
     * @readonly
     */
    preorderStatus?: PreorderStatus$1;
    /**
     * Supported values:
     * + `ALL_VARIANTS`: All the product variants are available for preorder.
     * + `NO_VARIANTS`: None of the product variants are available for preorder.
     * + `SOME_VARIANTS`: Some of the product variants are available for preorder.
     * @readonly
     */
    preorderAvailability?: ProductPreorderAvailability$1;
}
declare enum InventoryAvailabilityStatus$1 {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
declare enum PreorderStatus$1 {
    UNKNOWN_PREORDER_STATUS = "UNKNOWN_PREORDER_STATUS",
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    PARTIALLY_ENABLED = "PARTIALLY_ENABLED"
}
declare enum ProductPreorderAvailability$1 {
    UNKNOWN_PREORDER_AVAILABILITY_STATUS = "UNKNOWN_PREORDER_AVAILABILITY_STATUS",
    ALL_VARIANTS = "ALL_VARIANTS",
    NO_VARIANTS = "NO_VARIANTS",
    SOME_VARIANTS = "SOME_VARIANTS"
}
declare enum ProductType$1 {
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL"
}
interface PhysicalProperties$1 {
    /** Price per unit settings. */
    pricePerUnit?: PricePerUnitSettings$1;
    /** Fulfiller ID. */
    fulfillerId?: string | null;
    /**
     * Product shipping weight range - minimum and maximum weights of all the variants.
     * @readonly
     */
    shippingWeightRange?: WeightRange$1;
    /**
     * Product price per unit range. The minimum and maximum price per unit of all the variants.
     * @readonly
     */
    pricePerUnitRange?: PricePerUnitRange$1;
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfo$1;
}
interface PricePerUnitSettings$1 {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     */
    measurementUnit?: MeasurementUnit$1;
}
declare enum MeasurementUnit$1 {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
interface WeightRange$1 {
    /** Minimum weight across all variants associated with this product. */
    minValue?: number;
    /** Maximum weight across all variants associated with this product. */
    maxValue?: number;
}
interface PricePerUnitRange$1 {
    /** Minimum price per unit across all variants. */
    minValue?: PricePerUnitRangePricePerUnit$1;
    /** Maximum price per unit across all variants. */
    maxValue?: PricePerUnitRangePricePerUnit$1;
}
interface PricePerUnitRangePricePerUnit$1 {
    /**
     * Calculated value of price per unit. Takes into account pricePerUnit settings of product and variants and sale price of variants.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit info in the format of variant specific data / product setting, for example €4.00 / 1 Kg.
     * > **Note:** This field is returned by the API only when you pass `fields: "CURRENCY"` in a request.
     * @readonly
     */
    description?: string | null;
}
interface WeightMeasurementUnitInfo$1 {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnit$1;
}
declare enum WeightUnit$1 {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface BreadcrumbsInfo$1 {
    /**
     * Breadcrumbs.
     * @readonly
     */
    breadcrumbs?: BreadCrumb$1[];
}
interface BreadCrumb$1 {
    /** Category ID. */
    categoryId?: string;
    /** Category name. */
    categoryName?: string;
    /** Category slug. */
    categorySlug?: string;
}
interface VariantsInfo$1 {
    /** List of related variants. */
    variants?: Variant$1[];
}
interface Variant$1 extends VariantTypedPropertiesOneOf$1 {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties$1;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties$1;
    /** Variant ID. */
    id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /**
     * List of choices.
     * In case this list is empty, this is the default variant of an unmanaged product.
     */
    choices?: OptionChoice$1[];
    /** Variant price. */
    price?: PriceInfo$1;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails$1;
    /**
     * Variant media.
     * @readonly
     */
    media?: ProductMedia$1;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.salePrice`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: SubscriptionPricesInfo$1;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: InventoryStatus$1;
}
/** @oneof */
interface VariantTypedPropertiesOneOf$1 {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties$1;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties$1;
}
interface OptionChoice$1 {
    /** Option and choice IDs. */
    optionChoiceIds?: OptionChoiceIds$1;
    /**
     * Option and choice names.
     * > **Note:** Returned only when you pass `"VARIANT_OPTION_CHOICE_NAMES"` to the `fields` array in Products API requests.
     */
    optionChoiceNames?: OptionChoiceNames$1;
}
interface OptionChoiceIds$1 {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
interface OptionChoiceNames$1 {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType$1;
}
interface PriceInfo$1 {
    /** Variant price. Must be greater or equal to 0. */
    basePrice?: FixedMonetaryAmount$1;
    /** Variant sale price. If not provided, sale price will be equal to `basePrice`. When provided, value must be greater or equal to 0, and less than or equal to `basePrice`. */
    salePrice?: FixedMonetaryAmount$1;
}
interface RevenueDetails$1 {
    /** Item cost. */
    cost?: FixedMonetaryAmount$1;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: FixedMonetaryAmount$1;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
interface VariantPhysicalProperties$1 {
    /** Variant shipping weight. */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     */
    pricePerUnit?: PricePerUnit$1;
}
interface PricePerUnit$1 {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     */
    settings?: PricePerUnitSettings$1;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
interface VariantDigitalProperties$1 {
    /** Digital file which will be downloaded by customer after successful purchase. */
    digitalFile?: SecuredMedia$1;
}
interface SecuredMedia$1 {
    /** Media ID in media manager. */
    id?: string;
    /**
     * Original file name.
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @readonly
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: FileType$1;
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface SubscriptionPricesInfo$1 {
    /** Subscription prices. */
    subscriptionPrices?: SubscriptionPrice$1[];
}
interface SubscriptionPrice$1 {
    /**
     * Subscription ID.
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.salePrice`
     * @readonly
     */
    price?: FixedMonetaryAmount$1;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: SubscriptionPricePerUnit$1;
}
interface SubscriptionPricePerUnit$1 {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
interface InventoryStatus$1 {
    /** Whether the variant is in stock. */
    inStock?: boolean;
    /** Whether preorder is enabled for this variant. */
    preorderEnabled?: boolean;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface SubscriptionDetails$1 {
    /** Subscriptions. */
    subscriptions?: Subscription$1[];
    /**
     * Whether to allow one-time purchases in addition to subscription-based purchases.
     *
     * Default: `false`
     */
    allowOneTimePurchases?: boolean | null;
}
interface Subscription$1 extends SubscriptionCyclesOneOf$1 {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
    /** Subscription ID. */
    id?: string | null;
    /** Subscription title. */
    title?: string;
    /** Subscription description. */
    description?: string | null;
    /**
     * Whether the subscription is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Frequency of recurring payment.
     * For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     */
    frequency?: SubscriptionFrequency$1;
    /** Interval of recurring payment. Default: `1`. For example, if `frequency: MONTH`, `billingCycles: 3` and `interval: 2`; payment will be made every 2 months for a total of 6 months. */
    interval?: number | null;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `amount: 20`, `type: AMOUNT`.
     */
    discount?: SubscriptionDiscount$1;
}
/** @oneof */
interface SubscriptionCyclesOneOf$1 {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface SubscriptionDiscount$1 extends SubscriptionDiscountDiscountOneOf$1 {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
    /** Discount type. */
    type?: DiscountType$1;
}
/** @oneof */
interface SubscriptionDiscountDiscountOneOf$1 {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
}
declare enum DiscountType$1 {
    UNKNOWN_DISCOUNT = "UNKNOWN_DISCOUNT",
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface VariantSummary$1 {
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantCount?: number;
}
interface CreateProductRequest$1 {
    /**
     * Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: V3Product$1;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
declare enum SingleEntityOpsRequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANTS_INFO = "VARIANTS_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    MIN_VARIANT_PRICE_INFO = "MIN_VARIANT_PRICE_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL",
    DIRECT_CATEGORY_IDS = "DIRECT_CATEGORY_IDS"
}
interface CreateProductResponse$1 {
    /** Created product. */
    product?: V3Product$1;
}
interface CreateProductWithInventoryRequest$1 {
    /**
     * Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: ProductWithInventory$1;
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
interface ProductWithInventory$1 extends ProductWithInventoryTypedPropertiesOneOf$1 {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties$1;
    /**
     * Product ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /** Product name. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media$1;
    /** Product SEO data. */
    seoData?: SeoSchema$1;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     */
    options?: ConnectedOption$1[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     */
    modifiers?: ConnectedModifier$1[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand$1;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection$1[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon$1;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType$1;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo$1;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails$1;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the Wix Dev Center before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
/** @oneof */
interface ProductWithInventoryTypedPropertiesOneOf$1 {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties$1;
}
interface V3VariantsInfo$1 {
    /**
     * List of related variants.
     * Partial update of variants is not supported so on update you must pass all data for all of them.
     * If you want to update existing variant you must provide `id`, otherwise new variant with different id will be created which might break some integrations that rely on variant ids.
     */
    variants?: VariantWithInventory$1[];
}
interface VariantWithInventory$1 extends VariantWithInventoryTypedPropertiesOneOf$1 {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties$1;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties$1;
    /** Variant ID. */
    id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /** Variant price. */
    price?: PriceInfo$1;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails$1;
    /** Inventory item of the variant on the default location. */
    inventoryItem?: InventoryItemComposite$1;
    /** List of choices. */
    choices?: OptionChoiceReferences$1[];
}
/** @oneof */
interface VariantWithInventoryTypedPropertiesOneOf$1 {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties$1;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties$1;
}
interface InventoryItemComposite$1 extends InventoryItemCompositeTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Inventory item revision.
     * @readonly
     */
    revision?: string | null;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$1;
}
/** @oneof */
interface InventoryItemCompositeTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
interface PreorderInfo$1 {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface OptionChoiceReferences$1 {
    /** Option and choice IDs. */
    optionChoiceIds?: V3OptionChoiceIds$1;
    /** Option and choice names. */
    optionChoiceNames?: V3OptionChoiceNames$1;
}
interface V3OptionChoiceIds$1 {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
interface V3OptionChoiceNames$1 {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType$1;
}
interface CreateProductWithInventoryResponse$1 {
    /** Created product. */
    product?: V3Product$1;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults$1;
}
interface BulkInventoryItemResults$1 {
    /** Inventories modified by bulk action. */
    results?: BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
    /** Error details in case of failed action. */
    error?: ApplicationError$1;
}
interface BulkInventoryItemResult$1 {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: CommonItemMetadata$1;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem$1;
}
interface CommonItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/** Inventory Item. */
interface InventoryItem$1 extends InventoryItemTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus$1;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$1;
    /**
     * Product.
     * @readonly
     */
    product?: Product$1;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
declare enum AvailabilityStatus$1 {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    IN_STOCK = "IN_STOCK",
    /**
     * Whether the variant is available for preorder. InventoryItem will be available only when all below conditions are met:
     * 1. the variant is out of stock
     * 2. preorder is enabled on inventory item level (preorder_setting.enabled is true)
     * 3. preorder limit wasn't reached (preorder_setting.limit)
     */
    PREORDER = "PREORDER"
}
interface Product$1 {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
}
interface CommonBulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateProductRequest$1 {
    /** Product to update. */
    product: V3Product$1;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
interface UpdateProductResponse$1 {
    /** Updated product. */
    product?: V3Product$1;
}
interface UpdateProductWithInventoryRequest$1 {
    /** Product to update. */
    product: ProductWithInventory$1;
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
interface UpdateProductWithInventoryResponse$1 {
    /** Updated product. */
    product?: V3Product$1;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults$1;
}
interface BulkCreateProductsRequest$1 {
    /** List of products to create. */
    products: V3Product$1[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
declare enum RequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANTS_INFO = "VARIANTS_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    MIN_VARIANT_PRICE_INFO = "MIN_VARIANT_PRICE_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL",
    DIRECT_CATEGORY_IDS = "DIRECT_CATEGORY_IDS"
}
interface BulkCreateProductsResponse$1 {
    /** Products created by bulk action. */
    results?: CatalogV3BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
}
interface CatalogV3BulkProductResult$1 {
    /** Information about successful action or error for failure. */
    itemMetadata?: WixCommonItemMetadata$1;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product$1;
}
interface WixCommonItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface BulkCreateProductsWithInventoryRequest$1 {
    /** List of products to create with inventory. */
    products: ProductWithInventory$1[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkCreateProductsWithInventoryResponse$1 {
    /** Products created by bulk action. */
    productResults?: BulkProductResults$1;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults$1;
}
interface BulkProductResults$1 {
    /** Products modified by bulk action. */
    results?: CatalogV3BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
}
interface BulkUpdateProductsRequest$1 {
    /** List of products to update. */
    products: V3MaskedProduct$1[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface V3MaskedProduct$1 {
    /** Product to update. */
    product?: V3Product$1;
}
interface BulkUpdateProductsResponse$1 {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
}
interface BulkUpdateProductsWithInventoryRequest$1 {
    /** List of products to update. */
    products: MaskedProductWithInventory$1[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface MaskedProductWithInventory$1 {
    /** Product to update. */
    product?: ProductWithInventory$1;
}
interface BulkUpdateProductsWithInventoryResponse$1 {
    /** Products updated by bulk action. */
    productResults?: BulkProductResults$1;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults$1;
}
interface V3BulkUpdateProductsByFilterRequest$1 {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product$1;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface WixCommonSearchDetails$1 {
    /** Defines how separate search terms in `expression` are combined */
    mode?: CommonSearchDetailsMode$1;
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum CommonSearchDetailsMode$1 {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
interface V3BulkUpdateProductsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3UpdateExtendedFieldsRequest$1 {
    /** Product ID. */
    productId: string;
    /** App namespace. */
    namespace: string;
    /** Data to update. */
    namespaceData: Record<string, any> | null;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
interface V3UpdateExtendedFieldsResponse$1 {
    /** Updated product. */
    product?: V3Product$1;
}
interface V3DeleteProductRequest$1 {
    /** Product ID. */
    productId: string;
}
interface V3DeleteProductResponse$1 {
}
interface V3BulkDeleteProductsRequest$1 {
    /** IDs of products to delete. */
    productIds: string[];
}
interface V3BulkDeleteProductsResponse$1 {
    /** Products deleted by bulk action. */
    results?: BulkDeleteProductsResponseBulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
}
interface BulkDeleteProductsResponseBulkProductResult$1 {
    /** Bulk action metadata for products. */
    itemMetadata?: WixCommonItemMetadata$1;
}
interface V3BulkDeleteProductsByFilterRequest$1 {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface V3BulkDeleteProductsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3GetProductRequest$1 {
    /** Product ID. */
    productId: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
interface V3GetProductResponse$1 {
    /** Product. */
    product?: V3Product$1;
}
interface V3GetProductBySlugRequest$1 {
    /** Product slug. */
    slug: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields$1[];
}
interface V3GetProductBySlugResponse$1 {
    /** Product. */
    product?: V3Product$1;
}
interface V3SearchProductsRequest$1 {
    /** Search options. */
    search?: CommonCursorSearch$1;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface CommonCursorSearch$1 extends CommonCursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging$1;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: WixCommonSorting$1[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: WixCommonAggregation$1[];
    /** Free text to match in searchable fields */
    search?: WixCommonSearchDetails$1;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     */
    timeZone?: string | null;
}
/** @oneof */
interface CommonCursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging$1;
}
interface WixCommonSorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: WixCommonSortOrder$1;
    /**
     * When `field_name` is a property of repeated field that is marked as `MATCH_ITEMS` and sort should be done by
     * a specific element from a collection, filter can/should be provided to ensure correct sort value is picked.
     *
     * If multiple filters are provided, they are combined with AND operator.
     *
     * Example:
     * Given we have document like {"id": "1", "nestedField": [{"price": 10, "region": "EU"}, {"price": 20, "region": "US"}]}
     * and `nestedField` is marked as `MATCH_ITEMS`, to ensure that sorting is done by correct region, filter should be
     * { fieldName: "nestedField.price", "select_items_by": [{"nestedField.region": "US"}] }
     */
    selectItemsBy?: Record<string, any>[] | null;
}
declare enum WixCommonSortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface WixCommonAggregation$1 extends WixCommonAggregationKindOneOf$1 {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation$1;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation$1;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation$1;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation$1;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: WixCommonAggregationType$1;
    /** Field to aggregate by, use dot notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface WixCommonAggregationKindOneOf$1 {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation$1;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation$1;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation$1;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation$1;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation$1;
}
interface AggregationRangeAggregationRangeBucket$1 {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum AggregationValueAggregationSortType$1 {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
declare enum AggregationValueAggregationSortDirection$1 {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
declare enum AggregationValueAggregationMissingValues$1 {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
interface AggregationValueAggregationIncludeMissingValuesOptions$1 {
    /** Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum WixCommonScalarType$1 {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX",
    /** Sum of values */
    SUM = "SUM",
    /** Average of values */
    AVG = "AVG"
}
interface CommonAggregationValueAggregation$1 extends CommonAggregationValueAggregationOptionsOneOf$1 {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions$1;
    /** Should sort by number of matches or value of the field */
    sortType?: AggregationValueAggregationSortType$1;
    /** Should sort in ascending or descending order */
    sortDirection?: AggregationValueAggregationSortDirection$1;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: AggregationValueAggregationMissingValues$1;
}
/** @oneof */
interface CommonAggregationValueAggregationOptionsOneOf$1 {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions$1;
}
declare enum AggregationNestedAggregationNestedAggregationType$1 {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface CommonAggregationRangeAggregation$1 {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds */
    buckets?: AggregationRangeAggregationRangeBucket$1[];
}
interface CommonAggregationScalarAggregation$1 {
    /** Define the operator for the scalar aggregation */
    type?: WixCommonScalarType$1;
}
interface CommonAggregationDateHistogramAggregation$1 {
    /** Interval for date histogram aggregation */
    interval?: AggregationDateHistogramAggregationInterval$1;
}
declare enum AggregationDateHistogramAggregationInterval$1 {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface AggregationNestedAggregationNestedAggregationItem$1 extends AggregationNestedAggregationNestedAggregationItemKindOneOf$1 {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation$1;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation$1;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation$1;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationNestedAggregationNestedAggregationType$1;
    /** Field to aggregate by, use dont notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface AggregationNestedAggregationNestedAggregationItemKindOneOf$1 {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation$1;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation$1;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation$1;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation$1;
}
declare enum WixCommonAggregationType$1 {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface CommonAggregationNestedAggregation$1 {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one */
    nestedAggregations?: AggregationNestedAggregationNestedAggregationItem$1[];
}
interface CommonCursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface V3SearchProductsResponse$1 {
    /** List of products. */
    products?: V3Product$1[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata$1;
    /** Aggregation data. */
    aggregationData?: CommonAggregationData$1;
}
interface CommonCursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: CommonCursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CommonCursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface CommonAggregationData$1 {
    /** key = aggregation name (as derived from search request) */
    results?: AggregationDataAggregationResults$1[];
}
interface ValueResultsValueAggregationResult$1 {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeResultsRangeAggregationResult$1 {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface AggregationResultsNestedAggregationResults$1 extends AggregationResultsNestedAggregationResultsResultOneOf$1 {
    /** Value aggregation results */
    values?: AggregationResultsValueResults$1;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults$1;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult$1;
    /** User-defined name of aggregation, matches the one provided in request */
    name?: string;
    /** Type of aggregation that matches result */
    type?: WixCommonAggregationType$1;
    /** Field to aggregate by, matches the one provided in request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsNestedAggregationResultsResultOneOf$1 {
    /** Value aggregation results */
    values?: AggregationResultsValueResults$1;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults$1;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult$1;
}
interface AggregationResultsValueResults$1 {
    /** List of value aggregations */
    results?: ValueResultsValueAggregationResult$1[];
}
interface AggregationResultsRangeResults$1 {
    /** List of ranges returned in same order as requested */
    results?: RangeResultsRangeAggregationResult$1[];
}
interface AggregationDataAggregationResultsScalarResult$1 {
    /** Type of scalar aggregation */
    type?: WixCommonScalarType$1;
    /** Value of the scalar aggregation */
    value?: number;
}
interface GroupByValueResultsNestedValueAggregationResult$1 {
    /** Value of the field */
    value?: string;
    /** Nested aggregations */
    nestedResults?: AggregationResultsNestedAggregationResults$1;
}
interface NestedResultsValueResult$1 {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface NestedResultsRangeResult$1 {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface NestedResultsScalarResult$1 {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultsNestedResultValue$1 extends NestedResultsNestedResultValueResultOneOf$1 {
    /** Value aggregation result */
    value?: NestedResultsValueResult$1;
    /** Range aggregation result */
    range?: NestedResultsRangeResult$1;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult$1;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult$1;
}
/** @oneof */
interface NestedResultsNestedResultValueResultOneOf$1 {
    /** Value aggregation result */
    value?: NestedResultsValueResult$1;
    /** Range aggregation result */
    range?: NestedResultsRangeResult$1;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult$1;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult$1;
}
interface NestedResultsResults$1 {
    /** List of nested aggregations */
    results?: Record<string, NestedResultsNestedResultValue$1>;
}
interface DateHistogramResultsDateHistogramResult$1 {
    /** Date in ISO 8601 format */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface AggregationResultsGroupByValueResults$1 {
    /** List of value aggregations */
    results?: GroupByValueResultsNestedValueAggregationResult$1[];
}
interface AggregationResultsDateHistogramResults$1 {
    /** List of date histogram aggregations */
    results?: DateHistogramResultsDateHistogramResult$1[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface AggregationResultsNestedResults$1 {
    /** List of nested aggregations */
    results?: NestedResultsResults$1[];
}
interface AggregationDataAggregationResults$1 extends AggregationDataAggregationResultsResultOneOf$1 {
    /** Value aggregation results */
    values?: AggregationResultsValueResults$1;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults$1;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult$1;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults$1;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults$1;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults$1;
    /** User-defined name of aggregation as derived from search request */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: WixCommonAggregationType$1;
    /** Field to aggregate by as derived from search request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationDataAggregationResultsResultOneOf$1 {
    /** Value aggregation results */
    values?: AggregationResultsValueResults$1;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults$1;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult$1;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults$1;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults$1;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults$1;
}
interface V3QueryProductsRequest$1 {
    /** Query options. */
    query?: CommonCursorQuery$1;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface CommonCursorQuery$1 extends CommonCursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: WixCommonSorting$1[];
}
/** @oneof */
interface CommonCursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging$1;
}
interface V3QueryProductsResponse$1 {
    /** List of products. */
    products?: V3Product$1[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata$1;
}
interface V3CountProductsRequest$1 {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
interface V3CountProductsResponse$1 {
    /** Total number of products. */
    count?: number;
}
interface BulkUpdateProductVariantsByFilterRequest$1 {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Variant to update. */
    variant: Variant$1;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface BulkUpdateProductVariantsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkAdjustProductVariantsByFilterRequest$1 {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Base price adjustment. */
    basePrice?: V3AdjustValue$1;
    /** Sale price adjustment. */
    salePrice?: V3AdjustValue$1;
    /** Cost adjustment. */
    cost?: V3AdjustValue$1;
    /**
     * Set variant sale price from base price by applying provided discount to it.
     * For example variant base price 100$, variant sale price 95$, requested `salePriceFromBasePrice.percentage` is 10, then old sale price ignored and new sale price set to 90 (100$ - 10%).
     */
    salePriceFromBasePrice?: V3UnsignedAdjustValue$1;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `¥3.5555` will be saved as `¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategy$1;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface V3AdjustValue$1 extends V3AdjustValueAdjustValueOneOf$1 {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
/** @oneof */
interface V3AdjustValueAdjustValueOneOf$1 {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
interface V3UnsignedAdjustValue$1 extends V3UnsignedAdjustValueAdjustValueOneOf$1 {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
/** @oneof */
interface V3UnsignedAdjustValueAdjustValueOneOf$1 {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
declare enum BulkAdjustProductVariantsByFilterRequestRoundingStrategy$1 {
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
interface BulkAdjustProductVariantsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterRequest$1 {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of the info sections to add. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsRequest$1 {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision$1[];
    /** List of IDs of info sections to add. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface V3ProductIdWithRevision$1 {
    /** Product ID. */
    productId?: string;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     */
    revision?: string;
}
interface V3BulkAddInfoSectionsToProductsResponse$1 {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterRequest$1 {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of info sections to remove. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkRemoveInfoSectionsFromProductsRequest$1 {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision$1[];
    /** List of IDs of info sections to remove. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface V3BulkRemoveInfoSectionsFromProductsResponse$1 {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata$1;
}
interface BulkAddProductsToCategoriesByFilterRequest$1 {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories to which products will be added. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface BulkAddProductsToCategoriesByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkRemoveProductsFromCategoriesByFilterRequest$1 {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories from which products will be removed. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails$1;
}
interface BulkRemoveProductsFromCategoriesByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface PricePerUnitSettingsNonNullableFields$1 {
    quantity: number;
    measurementUnit: MeasurementUnit$1;
}
interface WeightRangeNonNullableFields$1 {
    minValue: number;
    maxValue: number;
}
interface PricePerUnitRangePricePerUnitNonNullableFields$1 {
    value: string;
}
interface PricePerUnitRangeNonNullableFields$1 {
    minValue?: PricePerUnitRangePricePerUnitNonNullableFields$1;
    maxValue?: PricePerUnitRangePricePerUnitNonNullableFields$1;
}
interface WeightMeasurementUnitInfoNonNullableFields$1 {
    weightMeasurementUnit: WeightUnit$1;
}
interface PhysicalPropertiesNonNullableFields$1 {
    pricePerUnit?: PricePerUnitSettingsNonNullableFields$1;
    shippingWeightRange?: WeightRangeNonNullableFields$1;
    pricePerUnitRange?: PricePerUnitRangeNonNullableFields$1;
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfoNonNullableFields$1;
}
interface PageUrlV2NonNullableFields {
    relativePath: string;
}
interface PluginContainerDataWidthNonNullableFields$1 {
    size: WidthType$1;
}
interface PluginContainerDataNonNullableFields$1 {
    width?: PluginContainerDataWidthNonNullableFields$1;
    alignment: PluginContainerDataAlignment$1;
}
interface LinkNonNullableFields$1 {
    url: string;
    anchor: string;
    target: Target$1;
}
interface ButtonDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    type: Type$1;
    link?: LinkNonNullableFields$1;
}
interface TextStyleNonNullableFields$1 {
    textAlignment: TextAlignment$1;
}
interface CodeBlockDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface DividerDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    lineStyle: LineStyle$1;
    width: Width$1;
    alignment: Alignment$1;
}
interface PDFSettingsNonNullableFields$1 {
    viewMode: ViewMode$1;
}
interface FileDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    pdfSettings?: PDFSettingsNonNullableFields$1;
}
interface ItemImageNonNullableFields {
    link?: LinkNonNullableFields$1;
}
interface ItemNonNullableFields$1 {
    image?: ItemImageNonNullableFields;
}
interface LayoutNonNullableFields$1 {
    type: LayoutType$1;
    orientation: Orientation$1;
}
interface ItemStyleNonNullableFields$1 {
    crop: Crop$1;
}
interface ThumbnailsNonNullableFields$1 {
    placement: ThumbnailsAlignment$1;
}
interface GalleryOptionsNonNullableFields$1 {
    layout?: LayoutNonNullableFields$1;
    item?: ItemStyleNonNullableFields$1;
    thumbnails?: ThumbnailsNonNullableFields$1;
}
interface GalleryDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    items: ItemNonNullableFields$1[];
    options?: GalleryOptionsNonNullableFields$1;
}
interface GIFDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    height: number;
    width: number;
}
interface HeadingDataNonNullableFields$1 {
    level: number;
    textStyle?: TextStyleNonNullableFields$1;
}
interface HTMLDataNonNullableFields$1 {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields$1;
    source: Source$1;
}
interface ImageDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    link?: LinkNonNullableFields$1;
}
interface LinkPreviewDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    link?: LinkNonNullableFields$1;
}
interface MapSettingsNonNullableFields$1 {
    mapType: MapType$1;
}
interface MapDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    mapSettings?: MapSettingsNonNullableFields$1;
}
interface ParagraphDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface PermissionsNonNullableFields$1 {
    view: ViewRole$1;
    vote: VoteRole$1;
}
interface PollSettingsNonNullableFields$1 {
    permissions?: PermissionsNonNullableFields$1;
}
interface PollNonNullableFields$1 {
    settings?: PollSettingsNonNullableFields$1;
}
interface PollLayoutNonNullableFields$1 {
    type: PollLayoutType$1;
    direction: PollLayoutDirection$1;
}
interface PollDataLayoutNonNullableFields$1 {
    poll?: PollLayoutNonNullableFields$1;
}
interface BackgroundNonNullableFields$1 {
    type: BackgroundType$1;
}
interface PollDesignNonNullableFields$1 {
    background?: BackgroundNonNullableFields$1;
}
interface DesignNonNullableFields$1 {
    poll?: PollDesignNonNullableFields$1;
}
interface PollDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    poll?: PollNonNullableFields$1;
    layout?: PollDataLayoutNonNullableFields$1;
    design?: DesignNonNullableFields$1;
}
interface AnchorDataNonNullableFields$1 {
    anchor: string;
}
interface LinkDataNonNullableFields$1 {
    link?: LinkNonNullableFields$1;
}
interface MentionDataNonNullableFields$1 {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields$1 {
    unit: FontType$1;
}
interface DecorationNonNullableFields$1 {
    anchorData?: AnchorDataNonNullableFields$1;
    linkData?: LinkDataNonNullableFields$1;
    mentionData?: MentionDataNonNullableFields$1;
    fontSizeData?: FontSizeDataNonNullableFields$1;
    type: DecorationType$1;
}
interface TextDataNonNullableFields$1 {
    text: string;
    decorations: DecorationNonNullableFields$1[];
}
interface AppEmbedDataNonNullableFields$1 {
    type: AppType$1;
}
interface VideoDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface EmbedDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface CollapsibleListDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    initialExpandedItems: InitialExpandedItems$1;
    direction: Direction$1;
}
interface DimensionsNonNullableFields$1 {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    dimensions?: DimensionsNonNullableFields$1;
}
interface CellStyleNonNullableFields$1 {
    verticalAlignment: VerticalAlignment$1;
}
interface TableCellDataNonNullableFields$1 {
    cellStyle?: CellStyleNonNullableFields$1;
}
interface AudioDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface OrderedListDataNonNullableFields$1 {
    indentation: number;
}
interface BulletedListDataNonNullableFields$1 {
    indentation: number;
}
interface BlockquoteDataNonNullableFields$1 {
    indentation: number;
}
interface CaptionDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface NodeNonNullableFields$1 {
    buttonData?: ButtonDataNonNullableFields$1;
    codeBlockData?: CodeBlockDataNonNullableFields$1;
    dividerData?: DividerDataNonNullableFields$1;
    fileData?: FileDataNonNullableFields$1;
    galleryData?: GalleryDataNonNullableFields$1;
    gifData?: GIFDataNonNullableFields$1;
    headingData?: HeadingDataNonNullableFields$1;
    htmlData?: HTMLDataNonNullableFields$1;
    imageData?: ImageDataNonNullableFields$1;
    linkPreviewData?: LinkPreviewDataNonNullableFields$1;
    mapData?: MapDataNonNullableFields$1;
    paragraphData?: ParagraphDataNonNullableFields$1;
    pollData?: PollDataNonNullableFields$1;
    textData?: TextDataNonNullableFields$1;
    appEmbedData?: AppEmbedDataNonNullableFields$1;
    videoData?: VideoDataNonNullableFields$1;
    embedData?: EmbedDataNonNullableFields$1;
    collapsibleListData?: CollapsibleListDataNonNullableFields$1;
    tableData?: TableDataNonNullableFields$1;
    tableCellData?: TableCellDataNonNullableFields$1;
    audioData?: AudioDataNonNullableFields$1;
    orderedListData?: OrderedListDataNonNullableFields$1;
    bulletedListData?: BulletedListDataNonNullableFields$1;
    blockquoteData?: BlockquoteDataNonNullableFields$1;
    captionData?: CaptionDataNonNullableFields$1;
    type: NodeType$1;
    id: string;
    nodes: NodeNonNullableFields$1[];
}
interface MetadataNonNullableFields$1 {
    version: number;
}
interface TextNodeStyleNonNullableFields$1 {
    decorations: DecorationNonNullableFields$1[];
}
interface DocumentStyleNonNullableFields$1 {
    headerOne?: TextNodeStyleNonNullableFields$1;
    headerTwo?: TextNodeStyleNonNullableFields$1;
    headerThree?: TextNodeStyleNonNullableFields$1;
    headerFour?: TextNodeStyleNonNullableFields$1;
    headerFive?: TextNodeStyleNonNullableFields$1;
    headerSix?: TextNodeStyleNonNullableFields$1;
    paragraph?: TextNodeStyleNonNullableFields$1;
    blockquote?: TextNodeStyleNonNullableFields$1;
    codeBlock?: TextNodeStyleNonNullableFields$1;
}
interface RichContentNonNullableFields$1 {
    nodes: NodeNonNullableFields$1[];
    metadata?: MetadataNonNullableFields$1;
    documentStyle?: DocumentStyleNonNullableFields$1;
}
interface ImageNonNullableFields$1 {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface VideoResolutionNonNullableFields {
    url: string;
    height: number;
    width: number;
    poster?: ImageNonNullableFields$1;
    format: string;
}
interface VideoV2NonNullableFields {
    id: string;
    url: string;
    resolutions: VideoResolutionNonNullableFields[];
    posters: ImageNonNullableFields$1[];
}
interface ThumbnailNonNullableFields$1 {
    url: string;
    height: number;
    width: number;
}
interface ProductMediaNonNullableFields$1 {
    id: string;
    url: string;
    image?: ImageNonNullableFields$1;
    video?: VideoV2NonNullableFields;
    mediaType: MediaType$1;
    thumbnail?: ThumbnailNonNullableFields$1;
    uploadId: string;
}
interface MediaItemsInfoNonNullableFields$1 {
    items: ProductMediaNonNullableFields$1[];
}
interface MediaNonNullableFields$1 {
    main?: ProductMediaNonNullableFields$1;
    itemsInfo?: MediaItemsInfoNonNullableFields$1;
}
interface TagNonNullableFields$1 {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields$1 {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields$1 {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields$1[];
}
interface SeoSchemaNonNullableFields$1 {
    tags: TagNonNullableFields$1[];
    settings?: SettingsNonNullableFields$1;
}
interface MultipleColorsNonNullableFields$1 {
    colorCodes: string[];
}
interface ConnectedOptionChoiceNonNullableFields$1 {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields$1;
    image?: ImageNonNullableFields$1;
    linkedMedia: ProductMediaNonNullableFields$1[];
    choiceType: ChoiceType$1;
    key: string;
    inStock: boolean;
    visible: boolean;
}
interface ChoicesSettingsNonNullableFields$1 {
    choices: ConnectedOptionChoiceNonNullableFields$1[];
}
interface ConnectedOptionNonNullableFields$1 {
    choicesSettings?: ChoicesSettingsNonNullableFields$1;
    optionRenderType: ProductOptionRenderType$1;
    key: string;
}
interface FreeTextSettingsNonNullableFields$1 {
    minCharCount: number;
    maxCharCount: number;
    title: string;
    key: string;
}
interface ConnectedModifierChoiceNonNullableFields$1 {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields$1;
    image?: ImageNonNullableFields$1;
    linkedMedia: ProductMediaNonNullableFields$1[];
    choiceType: ChoiceType$1;
    key: string;
}
interface ModifierChoicesSettingsNonNullableFields$1 {
    choices: ConnectedModifierChoiceNonNullableFields$1[];
}
interface ConnectedModifierNonNullableFields$1 {
    freeTextSettings?: FreeTextSettingsNonNullableFields$1;
    choicesSettings?: ModifierChoicesSettingsNonNullableFields$1;
    modifierRenderType: ModifierRenderType$1;
    mandatory: boolean;
    key: string;
}
interface InfoSectionNonNullableFields$1 {
    description?: RichContentNonNullableFields$1;
}
interface ProductCategoryNonNullableFields$1 {
    id: string;
}
interface ProductCategoriesInfoNonNullableFields$1 {
    categories: ProductCategoryNonNullableFields$1[];
}
interface ProductCategoryIdsInfoNonNullableFields$1 {
    categoryIds: string[];
}
interface FixedMonetaryAmountNonNullableFields$1 {
    amount: string;
}
interface PriceRangeNonNullableFields$1 {
    minValue?: FixedMonetaryAmountNonNullableFields$1;
    maxValue?: FixedMonetaryAmountNonNullableFields$1;
}
interface InventoryNonNullableFields$1 {
    availabilityStatus: InventoryAvailabilityStatus$1;
    preorderStatus: PreorderStatus$1;
    preorderAvailability: ProductPreorderAvailability$1;
}
interface BreadCrumbNonNullableFields$1 {
    categoryId: string;
    categoryName: string;
    categorySlug: string;
}
interface BreadcrumbsInfoNonNullableFields$1 {
    breadcrumbs: BreadCrumbNonNullableFields$1[];
}
interface PricePerUnitNonNullableFields$1 {
    settings?: PricePerUnitSettingsNonNullableFields$1;
    value: string;
}
interface VariantPhysicalPropertiesNonNullableFields$1 {
    pricePerUnit?: PricePerUnitNonNullableFields$1;
}
interface SecuredMediaNonNullableFields$1 {
    id: string;
    fileName: string;
    fileType: FileType$1;
}
interface VariantDigitalPropertiesNonNullableFields$1 {
    digitalFile?: SecuredMediaNonNullableFields$1;
}
interface OptionChoiceIdsNonNullableFields$1 {
    optionId: string;
    choiceId: string;
}
interface OptionChoiceNamesNonNullableFields$1 {
    optionName: string;
    choiceName: string;
    renderType: ProductOptionRenderType$1;
}
interface OptionChoiceNonNullableFields$1 {
    optionChoiceIds?: OptionChoiceIdsNonNullableFields$1;
    optionChoiceNames?: OptionChoiceNamesNonNullableFields$1;
}
interface PriceInfoNonNullableFields$1 {
    basePrice?: FixedMonetaryAmountNonNullableFields$1;
    salePrice?: FixedMonetaryAmountNonNullableFields$1;
}
interface RevenueDetailsNonNullableFields$1 {
    cost?: FixedMonetaryAmountNonNullableFields$1;
    profit?: FixedMonetaryAmountNonNullableFields$1;
    profitMargin: number;
}
interface SubscriptionPricePerUnitNonNullableFields$1 {
    value: string;
}
interface SubscriptionPriceNonNullableFields$1 {
    subscriptionId: string;
    price?: FixedMonetaryAmountNonNullableFields$1;
    pricePerUnit?: SubscriptionPricePerUnitNonNullableFields$1;
}
interface SubscriptionPricesInfoNonNullableFields$1 {
    subscriptionPrices: SubscriptionPriceNonNullableFields$1[];
}
interface InventoryStatusNonNullableFields$1 {
    inStock: boolean;
    preorderEnabled: boolean;
}
interface VariantNonNullableFields$1 {
    physicalProperties?: VariantPhysicalPropertiesNonNullableFields$1;
    digitalProperties?: VariantDigitalPropertiesNonNullableFields$1;
    choices: OptionChoiceNonNullableFields$1[];
    price?: PriceInfoNonNullableFields$1;
    revenueDetails?: RevenueDetailsNonNullableFields$1;
    media?: ProductMediaNonNullableFields$1;
    subscriptionPricesInfo?: SubscriptionPricesInfoNonNullableFields$1;
    inventoryStatus?: InventoryStatusNonNullableFields$1;
}
interface VariantsInfoNonNullableFields$1 {
    variants: VariantNonNullableFields$1[];
}
interface SubscriptionDiscountNonNullableFields$1 {
    amountOff: string;
    percentOff: number;
    type: DiscountType$1;
}
interface SubscriptionNonNullableFields$1 {
    autoRenewal: boolean;
    billingCycles: number;
    title: string;
    frequency: SubscriptionFrequency$1;
    discount?: SubscriptionDiscountNonNullableFields$1;
}
interface SubscriptionDetailsNonNullableFields$1 {
    subscriptions: SubscriptionNonNullableFields$1[];
}
interface VariantSummaryNonNullableFields$1 {
    variantCount: number;
}
interface MinVariantPriceInfoNonNullableFields$1 {
    basePrice?: FixedMonetaryAmountNonNullableFields$1;
    salePrice?: FixedMonetaryAmountNonNullableFields$1;
    minSubscriptionPrice?: FixedMonetaryAmountNonNullableFields$1;
    pricePerUnitData?: PricePerUnitNonNullableFields$1;
    revenueDetails?: RevenueDetailsNonNullableFields$1;
}
interface V3ProductNonNullableFields$1 {
    physicalProperties?: PhysicalPropertiesNonNullableFields$1;
    numericId: string;
    url?: PageUrlV2NonNullableFields;
    description?: RichContentNonNullableFields$1;
    media?: MediaNonNullableFields$1;
    seoData?: SeoSchemaNonNullableFields$1;
    options: ConnectedOptionNonNullableFields$1[];
    modifiers: ConnectedModifierNonNullableFields$1[];
    infoSections: InfoSectionNonNullableFields$1[];
    directCategoriesInfo?: ProductCategoriesInfoNonNullableFields$1;
    allCategoriesInfo?: ProductCategoriesInfoNonNullableFields$1;
    directCategoryIdsInfo?: ProductCategoryIdsInfoNonNullableFields$1;
    basePriceRange?: PriceRangeNonNullableFields$1;
    salePriceRange?: PriceRangeNonNullableFields$1;
    costRange?: PriceRangeNonNullableFields$1;
    inventory?: InventoryNonNullableFields$1;
    productType: ProductType$1;
    breadcrumbsInfo?: BreadcrumbsInfoNonNullableFields$1;
    variantsInfo?: VariantsInfoNonNullableFields$1;
    subscriptionDetails?: SubscriptionDetailsNonNullableFields$1;
    flattenOptions: string[];
    flattenModifiers: string[];
    variantSummary?: VariantSummaryNonNullableFields$1;
    minVariantPriceInfo?: MinVariantPriceInfoNonNullableFields$1;
}
interface CreateProductResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface CommonItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface ProductNonNullableFields$1 {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields$1 {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus$1;
    product?: ProductNonNullableFields$1;
}
interface BulkInventoryItemResultNonNullableFields$1 {
    itemMetadata?: CommonItemMetadataNonNullableFields$1;
    item?: InventoryItemNonNullableFields$1;
}
interface CommonBulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkInventoryItemResultsNonNullableFields$1 {
    results: BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
    error?: ApplicationErrorNonNullableFields$1;
}
interface CreateProductWithInventoryResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields$1;
}
interface UpdateProductResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
}
interface UpdateProductWithInventoryResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields$1;
}
interface WixCommonItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface CatalogV3BulkProductResultNonNullableFields$1 {
    itemMetadata?: WixCommonItemMetadataNonNullableFields$1;
    item?: V3ProductNonNullableFields$1;
}
interface BulkCreateProductsResponseNonNullableFields$1 {
    results: CatalogV3BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
}
interface BulkProductResultsNonNullableFields$1 {
    results: CatalogV3BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
}
interface BulkCreateProductsWithInventoryResponseNonNullableFields$1 {
    productResults?: BulkProductResultsNonNullableFields$1;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields$1;
}
interface BulkUpdateProductsResponseNonNullableFields$1 {
    results: CatalogV3BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateProductsWithInventoryResponseNonNullableFields$1 {
    productResults?: BulkProductResultsNonNullableFields$1;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields$1;
}
interface V3BulkUpdateProductsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface V3UpdateExtendedFieldsResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
}
interface BulkDeleteProductsResponseBulkProductResultNonNullableFields$1 {
    itemMetadata?: WixCommonItemMetadataNonNullableFields$1;
}
interface V3BulkDeleteProductsResponseNonNullableFields$1 {
    results: BulkDeleteProductsResponseBulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
}
interface V3BulkDeleteProductsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface V3GetProductResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
}
interface V3GetProductBySlugResponseNonNullableFields$1 {
    product?: V3ProductNonNullableFields$1;
}
interface ValueResultsValueAggregationResultNonNullableFields$1 {
    value: string;
    count: number;
}
interface AggregationResultsValueResultsNonNullableFields$1 {
    results: ValueResultsValueAggregationResultNonNullableFields$1[];
}
interface RangeResultsRangeAggregationResultNonNullableFields$1 {
    count: number;
}
interface AggregationResultsRangeResultsNonNullableFields$1 {
    results: RangeResultsRangeAggregationResultNonNullableFields$1[];
}
interface AggregationDataAggregationResultsScalarResultNonNullableFields$1 {
    type: WixCommonScalarType$1;
    value: number;
}
interface AggregationResultsNestedAggregationResultsNonNullableFields$1 {
    values?: AggregationResultsValueResultsNonNullableFields$1;
    ranges?: AggregationResultsRangeResultsNonNullableFields$1;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields$1;
    name: string;
    type: WixCommonAggregationType$1;
    fieldPath: string;
}
interface GroupByValueResultsNestedValueAggregationResultNonNullableFields$1 {
    value: string;
    nestedResults?: AggregationResultsNestedAggregationResultsNonNullableFields$1;
}
interface AggregationResultsGroupByValueResultsNonNullableFields$1 {
    results: GroupByValueResultsNestedValueAggregationResultNonNullableFields$1[];
}
interface DateHistogramResultsDateHistogramResultNonNullableFields$1 {
    value: string;
    count: number;
}
interface AggregationResultsDateHistogramResultsNonNullableFields$1 {
    results: DateHistogramResultsDateHistogramResultNonNullableFields$1[];
}
interface AggregationDataAggregationResultsNonNullableFields$1 {
    values?: AggregationResultsValueResultsNonNullableFields$1;
    ranges?: AggregationResultsRangeResultsNonNullableFields$1;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields$1;
    groupedByValue?: AggregationResultsGroupByValueResultsNonNullableFields$1;
    dateHistogram?: AggregationResultsDateHistogramResultsNonNullableFields$1;
    name: string;
    type: WixCommonAggregationType$1;
    fieldPath: string;
}
interface CommonAggregationDataNonNullableFields$1 {
    results: AggregationDataAggregationResultsNonNullableFields$1[];
}
interface V3SearchProductsResponseNonNullableFields$1 {
    products: V3ProductNonNullableFields$1[];
    aggregationData?: CommonAggregationDataNonNullableFields$1;
}
interface V3QueryProductsResponseNonNullableFields$1 {
    products: V3ProductNonNullableFields$1[];
}
interface V3CountProductsResponseNonNullableFields$1 {
    count: number;
}
interface BulkUpdateProductVariantsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface BulkAdjustProductVariantsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface V3BulkAddInfoSectionsToProductsResponseNonNullableFields$1 {
    results: CatalogV3BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields$1 {
    results: CatalogV3BulkProductResultNonNullableFields$1[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields$1;
}
interface BulkAddProductsToCategoriesByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields$1 {
    jobId: string;
}

interface V3Product extends V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Product name. Translatable. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: string;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product base price range - minimum and maximum prices of all product variants.
     * @readonly
     */
    basePriceRange?: PriceRange;
    /**
     * Product sale price range - minimum and maximum sale prices of all product variants.
     * @readonly
     */
    salePriceRange?: PriceRange;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /** Product variants. */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
/** @oneof */
interface V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** Data for a map node. */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType;
    /** Node ID. */
    _id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** Data for a map node. */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
}
declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION"
}
interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: Type;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
interface Border {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface Colors {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
interface Styles {
    /** Border attributes. */
    border?: Border;
    /** Color attributes. */
    colors?: Colors;
}
interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyle;
    /** Divider width. */
    width?: Width;
    /** Divider alignment. */
    alignment?: Alignment;
}
declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
declare enum Alignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
}
interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface V1Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image {
    /** Image file details. */
    media?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
}
interface Video {
    /** Video file details. */
    media?: V1Media;
    /** Video thumbnail file details. */
    thumbnail?: V1Media;
}
interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
}
interface GalleryOptions {
    /** Gallery layout. */
    layout?: Layout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
interface Layout {
    /** Gallery layout type. */
    type?: LayoutType;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
}
interface GIF {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: Source;
}
/** @oneof */
interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType;
}
declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRole;
    /** Sets who can vote. */
    vote?: VoteRole;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option {
    /** Option ID. */
    _id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media;
}
interface PollSettings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
interface Background extends BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType;
}
/** @oneof */
interface BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll {
    /** Poll ID. */
    _id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings;
}
interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** The type of decoration to apply. */
    type?: DecorationType;
}
/** @oneof */
interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
}
declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData {
    /** Link details. */
    link?: Link;
}
interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    _id?: string | null;
}
interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontType;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType {
    PX = "PX",
    EM = "EM"
}
interface SpoilerData {
    /** Spoiler ID. */
    _id?: string | null;
}
interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppType;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: V1Media;
    /** Video thumbnail details. */
    thumbnail?: V1Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface BorderColors {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: V1Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData {
    textStyle?: TextStyle;
}
interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface Media {
    /**
     * Main media (image, video, etc.) associated with this product.
     * @readonly
     */
    main?: ProductMedia;
    /**
     * All media items.
     * > **Note:** Returned only when you pass `"MEDIA_ITEMS_INFO"` to the `fields` array in Products API requests.
     */
    itemsInfo?: MediaItemsInfo;
}
interface ProductMedia extends ProductMediaSetByOneOf, ProductMediaMediaOneOf {
    /** ID of existing media from Wix Media Manager. */
    _id?: string;
    /** Media URL. */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: MediaType;
    /**
     * Media thumbnail.
     * > **Note:** Returned only when you pass `"THUMBNAIL"` to the `fields` array in Products API requests.
     */
    thumbnail?: Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     */
    uploadId?: string;
}
/** @oneof */
interface ProductMediaSetByOneOf {
    /** ID of existing media from Wix Media Manager. */
    _id?: string;
    /** Media URL. */
    url?: string;
}
/** @oneof */
interface ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
}
declare enum MediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    IMAGE = "IMAGE",
    VIDEO = "VIDEO"
}
interface Thumbnail {
    /** Thumbnail url. */
    url?: string;
    /** Thumbnail height. */
    height?: number;
    /** Thumbnail width. */
    width?: number;
    /** Thumbnail alt text. */
    altText?: string | null;
}
interface MediaItemsInfo {
    /** All media items (images, videos etc) associated with this product. */
    items?: ProductMedia[];
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
interface ConnectedOption extends ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
    /** ID of a customization with `customizationType: PRODUCT_OPTION`. */
    _id?: string | null;
    /** Option name. */
    name?: string | null;
    /** Option render type. */
    optionRenderType?: ProductOptionRenderType;
}
/** @oneof */
interface ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
}
declare enum ProductOptionRenderType {
    UNKNOWN_OPTION_RENDER_TYPE = "UNKNOWN_OPTION_RENDER_TYPE",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface ChoicesSettings {
    /** List of available choices for the option. */
    choices?: ConnectedOptionChoice[];
}
interface ConnectedOptionChoice extends ConnectedOptionChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** The id of the choice. */
    choiceId?: string | null;
    /**
     * Product media overrides. When not empty only these images will be shown when such choices selected by customer. Otherwise all images of product.
     * When several choices from different options selected only media filter present in `media_overrides` of ALL choices will be shown.
     * For example if Color:red has images 1,2,3 and Material:Silk has images 2,3,5 then only images 2,3 will be shown when both of them selected.
     */
    linkedMedia?: ProductMedia[];
    /** The type of this choice. */
    choiceType?: ChoiceType;
    /** Choice name. */
    name?: string | null;
    /**
     * A flag that indicates if at least one variant with this choice is in stock in the default store's location.
     * For example, a product with 'Color' and 'Size' options with variants: [Blue, Small] which is out of stock and [Red Large] which is in stock. For choice 'Blue' ths flag will be 'false' and for 'Red' the flag will be true
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether at least one variant with this choice is visible.
     *
     * Default: `false`
     * @readonly
     */
    visible?: boolean;
}
/** @oneof */
interface ConnectedOptionChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    CHOICE_TEXT = "CHOICE_TEXT",
    ONE_COLOR = "ONE_COLOR",
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    IMAGE = "IMAGE"
}
interface ConnectedModifier extends ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
    /** ID of a customization with `customizationType: MODIFIER`. */
    _id?: string | null;
    /** Modifier title. */
    name?: string | null;
    /** Modifier render type. */
    modifierRenderType?: ModifierRenderType;
    /** Whether customer input is required for this modifier. */
    mandatory?: boolean;
}
/** @oneof */
interface ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
}
declare enum ModifierRenderType {
    UNKNOWN_MODIFIER_RENDER_TYPE = "UNKNOWN_MODIFIER_RENDER_TYPE",
    FREE_TEXT = "FREE_TEXT",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface FreeTextSettings {
    /** Minimum number of characters. */
    minCharCount?: number;
    /** Maximum number of characters. */
    maxCharCount?: number;
    /** Default amount to be added to the product's price. */
    defaultAddedPrice?: string | null;
    /** Title of the text to be input by the customer. */
    title?: string;
}
interface ModifierChoicesSettings {
    /** List of modifier choices. */
    choices?: ConnectedModifierChoice[];
}
interface ConnectedModifierChoice extends ConnectedModifierChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** Choice ID. */
    choiceId?: string | null;
    /** Product media. */
    linkedMedia?: ProductMedia[];
    /** Choice type. */
    choiceType?: ChoiceType;
    /**
     * Modifier key. Used for eCommerce integration.
     * @readonly
     */
    key?: string;
    /** Choice name. */
    name?: string | null;
    /** Added price. */
    addedPrice?: string | null;
}
/** @oneof */
interface ConnectedModifierChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
interface Brand {
    /** Brand ID. */
    _id?: string | null;
    /** Brand name. */
    name?: string | null;
}
interface InfoSection {
    /** Info section ID. */
    _id?: string | null;
    /**
     * Info section unique name.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @readonly
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     * > **Note:** Returned only when you pass `"INFO_SECTION_DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"INFO_SECTION_PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
}
interface Ribbon {
    /** Ribbon ID. */
    _id?: string | null;
    /** Ribbon name. */
    name?: string | null;
}
interface ProductCategoriesInfo {
    /**
     * A list of categories related to product.
     * @readonly
     */
    categories?: ProductCategory[];
}
interface ProductCategory {
    /** Category ID. */
    _id?: string;
    /** Index location of the product within the category, which can be utilized for sorting products in a specific category. For detailed instructions on how to set this up, refer to the [Add and arrange products in category](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/sample-use-cases-and-flows#add-and-arrange-products-in-category) sample flow. */
    index?: number | null;
}
interface PriceRange {
    /** Minimum value. */
    minValue?: FixedMonetaryAmount;
    /** Maximum value. */
    maxValue?: FixedMonetaryAmount;
}
interface FixedMonetaryAmount {
    /** Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount. */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    formattedAmount?: string | null;
}
interface Inventory {
    /**
     * Current availability status.
     *
     * + `IN_STOCK`: All variants are in stock and available for purchase
     * + `OUT_OF_STOCK`: All variants are out of stock
     * + `PARTIALLY_OUT_OF_STOCK`: Some variants are out of stock and some are in stock and available for purchase
     * @readonly
     */
    availabilityStatus?: InventoryAvailabilityStatus;
    /**
     * Current preorder status/
     *
     * + `ENABLED`: All variants are enabled for preorder
     * + `DISABLED`: All variants are disabled for preorder
     * + `PARTIALLY_ENABLED`: Some variants are disabled and some are enabled for preorder
     * @readonly
     */
    preorderStatus?: PreorderStatus;
    /**
     * Supported values:
     * + `ALL_VARIANTS`: All the product variants are available for preorder.
     * + `NO_VARIANTS`: None of the product variants are available for preorder.
     * + `SOME_VARIANTS`: Some of the product variants are available for preorder.
     * @readonly
     */
    preorderAvailability?: ProductPreorderAvailability;
}
declare enum InventoryAvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
declare enum PreorderStatus {
    UNKNOWN_PREORDER_STATUS = "UNKNOWN_PREORDER_STATUS",
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    PARTIALLY_ENABLED = "PARTIALLY_ENABLED"
}
declare enum ProductPreorderAvailability {
    UNKNOWN_PREORDER_AVAILABILITY_STATUS = "UNKNOWN_PREORDER_AVAILABILITY_STATUS",
    ALL_VARIANTS = "ALL_VARIANTS",
    NO_VARIANTS = "NO_VARIANTS",
    SOME_VARIANTS = "SOME_VARIANTS"
}
declare enum ProductType {
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL"
}
interface PhysicalProperties {
    /** Price per unit settings. */
    pricePerUnit?: PricePerUnitSettings;
    /** Fulfiller ID. */
    fulfillerId?: string | null;
    /**
     * Product shipping weight range - minimum and maximum weights of all the variants.
     * @readonly
     */
    shippingWeightRange?: WeightRange;
    /**
     * Product price per unit range. The minimum and maximum price per unit of all the variants.
     * @readonly
     */
    pricePerUnitRange?: PricePerUnitRange;
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfo;
}
interface PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     */
    measurementUnit?: MeasurementUnit;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
interface WeightRange {
    /** Minimum weight across all variants associated with this product. */
    minValue?: number;
    /** Maximum weight across all variants associated with this product. */
    maxValue?: number;
}
interface PricePerUnitRange {
    /** Minimum price per unit across all variants. */
    minValue?: PricePerUnitRangePricePerUnit;
    /** Maximum price per unit across all variants. */
    maxValue?: PricePerUnitRangePricePerUnit;
}
interface PricePerUnitRangePricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account pricePerUnit settings of product and variants and sale price of variants.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit info in the format of variant specific data / product setting, for example €4.00 / 1 Kg.
     * > **Note:** This field is returned by the API only when you pass `fields: "CURRENCY"` in a request.
     * @readonly
     */
    description?: string | null;
}
interface WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnit;
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface BreadcrumbsInfo {
    /**
     * Breadcrumbs.
     * @readonly
     */
    breadcrumbs?: BreadCrumb[];
}
interface BreadCrumb {
    /** Category ID. */
    categoryId?: string;
    /** Category name. */
    categoryName?: string;
    /** Category slug. */
    categorySlug?: string;
}
interface VariantsInfo {
    /** List of related variants. */
    variants?: Variant[];
}
interface Variant extends VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /** Variant ID. */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /**
     * List of choices.
     * In case this list is empty, this is the default variant of an unmanaged product.
     */
    choices?: OptionChoice[];
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.salePrice`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: InventoryStatus;
}
/** @oneof */
interface VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface OptionChoice {
    /** Option and choice IDs. */
    optionChoiceIds?: OptionChoiceIds;
    /**
     * Option and choice names.
     * > **Note:** Returned only when you pass `"VARIANT_OPTION_CHOICE_NAMES"` to the `fields` array in Products API requests.
     */
    optionChoiceNames?: OptionChoiceNames;
}
interface OptionChoiceIds {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
interface OptionChoiceNames {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType;
}
interface PriceInfo {
    /** Variant price. Must be greater or equal to 0. */
    basePrice?: FixedMonetaryAmount;
    /** Variant sale price. If not provided, sale price will be equal to `basePrice`. When provided, value must be greater or equal to 0, and less than or equal to `basePrice`. */
    salePrice?: FixedMonetaryAmount;
}
interface RevenueDetails {
    /** Item cost. */
    cost?: FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
interface VariantPhysicalProperties {
    /** Variant shipping weight. */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     */
    pricePerUnit?: PricePerUnit;
}
interface PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     */
    settings?: PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
interface VariantDigitalProperties {
    /** Digital file which will be downloaded by customer after successful purchase. */
    digitalFile?: SecuredMedia;
}
interface SecuredMedia {
    /** Media ID in media manager. */
    _id?: string;
    /**
     * Original file name.
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @readonly
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: FileType;
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface SubscriptionPricesInfo {
    /** Subscription prices. */
    subscriptionPrices?: SubscriptionPrice[];
}
interface SubscriptionPrice {
    /**
     * Subscription ID.
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.salePrice`
     * @readonly
     */
    price?: FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: SubscriptionPricePerUnit;
}
interface SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
interface InventoryStatus {
    /** Whether the variant is in stock. */
    inStock?: boolean;
    /** Whether preorder is enabled for this variant. */
    preorderEnabled?: boolean;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface SubscriptionDetails {
    /** Subscriptions. */
    subscriptions?: Subscription[];
    /**
     * Whether to allow one-time purchases in addition to subscription-based purchases.
     *
     * Default: `false`
     */
    allowOneTimePurchases?: boolean | null;
}
interface Subscription extends SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription title. */
    title?: string;
    /** Subscription description. */
    description?: string | null;
    /**
     * Whether the subscription is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Frequency of recurring payment.
     * For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     */
    frequency?: SubscriptionFrequency;
    /** Interval of recurring payment. Default: `1`. For example, if `frequency: MONTH`, `billingCycles: 3` and `interval: 2`; payment will be made every 2 months for a total of 6 months. */
    interval?: number | null;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `amount: 20`, `type: AMOUNT`.
     */
    discount?: SubscriptionDiscount;
}
/** @oneof */
interface SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface SubscriptionDiscount extends SubscriptionDiscountDiscountOneOf {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
    /** Discount type. */
    type?: DiscountType;
}
/** @oneof */
interface SubscriptionDiscountDiscountOneOf {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
}
declare enum DiscountType {
    UNKNOWN_DISCOUNT = "UNKNOWN_DISCOUNT",
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface VariantSummary {
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantCount?: number;
}
interface CreateProductRequest {
    /**
     * Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: V3Product;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
declare enum SingleEntityOpsRequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANTS_INFO = "VARIANTS_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    MIN_VARIANT_PRICE_INFO = "MIN_VARIANT_PRICE_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL",
    DIRECT_CATEGORY_IDS = "DIRECT_CATEGORY_IDS"
}
interface CreateProductResponse {
    /** Created product. */
    product?: V3Product;
}
interface CreateProductWithInventoryRequest {
    /**
     * Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: ProductWithInventory;
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface ProductWithInventory extends ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /** Product name. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     */
    options?: ConnectedOption[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the Wix Dev Center before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface V3VariantsInfo {
    /**
     * List of related variants.
     * Partial update of variants is not supported so on update you must pass all data for all of them.
     * If you want to update existing variant you must provide `id`, otherwise new variant with different id will be created which might break some integrations that rely on variant ids.
     */
    variants?: VariantWithInventory[];
}
interface VariantWithInventory extends VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /** Variant ID. */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /** Inventory item of the variant on the default location. */
    inventoryItem?: InventoryItemComposite;
    /** List of choices. */
    choices?: OptionChoiceReferences[];
}
/** @oneof */
interface VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface InventoryItemComposite extends InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Inventory item revision.
     * @readonly
     */
    revision?: string | null;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
}
/** @oneof */
interface InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
interface PreorderInfo {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface OptionChoiceReferences {
    /** Option and choice IDs. */
    optionChoiceIds?: V3OptionChoiceIds;
    /** Option and choice names. */
    optionChoiceNames?: V3OptionChoiceNames;
}
interface V3OptionChoiceIds {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
interface V3OptionChoiceNames {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType;
}
interface CreateProductWithInventoryResponse {
    /** Created product. */
    product?: V3Product;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkInventoryItemResults {
    /** Inventories modified by bulk action. */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
    /** Error details in case of failed action. */
    error?: ApplicationError;
}
interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: CommonItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
interface CommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/** Inventory Item. */
interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    IN_STOCK = "IN_STOCK",
    /**
     * Whether the variant is available for preorder. InventoryItem will be available only when all below conditions are met:
     * 1. the variant is out of stock
     * 2. preorder is enabled on inventory item level (preorder_setting.enabled is true)
     * 3. preorder limit wasn't reached (preorder_setting.limit)
     */
    PREORDER = "PREORDER"
}
interface Product {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
}
interface CommonBulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateProductRequest {
    /** Product to update. */
    product: V3Product;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateProductResponse {
    /** Updated product. */
    product?: V3Product;
}
interface UpdateProductWithInventoryRequest {
    /** Product to update. */
    product: ProductWithInventory;
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateProductWithInventoryResponse {
    /** Updated product. */
    product?: V3Product;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkCreateProductsRequest {
    /** List of products to create. */
    products: V3Product[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANTS_INFO = "VARIANTS_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    MIN_VARIANT_PRICE_INFO = "MIN_VARIANT_PRICE_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL",
    DIRECT_CATEGORY_IDS = "DIRECT_CATEGORY_IDS"
}
interface BulkCreateProductsResponse {
    /** Products created by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface CatalogV3BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: WixCommonItemMetadata;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
interface WixCommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface BulkCreateProductsWithInventoryRequest {
    /** List of products to create with inventory. */
    products: ProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface BulkCreateProductsWithInventoryResponse {
    /** Products created by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkProductResults {
    /** Products modified by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkUpdateProductsRequest {
    /** List of products to update. */
    products: V3MaskedProduct[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface V3MaskedProduct {
    /** Product to update. */
    product?: V3Product;
}
interface BulkUpdateProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkUpdateProductsWithInventoryRequest {
    /** List of products to update. */
    products: MaskedProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface MaskedProductWithInventory {
    /** Product to update. */
    product?: ProductWithInventory;
}
interface BulkUpdateProductsWithInventoryResponse {
    /** Products updated by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface V3BulkUpdateProductsByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface WixCommonSearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: CommonSearchDetailsMode;
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum CommonSearchDetailsMode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
interface V3BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3UpdateExtendedFieldsRequest {
    /** Product ID. */
    productId: string;
    /** App namespace. */
    namespace: string;
    /** Data to update. */
    namespaceData: Record<string, any> | null;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface V3UpdateExtendedFieldsResponse {
    /** Updated product. */
    product?: V3Product;
}
interface V3DeleteProductRequest {
    /** Product ID. */
    productId: string;
}
interface V3DeleteProductResponse {
}
interface V3BulkDeleteProductsRequest {
    /** IDs of products to delete. */
    productIds: string[];
}
interface V3BulkDeleteProductsResponse {
    /** Products deleted by bulk action. */
    results?: BulkDeleteProductsResponseBulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkDeleteProductsResponseBulkProductResult {
    /** Bulk action metadata for products. */
    itemMetadata?: WixCommonItemMetadata;
}
interface V3BulkDeleteProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3GetProductRequest {
    /** Product ID. */
    productId: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface V3GetProductResponse {
    /** Product. */
    product?: V3Product;
}
interface V3GetProductBySlugRequest {
    /** Product slug. */
    slug: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface V3GetProductBySlugResponse {
    /** Product. */
    product?: V3Product;
}
interface V3SearchProductsRequest {
    /** Search options. */
    search?: CommonCursorSearch;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface CommonCursorSearch extends CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: WixCommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: WixCommonAggregation[];
    /** Free text to match in searchable fields */
    search?: WixCommonSearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     */
    timeZone?: string | null;
}
/** @oneof */
interface CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging;
}
interface WixCommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: WixCommonSortOrder;
    /**
     * When `field_name` is a property of repeated field that is marked as `MATCH_ITEMS` and sort should be done by
     * a specific element from a collection, filter can/should be provided to ensure correct sort value is picked.
     *
     * If multiple filters are provided, they are combined with AND operator.
     *
     * Example:
     * Given we have document like {"id": "1", "nestedField": [{"price": 10, "region": "EU"}, {"price": 20, "region": "US"}]}
     * and `nestedField` is marked as `MATCH_ITEMS`, to ensure that sorting is done by correct region, filter should be
     * { fieldName: "nestedField.price", "select_items_by": [{"nestedField.region": "US"}] }
     */
    selectItemsBy?: Record<string, any>[] | null;
}
declare enum WixCommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface WixCommonAggregation extends WixCommonAggregationKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: WixCommonAggregationType;
    /** Field to aggregate by, use dot notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface WixCommonAggregationKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation;
}
interface AggregationRangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum AggregationValueAggregationSortType {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
declare enum AggregationValueAggregationSortDirection {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
declare enum AggregationValueAggregationMissingValues {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
interface AggregationValueAggregationIncludeMissingValuesOptions {
    /** Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum WixCommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX",
    /** Sum of values */
    SUM = "SUM",
    /** Average of values */
    AVG = "AVG"
}
interface CommonAggregationValueAggregation extends CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: AggregationValueAggregationSortType;
    /** Should sort in ascending or descending order */
    sortDirection?: AggregationValueAggregationSortDirection;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: AggregationValueAggregationMissingValues;
}
/** @oneof */
interface CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
}
declare enum AggregationNestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface CommonAggregationRangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds */
    buckets?: AggregationRangeAggregationRangeBucket[];
}
interface CommonAggregationScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: WixCommonScalarType;
}
interface CommonAggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: AggregationDateHistogramAggregationInterval;
}
declare enum AggregationDateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface AggregationNestedAggregationNestedAggregationItem extends AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationNestedAggregationNestedAggregationType;
    /** Field to aggregate by, use dont notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
}
declare enum WixCommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface CommonAggregationNestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one */
    nestedAggregations?: AggregationNestedAggregationNestedAggregationItem[];
}
interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface V3SearchProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: CommonAggregationData;
}
interface CommonCursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: CommonCursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface CommonAggregationData {
    /** key = aggregation name (as derived from search request) */
    results?: AggregationDataAggregationResults[];
}
interface ValueResultsValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeResultsRangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface AggregationResultsNestedAggregationResults extends AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** User-defined name of aggregation, matches the one provided in request */
    name?: string;
    /** Type of aggregation that matches result */
    type?: WixCommonAggregationType;
    /** Field to aggregate by, matches the one provided in request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
}
interface AggregationResultsValueResults {
    /** List of value aggregations */
    results?: ValueResultsValueAggregationResult[];
}
interface AggregationResultsRangeResults {
    /** List of ranges returned in same order as requested */
    results?: RangeResultsRangeAggregationResult[];
}
interface AggregationDataAggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: WixCommonScalarType;
    /** Value of the scalar aggregation */
    value?: number;
}
interface GroupByValueResultsNestedValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Nested aggregations */
    nestedResults?: AggregationResultsNestedAggregationResults;
}
interface NestedResultsValueResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface NestedResultsRangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface NestedResultsScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultsNestedResultValue extends NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: NestedResultsValueResult;
    /** Range aggregation result */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult;
}
/** @oneof */
interface NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: NestedResultsValueResult;
    /** Range aggregation result */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult;
}
interface NestedResultsResults {
    /** List of nested aggregations */
    results?: Record<string, NestedResultsNestedResultValue>;
}
interface DateHistogramResultsDateHistogramResult {
    /** Date in ISO 8601 format */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface AggregationResultsGroupByValueResults {
    /** List of value aggregations */
    results?: GroupByValueResultsNestedValueAggregationResult[];
}
interface AggregationResultsDateHistogramResults {
    /** List of date histogram aggregations */
    results?: DateHistogramResultsDateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface AggregationResultsNestedResults {
    /** List of nested aggregations */
    results?: NestedResultsResults[];
}
interface AggregationDataAggregationResults extends AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults;
    /** User-defined name of aggregation as derived from search request */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: WixCommonAggregationType;
    /** Field to aggregate by as derived from search request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults;
}
interface V3QueryProductsRequest {
    /** Query options. */
    query?: CommonCursorQuery;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface CommonCursorQuery extends CommonCursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: WixCommonSorting[];
}
/** @oneof */
interface CommonCursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
}
interface V3QueryProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
}
interface V3CountProductsRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
interface V3CountProductsResponse {
    /** Total number of products. */
    count?: number;
}
interface BulkUpdateProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Variant to update. */
    variant: Variant;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkUpdateProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkAdjustProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Base price adjustment. */
    basePrice?: V3AdjustValue;
    /** Sale price adjustment. */
    salePrice?: V3AdjustValue;
    /** Cost adjustment. */
    cost?: V3AdjustValue;
    /**
     * Set variant sale price from base price by applying provided discount to it.
     * For example variant base price 100$, variant sale price 95$, requested `salePriceFromBasePrice.percentage` is 10, then old sale price ignored and new sale price set to 90 (100$ - 10%).
     */
    salePriceFromBasePrice?: V3UnsignedAdjustValue;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `¥3.5555` will be saved as `¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3AdjustValue extends V3AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
/** @oneof */
interface V3AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
interface V3UnsignedAdjustValue extends V3UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
/** @oneof */
interface V3UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
declare enum BulkAdjustProductVariantsByFilterRequestRoundingStrategy {
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
interface BulkAdjustProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of the info sections to add. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsRequest {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision[];
    /** List of IDs of info sections to add. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface V3ProductIdWithRevision {
    /** Product ID. */
    productId?: string;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     */
    revision?: string;
}
interface V3BulkAddInfoSectionsToProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of info sections to remove. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkRemoveInfoSectionsFromProductsRequest {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision[];
    /** List of IDs of info sections to remove. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
interface V3BulkRemoveInfoSectionsFromProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkAddProductsToCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories to which products will be added. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkAddProductsToCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkRemoveProductsFromCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories from which products will be removed. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkRemoveProductsFromCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface PricePerUnitSettingsNonNullableFields {
    quantity: number;
    measurementUnit: MeasurementUnit;
}
interface WeightRangeNonNullableFields {
    minValue: number;
    maxValue: number;
}
interface PricePerUnitRangePricePerUnitNonNullableFields {
    value: string;
}
interface PricePerUnitRangeNonNullableFields {
    minValue?: PricePerUnitRangePricePerUnitNonNullableFields;
    maxValue?: PricePerUnitRangePricePerUnitNonNullableFields;
}
interface WeightMeasurementUnitInfoNonNullableFields {
    weightMeasurementUnit: WeightUnit;
}
interface PhysicalPropertiesNonNullableFields {
    pricePerUnit?: PricePerUnitSettingsNonNullableFields;
    shippingWeightRange?: WeightRangeNonNullableFields;
    pricePerUnitRange?: PricePerUnitRangeNonNullableFields;
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfoNonNullableFields;
}
interface PluginContainerDataWidthNonNullableFields {
    size: WidthType;
}
interface PluginContainerDataNonNullableFields {
    width?: PluginContainerDataWidthNonNullableFields;
    alignment: PluginContainerDataAlignment;
}
interface LinkNonNullableFields {
    url: string;
    anchor: string;
    target: Target;
}
interface ButtonDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    type: Type;
    link?: LinkNonNullableFields;
}
interface TextStyleNonNullableFields {
    textAlignment: TextAlignment;
}
interface CodeBlockDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface DividerDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    lineStyle: LineStyle;
    width: Width;
    alignment: Alignment;
}
interface PDFSettingsNonNullableFields {
    viewMode: ViewMode;
}
interface FileDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    pdfSettings?: PDFSettingsNonNullableFields;
}
interface ImageNonNullableFields {
    link?: LinkNonNullableFields;
}
interface ItemNonNullableFields {
    image?: ImageNonNullableFields;
}
interface LayoutNonNullableFields {
    type: LayoutType;
    orientation: Orientation;
}
interface ItemStyleNonNullableFields {
    crop: Crop;
}
interface ThumbnailsNonNullableFields {
    placement: ThumbnailsAlignment;
}
interface GalleryOptionsNonNullableFields {
    layout?: LayoutNonNullableFields;
    item?: ItemStyleNonNullableFields;
    thumbnails?: ThumbnailsNonNullableFields;
}
interface GalleryDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    items: ItemNonNullableFields[];
    options?: GalleryOptionsNonNullableFields;
}
interface GIFDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    height: number;
    width: number;
}
interface HeadingDataNonNullableFields {
    level: number;
    textStyle?: TextStyleNonNullableFields;
}
interface HTMLDataNonNullableFields {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields;
    source: Source;
}
interface ImageDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface LinkPreviewDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface MapSettingsNonNullableFields {
    mapType: MapType;
}
interface MapDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    mapSettings?: MapSettingsNonNullableFields;
}
interface ParagraphDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface PermissionsNonNullableFields {
    view: ViewRole;
    vote: VoteRole;
}
interface PollSettingsNonNullableFields {
    permissions?: PermissionsNonNullableFields;
}
interface PollNonNullableFields {
    settings?: PollSettingsNonNullableFields;
}
interface PollLayoutNonNullableFields {
    type: PollLayoutType;
    direction: PollLayoutDirection;
}
interface PollDataLayoutNonNullableFields {
    poll?: PollLayoutNonNullableFields;
}
interface BackgroundNonNullableFields {
    type: BackgroundType;
}
interface PollDesignNonNullableFields {
    background?: BackgroundNonNullableFields;
}
interface DesignNonNullableFields {
    poll?: PollDesignNonNullableFields;
}
interface PollDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    poll?: PollNonNullableFields;
    layout?: PollDataLayoutNonNullableFields;
    design?: DesignNonNullableFields;
}
interface AnchorDataNonNullableFields {
    anchor: string;
}
interface LinkDataNonNullableFields {
    link?: LinkNonNullableFields;
}
interface MentionDataNonNullableFields {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields {
    unit: FontType;
}
interface DecorationNonNullableFields {
    anchorData?: AnchorDataNonNullableFields;
    linkData?: LinkDataNonNullableFields;
    mentionData?: MentionDataNonNullableFields;
    fontSizeData?: FontSizeDataNonNullableFields;
    type: DecorationType;
}
interface TextDataNonNullableFields {
    text: string;
    decorations: DecorationNonNullableFields[];
}
interface AppEmbedDataNonNullableFields {
    type: AppType;
}
interface VideoDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface EmbedDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface CollapsibleListDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    initialExpandedItems: InitialExpandedItems;
    direction: Direction;
}
interface DimensionsNonNullableFields {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    dimensions?: DimensionsNonNullableFields;
}
interface CellStyleNonNullableFields {
    verticalAlignment: VerticalAlignment;
}
interface TableCellDataNonNullableFields {
    cellStyle?: CellStyleNonNullableFields;
}
interface AudioDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface OrderedListDataNonNullableFields {
    indentation: number;
}
interface BulletedListDataNonNullableFields {
    indentation: number;
}
interface BlockquoteDataNonNullableFields {
    indentation: number;
}
interface CaptionDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface NodeNonNullableFields {
    buttonData?: ButtonDataNonNullableFields;
    codeBlockData?: CodeBlockDataNonNullableFields;
    dividerData?: DividerDataNonNullableFields;
    fileData?: FileDataNonNullableFields;
    galleryData?: GalleryDataNonNullableFields;
    gifData?: GIFDataNonNullableFields;
    headingData?: HeadingDataNonNullableFields;
    htmlData?: HTMLDataNonNullableFields;
    imageData?: ImageDataNonNullableFields;
    linkPreviewData?: LinkPreviewDataNonNullableFields;
    mapData?: MapDataNonNullableFields;
    paragraphData?: ParagraphDataNonNullableFields;
    pollData?: PollDataNonNullableFields;
    textData?: TextDataNonNullableFields;
    appEmbedData?: AppEmbedDataNonNullableFields;
    videoData?: VideoDataNonNullableFields;
    embedData?: EmbedDataNonNullableFields;
    collapsibleListData?: CollapsibleListDataNonNullableFields;
    tableData?: TableDataNonNullableFields;
    tableCellData?: TableCellDataNonNullableFields;
    audioData?: AudioDataNonNullableFields;
    orderedListData?: OrderedListDataNonNullableFields;
    bulletedListData?: BulletedListDataNonNullableFields;
    blockquoteData?: BlockquoteDataNonNullableFields;
    captionData?: CaptionDataNonNullableFields;
    type: NodeType;
    _id: string;
    nodes: NodeNonNullableFields[];
}
interface MetadataNonNullableFields {
    version: number;
}
interface TextNodeStyleNonNullableFields {
    decorations: DecorationNonNullableFields[];
}
interface DocumentStyleNonNullableFields {
    headerOne?: TextNodeStyleNonNullableFields;
    headerTwo?: TextNodeStyleNonNullableFields;
    headerThree?: TextNodeStyleNonNullableFields;
    headerFour?: TextNodeStyleNonNullableFields;
    headerFive?: TextNodeStyleNonNullableFields;
    headerSix?: TextNodeStyleNonNullableFields;
    paragraph?: TextNodeStyleNonNullableFields;
    blockquote?: TextNodeStyleNonNullableFields;
    codeBlock?: TextNodeStyleNonNullableFields;
}
interface RichContentNonNullableFields {
    nodes: NodeNonNullableFields[];
    metadata?: MetadataNonNullableFields;
    documentStyle?: DocumentStyleNonNullableFields;
}
interface ThumbnailNonNullableFields {
    url: string;
    height: number;
    width: number;
}
interface ProductMediaNonNullableFields {
    _id: string;
    url: string;
    image: string;
    video: string;
    mediaType: MediaType;
    thumbnail?: ThumbnailNonNullableFields;
    uploadId: string;
}
interface MediaItemsInfoNonNullableFields {
    items: ProductMediaNonNullableFields[];
}
interface MediaNonNullableFields {
    main?: ProductMediaNonNullableFields;
    itemsInfo?: MediaItemsInfoNonNullableFields;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface MultipleColorsNonNullableFields {
    colorCodes: string[];
}
interface ConnectedOptionChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image: string;
    linkedMedia: ProductMediaNonNullableFields[];
    choiceType: ChoiceType;
    key: string;
    inStock: boolean;
    visible: boolean;
}
interface ChoicesSettingsNonNullableFields {
    choices: ConnectedOptionChoiceNonNullableFields[];
}
interface ConnectedOptionNonNullableFields {
    choicesSettings?: ChoicesSettingsNonNullableFields;
    optionRenderType: ProductOptionRenderType;
    key: string;
}
interface FreeTextSettingsNonNullableFields {
    minCharCount: number;
    maxCharCount: number;
    title: string;
    key: string;
}
interface ConnectedModifierChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image: string;
    linkedMedia: ProductMediaNonNullableFields[];
    choiceType: ChoiceType;
    key: string;
}
interface ModifierChoicesSettingsNonNullableFields {
    choices: ConnectedModifierChoiceNonNullableFields[];
}
interface ConnectedModifierNonNullableFields {
    freeTextSettings?: FreeTextSettingsNonNullableFields;
    choicesSettings?: ModifierChoicesSettingsNonNullableFields;
    modifierRenderType: ModifierRenderType;
    mandatory: boolean;
    key: string;
}
interface InfoSectionNonNullableFields {
    description?: RichContentNonNullableFields;
}
interface ProductCategoryNonNullableFields {
    _id: string;
}
interface ProductCategoriesInfoNonNullableFields {
    categories: ProductCategoryNonNullableFields[];
}
interface ProductCategoryIdsInfoNonNullableFields {
    categoryIds: string[];
}
interface FixedMonetaryAmountNonNullableFields {
    amount: string;
}
interface PriceRangeNonNullableFields {
    minValue?: FixedMonetaryAmountNonNullableFields;
    maxValue?: FixedMonetaryAmountNonNullableFields;
}
interface InventoryNonNullableFields {
    availabilityStatus: InventoryAvailabilityStatus;
    preorderStatus: PreorderStatus;
    preorderAvailability: ProductPreorderAvailability;
}
interface BreadCrumbNonNullableFields {
    categoryId: string;
    categoryName: string;
    categorySlug: string;
}
interface BreadcrumbsInfoNonNullableFields {
    breadcrumbs: BreadCrumbNonNullableFields[];
}
interface PricePerUnitNonNullableFields {
    settings?: PricePerUnitSettingsNonNullableFields;
    value: string;
}
interface VariantPhysicalPropertiesNonNullableFields {
    pricePerUnit?: PricePerUnitNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface VariantDigitalPropertiesNonNullableFields {
    digitalFile?: SecuredMediaNonNullableFields;
}
interface OptionChoiceIdsNonNullableFields {
    optionId: string;
    choiceId: string;
}
interface OptionChoiceNamesNonNullableFields {
    optionName: string;
    choiceName: string;
    renderType: ProductOptionRenderType;
}
interface OptionChoiceNonNullableFields {
    optionChoiceIds?: OptionChoiceIdsNonNullableFields;
    optionChoiceNames?: OptionChoiceNamesNonNullableFields;
}
interface PriceInfoNonNullableFields {
    basePrice?: FixedMonetaryAmountNonNullableFields;
    salePrice?: FixedMonetaryAmountNonNullableFields;
}
interface RevenueDetailsNonNullableFields {
    cost?: FixedMonetaryAmountNonNullableFields;
    profit?: FixedMonetaryAmountNonNullableFields;
    profitMargin: number;
}
interface SubscriptionPricePerUnitNonNullableFields {
    value: string;
}
interface SubscriptionPriceNonNullableFields {
    subscriptionId: string;
    price?: FixedMonetaryAmountNonNullableFields;
    pricePerUnit?: SubscriptionPricePerUnitNonNullableFields;
}
interface SubscriptionPricesInfoNonNullableFields {
    subscriptionPrices: SubscriptionPriceNonNullableFields[];
}
interface InventoryStatusNonNullableFields {
    inStock: boolean;
    preorderEnabled: boolean;
}
interface VariantNonNullableFields {
    physicalProperties?: VariantPhysicalPropertiesNonNullableFields;
    digitalProperties?: VariantDigitalPropertiesNonNullableFields;
    choices: OptionChoiceNonNullableFields[];
    price?: PriceInfoNonNullableFields;
    revenueDetails?: RevenueDetailsNonNullableFields;
    media?: ProductMediaNonNullableFields;
    subscriptionPricesInfo?: SubscriptionPricesInfoNonNullableFields;
    inventoryStatus?: InventoryStatusNonNullableFields;
}
interface VariantsInfoNonNullableFields {
    variants: VariantNonNullableFields[];
}
interface SubscriptionDiscountNonNullableFields {
    amountOff: string;
    percentOff: number;
    type: DiscountType;
}
interface SubscriptionNonNullableFields {
    autoRenewal: boolean;
    billingCycles: number;
    title: string;
    frequency: SubscriptionFrequency;
    discount?: SubscriptionDiscountNonNullableFields;
}
interface SubscriptionDetailsNonNullableFields {
    subscriptions: SubscriptionNonNullableFields[];
}
interface VariantSummaryNonNullableFields {
    variantCount: number;
}
interface MinVariantPriceInfoNonNullableFields {
    basePrice?: FixedMonetaryAmountNonNullableFields;
    salePrice?: FixedMonetaryAmountNonNullableFields;
    minSubscriptionPrice?: FixedMonetaryAmountNonNullableFields;
    pricePerUnitData?: PricePerUnitNonNullableFields;
    revenueDetails?: RevenueDetailsNonNullableFields;
}
interface V3ProductNonNullableFields {
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    numericId: string;
    url: string;
    description?: RichContentNonNullableFields;
    media?: MediaNonNullableFields;
    seoData?: SeoSchemaNonNullableFields;
    options: ConnectedOptionNonNullableFields[];
    modifiers: ConnectedModifierNonNullableFields[];
    infoSections: InfoSectionNonNullableFields[];
    directCategoriesInfo?: ProductCategoriesInfoNonNullableFields;
    allCategoriesInfo?: ProductCategoriesInfoNonNullableFields;
    directCategoryIdsInfo?: ProductCategoryIdsInfoNonNullableFields;
    basePriceRange?: PriceRangeNonNullableFields;
    salePriceRange?: PriceRangeNonNullableFields;
    costRange?: PriceRangeNonNullableFields;
    inventory?: InventoryNonNullableFields;
    productType: ProductType;
    breadcrumbsInfo?: BreadcrumbsInfoNonNullableFields;
    variantsInfo?: VariantsInfoNonNullableFields;
    subscriptionDetails?: SubscriptionDetailsNonNullableFields;
    flattenOptions: string[];
    flattenModifiers: string[];
    variantSummary?: VariantSummaryNonNullableFields;
    minVariantPriceInfo?: MinVariantPriceInfoNonNullableFields;
}
interface CreateProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface CommonItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface ProductNonNullableFields {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus;
    product?: ProductNonNullableFields;
}
interface BulkInventoryItemResultNonNullableFields {
    itemMetadata?: CommonItemMetadataNonNullableFields;
    item?: InventoryItemNonNullableFields;
}
interface CommonBulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkInventoryItemResultsNonNullableFields {
    results: BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
    error?: ApplicationErrorNonNullableFields;
}
interface CreateProductWithInventoryResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface UpdateProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface UpdateProductWithInventoryResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface WixCommonItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface CatalogV3BulkProductResultNonNullableFields {
    itemMetadata?: WixCommonItemMetadataNonNullableFields;
    item?: V3ProductNonNullableFields;
}
interface BulkCreateProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkProductResultsNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkCreateProductsWithInventoryResponseNonNullableFields {
    productResults?: BulkProductResultsNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface BulkUpdateProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkUpdateProductsWithInventoryResponseNonNullableFields {
    productResults?: BulkProductResultsNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface V3BulkUpdateProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3UpdateExtendedFieldsResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface BulkDeleteProductsResponseBulkProductResultNonNullableFields {
    itemMetadata?: WixCommonItemMetadataNonNullableFields;
}
interface V3BulkDeleteProductsResponseNonNullableFields {
    results: BulkDeleteProductsResponseBulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface V3BulkDeleteProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3GetProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface V3GetProductBySlugResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface ValueResultsValueAggregationResultNonNullableFields {
    value: string;
    count: number;
}
interface AggregationResultsValueResultsNonNullableFields {
    results: ValueResultsValueAggregationResultNonNullableFields[];
}
interface RangeResultsRangeAggregationResultNonNullableFields {
    count: number;
}
interface AggregationResultsRangeResultsNonNullableFields {
    results: RangeResultsRangeAggregationResultNonNullableFields[];
}
interface AggregationDataAggregationResultsScalarResultNonNullableFields {
    type: WixCommonScalarType;
    value: number;
}
interface AggregationResultsNestedAggregationResultsNonNullableFields {
    values?: AggregationResultsValueResultsNonNullableFields;
    ranges?: AggregationResultsRangeResultsNonNullableFields;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields;
    name: string;
    type: WixCommonAggregationType;
    fieldPath: string;
}
interface GroupByValueResultsNestedValueAggregationResultNonNullableFields {
    value: string;
    nestedResults?: AggregationResultsNestedAggregationResultsNonNullableFields;
}
interface AggregationResultsGroupByValueResultsNonNullableFields {
    results: GroupByValueResultsNestedValueAggregationResultNonNullableFields[];
}
interface DateHistogramResultsDateHistogramResultNonNullableFields {
    value: string;
    count: number;
}
interface AggregationResultsDateHistogramResultsNonNullableFields {
    results: DateHistogramResultsDateHistogramResultNonNullableFields[];
}
interface AggregationDataAggregationResultsNonNullableFields {
    values?: AggregationResultsValueResultsNonNullableFields;
    ranges?: AggregationResultsRangeResultsNonNullableFields;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields;
    groupedByValue?: AggregationResultsGroupByValueResultsNonNullableFields;
    dateHistogram?: AggregationResultsDateHistogramResultsNonNullableFields;
    name: string;
    type: WixCommonAggregationType;
    fieldPath: string;
}
interface CommonAggregationDataNonNullableFields {
    results: AggregationDataAggregationResultsNonNullableFields[];
}
interface V3SearchProductsResponseNonNullableFields {
    products: V3ProductNonNullableFields[];
    aggregationData?: CommonAggregationDataNonNullableFields;
}
interface V3QueryProductsResponseNonNullableFields {
    products: V3ProductNonNullableFields[];
}
interface V3CountProductsResponseNonNullableFields {
    count: number;
}
interface BulkUpdateProductVariantsByFilterResponseNonNullableFields {
    jobId: string;
}
interface BulkAdjustProductVariantsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3BulkAddInfoSectionsToProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkAddProductsToCategoriesByFilterResponseNonNullableFields {
    jobId: string;
}
interface BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields {
    jobId: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createProduct(): __PublicMethodMetaInfo<'POST', {}, CreateProductRequest, CreateProductRequest$1, CreateProductResponse & CreateProductResponseNonNullableFields, CreateProductResponse$1 & CreateProductResponseNonNullableFields$1>;
declare function createProductWithInventory(): __PublicMethodMetaInfo<'POST', {}, CreateProductWithInventoryRequest, CreateProductWithInventoryRequest$1, CreateProductWithInventoryResponse & CreateProductWithInventoryResponseNonNullableFields, CreateProductWithInventoryResponse$1 & CreateProductWithInventoryResponseNonNullableFields$1>;
declare function updateProduct(): __PublicMethodMetaInfo<'PATCH', {
    productId: string;
}, UpdateProductRequest, UpdateProductRequest$1, UpdateProductResponse & UpdateProductResponseNonNullableFields, UpdateProductResponse$1 & UpdateProductResponseNonNullableFields$1>;
declare function updateProductWithInventory(): __PublicMethodMetaInfo<'PATCH', {
    productId: string;
}, UpdateProductWithInventoryRequest, UpdateProductWithInventoryRequest$1, UpdateProductWithInventoryResponse & UpdateProductWithInventoryResponseNonNullableFields, UpdateProductWithInventoryResponse$1 & UpdateProductWithInventoryResponseNonNullableFields$1>;
declare function bulkCreateProducts(): __PublicMethodMetaInfo<'POST', {}, BulkCreateProductsRequest, BulkCreateProductsRequest$1, BulkCreateProductsResponse & BulkCreateProductsResponseNonNullableFields, BulkCreateProductsResponse$1 & BulkCreateProductsResponseNonNullableFields$1>;
declare function bulkCreateProductsWithInventory(): __PublicMethodMetaInfo<'POST', {}, BulkCreateProductsWithInventoryRequest, BulkCreateProductsWithInventoryRequest$1, BulkCreateProductsWithInventoryResponse & BulkCreateProductsWithInventoryResponseNonNullableFields, BulkCreateProductsWithInventoryResponse$1 & BulkCreateProductsWithInventoryResponseNonNullableFields$1>;
declare function bulkUpdateProducts(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateProductsRequest, BulkUpdateProductsRequest$1, BulkUpdateProductsResponse & BulkUpdateProductsResponseNonNullableFields, BulkUpdateProductsResponse$1 & BulkUpdateProductsResponseNonNullableFields$1>;
declare function bulkUpdateProductsWithInventory(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateProductsWithInventoryRequest, BulkUpdateProductsWithInventoryRequest$1, BulkUpdateProductsWithInventoryResponse & BulkUpdateProductsWithInventoryResponseNonNullableFields, BulkUpdateProductsWithInventoryResponse$1 & BulkUpdateProductsWithInventoryResponseNonNullableFields$1>;
declare function bulkUpdateProductsByFilter(): __PublicMethodMetaInfo<'POST', {}, V3BulkUpdateProductsByFilterRequest, V3BulkUpdateProductsByFilterRequest$1, V3BulkUpdateProductsByFilterResponse & V3BulkUpdateProductsByFilterResponseNonNullableFields, V3BulkUpdateProductsByFilterResponse$1 & V3BulkUpdateProductsByFilterResponseNonNullableFields$1>;
declare function updateExtendedFields(): __PublicMethodMetaInfo<'POST', {
    productId: string;
}, V3UpdateExtendedFieldsRequest, V3UpdateExtendedFieldsRequest$1, V3UpdateExtendedFieldsResponse & V3UpdateExtendedFieldsResponseNonNullableFields, V3UpdateExtendedFieldsResponse$1 & V3UpdateExtendedFieldsResponseNonNullableFields$1>;
declare function deleteProduct(): __PublicMethodMetaInfo<'DELETE', {
    productId: string;
}, V3DeleteProductRequest, V3DeleteProductRequest$1, V3DeleteProductResponse, V3DeleteProductResponse$1>;
declare function bulkDeleteProducts(): __PublicMethodMetaInfo<'POST', {}, V3BulkDeleteProductsRequest, V3BulkDeleteProductsRequest$1, V3BulkDeleteProductsResponse & V3BulkDeleteProductsResponseNonNullableFields, V3BulkDeleteProductsResponse$1 & V3BulkDeleteProductsResponseNonNullableFields$1>;
declare function bulkDeleteProductsByFilter(): __PublicMethodMetaInfo<'POST', {}, V3BulkDeleteProductsByFilterRequest, V3BulkDeleteProductsByFilterRequest$1, V3BulkDeleteProductsByFilterResponse & V3BulkDeleteProductsByFilterResponseNonNullableFields, V3BulkDeleteProductsByFilterResponse$1 & V3BulkDeleteProductsByFilterResponseNonNullableFields$1>;
declare function getProduct(): __PublicMethodMetaInfo<'GET', {
    productId: string;
}, V3GetProductRequest, V3GetProductRequest$1, V3GetProductResponse & V3GetProductResponseNonNullableFields, V3GetProductResponse$1 & V3GetProductResponseNonNullableFields$1>;
declare function getProductBySlug(): __PublicMethodMetaInfo<'GET', {
    slug: string;
}, V3GetProductBySlugRequest, V3GetProductBySlugRequest$1, V3GetProductBySlugResponse & V3GetProductBySlugResponseNonNullableFields, V3GetProductBySlugResponse$1 & V3GetProductBySlugResponseNonNullableFields$1>;
declare function searchProducts(): __PublicMethodMetaInfo<'POST', {}, V3SearchProductsRequest, V3SearchProductsRequest$1, V3SearchProductsResponse & V3SearchProductsResponseNonNullableFields, V3SearchProductsResponse$1 & V3SearchProductsResponseNonNullableFields$1>;
declare function queryProducts(): __PublicMethodMetaInfo<'POST', {}, V3QueryProductsRequest, V3QueryProductsRequest$1, V3QueryProductsResponse & V3QueryProductsResponseNonNullableFields, V3QueryProductsResponse$1 & V3QueryProductsResponseNonNullableFields$1>;
declare function countProducts(): __PublicMethodMetaInfo<'POST', {}, V3CountProductsRequest, V3CountProductsRequest$1, V3CountProductsResponse & V3CountProductsResponseNonNullableFields, V3CountProductsResponse$1 & V3CountProductsResponseNonNullableFields$1>;
declare function bulkUpdateProductVariantsByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateProductVariantsByFilterRequest, BulkUpdateProductVariantsByFilterRequest$1, BulkUpdateProductVariantsByFilterResponse & BulkUpdateProductVariantsByFilterResponseNonNullableFields, BulkUpdateProductVariantsByFilterResponse$1 & BulkUpdateProductVariantsByFilterResponseNonNullableFields$1>;
declare function bulkAdjustProductVariantsByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkAdjustProductVariantsByFilterRequest, BulkAdjustProductVariantsByFilterRequest$1, BulkAdjustProductVariantsByFilterResponse & BulkAdjustProductVariantsByFilterResponseNonNullableFields, BulkAdjustProductVariantsByFilterResponse$1 & BulkAdjustProductVariantsByFilterResponseNonNullableFields$1>;
declare function bulkAddInfoSectionsToProductsByFilter(): __PublicMethodMetaInfo<'POST', {}, V3BulkAddInfoSectionsToProductsByFilterRequest, V3BulkAddInfoSectionsToProductsByFilterRequest$1, V3BulkAddInfoSectionsToProductsByFilterResponse & V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields, V3BulkAddInfoSectionsToProductsByFilterResponse$1 & V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields$1>;
declare function bulkAddInfoSectionsToProducts(): __PublicMethodMetaInfo<'POST', {}, V3BulkAddInfoSectionsToProductsRequest, V3BulkAddInfoSectionsToProductsRequest$1, V3BulkAddInfoSectionsToProductsResponse & V3BulkAddInfoSectionsToProductsResponseNonNullableFields, V3BulkAddInfoSectionsToProductsResponse$1 & V3BulkAddInfoSectionsToProductsResponseNonNullableFields$1>;
declare function bulkRemoveInfoSectionsFromProductsByFilter(): __PublicMethodMetaInfo<'POST', {}, V3BulkRemoveInfoSectionsFromProductsByFilterRequest, V3BulkRemoveInfoSectionsFromProductsByFilterRequest$1, V3BulkRemoveInfoSectionsFromProductsByFilterResponse & V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields, V3BulkRemoveInfoSectionsFromProductsByFilterResponse$1 & V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields$1>;
declare function bulkRemoveInfoSectionsFromProducts(): __PublicMethodMetaInfo<'POST', {}, V3BulkRemoveInfoSectionsFromProductsRequest, V3BulkRemoveInfoSectionsFromProductsRequest$1, V3BulkRemoveInfoSectionsFromProductsResponse & V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields, V3BulkRemoveInfoSectionsFromProductsResponse$1 & V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields$1>;
declare function bulkAddProductsToCategoriesByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkAddProductsToCategoriesByFilterRequest, BulkAddProductsToCategoriesByFilterRequest$1, BulkAddProductsToCategoriesByFilterResponse & BulkAddProductsToCategoriesByFilterResponseNonNullableFields, BulkAddProductsToCategoriesByFilterResponse$1 & BulkAddProductsToCategoriesByFilterResponseNonNullableFields$1>;
declare function bulkRemoveProductsFromCategoriesByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkRemoveProductsFromCategoriesByFilterRequest, BulkRemoveProductsFromCategoriesByFilterRequest$1, BulkRemoveProductsFromCategoriesByFilterResponse & BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields, BulkRemoveProductsFromCategoriesByFilterResponse$1 & BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, bulkAddInfoSectionsToProducts, bulkAddInfoSectionsToProductsByFilter, bulkAddProductsToCategoriesByFilter, bulkAdjustProductVariantsByFilter, bulkCreateProducts, bulkCreateProductsWithInventory, bulkDeleteProducts, bulkDeleteProductsByFilter, bulkRemoveInfoSectionsFromProducts, bulkRemoveInfoSectionsFromProductsByFilter, bulkRemoveProductsFromCategoriesByFilter, bulkUpdateProductVariantsByFilter, bulkUpdateProducts, bulkUpdateProductsByFilter, bulkUpdateProductsWithInventory, countProducts, createProduct, createProductWithInventory, deleteProduct, getProduct, getProductBySlug, queryProducts, searchProducts, updateExtendedFields, updateProduct, updateProductWithInventory };
