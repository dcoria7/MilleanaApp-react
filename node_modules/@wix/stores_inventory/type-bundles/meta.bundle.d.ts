interface InventoryItemV2$1 {
    /** Inventory item ID. */
    id?: string | null;
    /**
     * Deprecated: use productId.
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /**
     * Product ID.
     * @readonly
     */
    productId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2$1[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventory’s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo$1;
}
interface InventoryVariantV2$1 {
    /** Variant ID. */
    variantId?: string;
    /** Whether the product is listed as in stock. */
    inStock?: boolean | null;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /**
     * Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level.
     * @readonly
     */
    availableForPreorder?: boolean;
}
interface PreorderInfo$1 {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
interface GetInventoryVariantsRequest$1 extends GetInventoryVariantsRequestIdOneOf$1 {
    /** Inventory item ID. */
    inventoryId: string;
    /**
     * Deprecated (use productID instead).
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
/** @oneof */
interface GetInventoryVariantsRequestIdOneOf$1 {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * Deprecated (use productID instead).
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface GetInventoryVariantsResponse$1 {
    /** Inventory item. */
    inventoryItem?: InventoryItemV2$1;
}
interface QueryInventoryRequest$1 {
    query?: Query$1;
}
interface Query$1 {
    paging?: Paging$1;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
interface Paging$1 {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface QueryInventoryResponse$1 {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2$1[];
    /** Display metadata. */
    metadata?: PagingMetadata$1;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata$1 {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface UpdateInventoryVariantsRequest$1 {
    /** Inventory item. */
    inventoryItem: InventoryItemV2$1;
}
interface UpdateInventoryVariantsResponse$1 {
}
interface DecrementInventoryRequest$1 {
    decrementData?: DecrementData$1[];
}
interface DecrementData$1 extends DecrementDataIdOneOf$1 {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * Deprecated: use productId.
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant ID. */
    variantId?: string;
    /** Number to decrement inventory by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the item's inventory was made as part of a purchase that includes preorder items.
     * If true and the item is available for preorder, we allow negative inventory.
     * If false and the item is not available for preorder, we allow regular buy flow (no negative inventory).
     */
    preorderRequest?: boolean;
}
/** @oneof */
interface DecrementDataIdOneOf$1 {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * Deprecated: use productId.
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface DecrementInventoryResponse$1 {
}
interface IncrementInventoryRequest$1 {
    incrementData?: IncrementData$1[];
}
interface IncrementData$1 extends IncrementDataIdOneOf$1 {
    /** Inventory item ID. */
    inventoryId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant ID. */
    variantId?: string;
    /** Number to increment inventory by. */
    incrementBy?: number;
}
/** @oneof */
interface IncrementDataIdOneOf$1 {
    /** Inventory item ID. */
    inventoryId?: string;
    /** Product ID. */
    productId?: string;
}
interface IncrementInventoryResponse$1 {
}
interface InventoryVariantV2NonNullableFields$1 {
    variantId: string;
    availableForPreorder: boolean;
}
interface PreorderInfoNonNullableFields$1 {
    enabled: boolean;
}
interface InventoryItemV2NonNullableFields$1 {
    variants: InventoryVariantV2NonNullableFields$1[];
    numericId: string;
    preorderInfo?: PreorderInfoNonNullableFields$1;
}
interface GetInventoryVariantsResponseNonNullableFields$1 {
    inventoryItem?: InventoryItemV2NonNullableFields$1;
}
interface PagingMetadataNonNullableFields$1 {
    items: number;
    offset: number;
}
interface QueryInventoryResponseNonNullableFields$1 {
    inventoryItems: InventoryItemV2NonNullableFields$1[];
    metadata?: PagingMetadataNonNullableFields$1;
    totalResults: number;
}

interface InventoryItemV2 {
    /** Inventory item ID. */
    _id?: string | null;
    /**
     * @internal
     * @internal
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /**
     * Product ID.
     * @readonly
     */
    productId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventory’s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
interface InventoryVariantV2 {
    /** Variant ID. */
    variantId?: string;
    /** Whether the product is listed as in stock. */
    inStock?: boolean | null;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /**
     * Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level.
     * @readonly
     */
    availableForPreorder?: boolean;
}
interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
interface GetInventoryVariantsRequest extends GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
/** @oneof */
interface GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface GetInventoryVariantsResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItemV2;
}
interface QueryInventoryRequest {
    /** Information about paging, filters, sorting. */
    query?: Query;
}
interface Query {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
interface Paging {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface QueryInventoryResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
    /** Display metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface UpdateInventoryVariantsRequest {
    /** Inventory item. */
    inventoryItem: InventoryItemV2;
}
interface UpdateInventoryVariantsResponse {
}
interface DecrementInventoryRequest {
    /** Item or product to decrement. */
    decrementData?: DecrementData[];
}
interface DecrementData extends DecrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant ID. */
    variantId?: string;
    /** Number to decrement inventory by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the item's inventory was made as part of a purchase that includes preorder items.
     * If true and the item is available for preorder, we allow negative inventory.
     * If false and the item is not available for preorder, we allow regular buy flow (no negative inventory).
     */
    preorderRequest?: boolean;
}
/** @oneof */
interface DecrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface DecrementInventoryResponse {
}
interface IncrementInventoryRequest {
    /** Item or product to increment. */
    incrementData?: IncrementData[];
}
interface IncrementData extends IncrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant ID. */
    variantId?: string;
    /** Number to increment inventory by. */
    incrementBy?: number;
}
/** @oneof */
interface IncrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /** Product ID. */
    productId?: string;
}
interface IncrementInventoryResponse {
}
interface InventoryVariantV2NonNullableFields {
    variantId: string;
    availableForPreorder: boolean;
}
interface PreorderInfoNonNullableFields {
    enabled: boolean;
}
interface InventoryItemV2NonNullableFields {
    variants: InventoryVariantV2NonNullableFields[];
    numericId: string;
    preorderInfo?: PreorderInfoNonNullableFields;
}
interface GetInventoryVariantsResponseNonNullableFields {
    inventoryItem?: InventoryItemV2NonNullableFields;
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
interface QueryInventoryResponseNonNullableFields {
    inventoryItems: InventoryItemV2NonNullableFields[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getInventoryVariants(): __PublicMethodMetaInfo<'POST', {
    inventoryId: string;
}, GetInventoryVariantsRequest, GetInventoryVariantsRequest$1, GetInventoryVariantsResponse & GetInventoryVariantsResponseNonNullableFields, GetInventoryVariantsResponse$1 & GetInventoryVariantsResponseNonNullableFields$1>;
declare function queryInventory(): __PublicMethodMetaInfo<'POST', {}, QueryInventoryRequest, QueryInventoryRequest$1, QueryInventoryResponse & QueryInventoryResponseNonNullableFields, QueryInventoryResponse$1 & QueryInventoryResponseNonNullableFields$1>;
declare function updateInventoryVariants(): __PublicMethodMetaInfo<'PATCH', {
    inventoryItemProductId: string;
}, UpdateInventoryVariantsRequest, UpdateInventoryVariantsRequest$1, UpdateInventoryVariantsResponse, UpdateInventoryVariantsResponse$1>;
declare function decrementInventory(): __PublicMethodMetaInfo<'POST', {}, DecrementInventoryRequest, DecrementInventoryRequest$1, DecrementInventoryResponse, DecrementInventoryResponse$1>;
declare function incrementInventory(): __PublicMethodMetaInfo<'POST', {}, IncrementInventoryRequest, IncrementInventoryRequest$1, IncrementInventoryResponse, IncrementInventoryResponse$1>;

export { type __PublicMethodMetaInfo, decrementInventory, getInventoryVariants, incrementInventory, queryInventory, updateInventoryVariants };
