/**
 * Customizations include options and modifiers which can later be applied to products.
 * Options are designed to add variations to a product, where modifiers add a customizable change to the product but without creating another variant.
 */
interface Customization$1 extends CustomizationCustomizationSettingsOneOf$1 {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings$1;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings$1;
    /**
     * Customization ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`). */
    name?: string;
    /** Customization type. */
    customizationType?: CustomizationType$1;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     */
    customizationRenderType?: CustomizationRenderType$1;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
/** @oneof */
interface CustomizationCustomizationSettingsOneOf$1 {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings$1;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings$1;
}
declare enum CustomizationType$1 {
    UNKNOWN_CUSTOMIZATION_TYPE = "UNKNOWN_CUSTOMIZATION_TYPE",
    PRODUCT_OPTION = "PRODUCT_OPTION",
    MODIFIER = "MODIFIER"
}
declare enum CustomizationRenderType$1 {
    UNKNOWN_CUSTOMIZATION_RENDER_TYPE = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE",
    FREE_TEXT = "FREE_TEXT",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface FreeTextSettings$1 {
    /** Minimum text character length. */
    minCharCount?: number;
    /** Maximum text character length. */
    maxCharCount?: number;
    /** Default amount added to a product's price when this choice is assigned to a modifier. */
    defaultAddedPrice?: string | null;
    /** Title to display to customer for their free-text input. */
    title?: string;
}
interface ChoicesSettings$1 {
    /** List of choices. */
    choices?: Choice$1[];
}
interface Choice$1 extends ChoiceValueOneOf$1 {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /**
     * Choice ID.
     * @readonly
     */
    id?: string;
    /**
     * Choice type.
     *
     * > **Notes:**
     * > + For `customizationRenderType: SWATCH_CHOICES`, the supported `choiceType` values are: `ONE_COLOR`, `MULTIPLE_COLORS`, or `IMAGE`.
     * > + For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`, the supported `choiceType` value is: `CHOICE_TEXT`.
     */
    choiceType?: ChoiceType$1;
    /**
     * A read-only key generated based on choice name. Used for eCommerce integration.
     * @readonly
     */
    key?: string | null;
    /** Choice name. */
    name?: string;
    /** Default amount added to a product's price when this customization is assigned to a modifier. */
    defaultAddedPrice?: string | null;
    /**
     * Number of products this choice is assigned to .
     * @readonly
     */
    assignedProductsCount?: number;
}
/** @oneof */
interface ChoiceValueOneOf$1 {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
declare enum ChoiceType$1 {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    CHOICE_TEXT = "CHOICE_TEXT",
    ONE_COLOR = "ONE_COLOR",
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    IMAGE = "IMAGE"
}
interface CreateCustomizationRequest$1 {
    /** Customization to create. */
    customization: Customization$1;
}
interface CreateCustomizationResponse$1 {
    /** Created customization. */
    customization?: Customization$1;
}
interface GetCustomizationRequest$1 {
    /** Customization ID. */
    customizationId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
declare enum RequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetCustomizationResponse$1 {
    /** Customization. */
    customization?: Customization$1;
}
interface UpdateCustomizationRequest$1 {
    /** Customization to update. */
    customization: Customization$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface UpdateCustomizationResponse$1 {
    /** Updated customization. */
    customization?: Customization$1;
}
interface DeleteCustomizationRequest$1 {
    /** Customization ID. */
    customizationId: string;
}
interface DeleteCustomizationResponse$1 {
}
interface QueryCustomizationsRequest$1 {
    /** Query options. */
    query?: CursorQuery$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCustomizationsResponse$1 {
    /** List of customizations. */
    customizations?: Customization$1[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateCustomizationsRequest$1 {
    /** Customizations to create. */
    customizations: Customization$1[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateCustomizationsResponse$1 {
    /** Customizations created by bulk action. */
    results?: BulkCustomizationResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkCustomizationResult$1 {
    /** Bulk action metadata for customization. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Full customization entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    customization?: Customization$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface AddCustomizationChoicesRequest$1 {
    /** Customization ID. */
    customizationId: string;
    /** Choices to add. */
    choices: Choice$1[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface AddCustomizationChoicesResponse$1 {
    /** Updated customization. */
    customization?: Customization$1;
}
interface SetCustomizationChoicesRequest$1 {
    /** Customization ID. */
    customizationId: string;
    /** Choices to set. */
    choices: Choice$1[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface SetCustomizationChoicesResponse$1 {
    /** Updated customization. */
    customization?: Customization$1;
}
interface RemoveCustomizationChoicesRequest$1 {
    /** Customization ID. */
    customizationId: string;
    /** IDs of choices to remove. */
    choiceIds: string[];
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface RemoveCustomizationChoicesResponse$1 {
    /** Updated customization. */
    customization?: Customization$1;
}
interface BulkAddCustomizationChoicesRequest$1 {
    /** List of customization IDs and choices. */
    customizationsChoices: CustomizationChoices$1[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface CustomizationChoices$1 {
    /** Customization ID. */
    customizationId?: string;
    /** Choices to add. */
    choices?: Choice$1[];
}
interface BulkAddCustomizationChoicesResponse$1 {
    /** Customizations updated by bulk action. */
    results?: BulkCustomizationResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUpdateCustomizationsRequest$1 {
    /** List of customizations to update. */
    customizations: MaskedCustomization$1[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface MaskedCustomization$1 {
    /** Customization to update. */
    customization?: Customization$1;
}
interface BulkUpdateCustomizationsResponse$1 {
    /** Customizations updated by bulk action. */
    results?: BulkCustomizationResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface FreeTextSettingsNonNullableFields$1 {
    minCharCount: number;
    maxCharCount: number;
    title: string;
}
interface MultipleColorsNonNullableFields$1 {
    colorCodes: string[];
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface ChoiceNonNullableFields$1 {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields$1;
    image?: ImageNonNullableFields;
    id: string;
    choiceType: ChoiceType$1;
    name: string;
    assignedProductsCount: number;
}
interface ChoicesSettingsNonNullableFields$1 {
    choices: ChoiceNonNullableFields$1[];
}
interface CustomizationNonNullableFields$1 {
    freeTextInput?: FreeTextSettingsNonNullableFields$1;
    choicesSettings?: ChoicesSettingsNonNullableFields$1;
    name: string;
    customizationType: CustomizationType$1;
    customizationRenderType: CustomizationRenderType$1;
}
interface CreateCustomizationResponseNonNullableFields$1 {
    customization?: CustomizationNonNullableFields$1;
}
interface GetCustomizationResponseNonNullableFields$1 {
    customization?: CustomizationNonNullableFields$1;
}
interface UpdateCustomizationResponseNonNullableFields$1 {
    customization?: CustomizationNonNullableFields$1;
}
interface QueryCustomizationsResponseNonNullableFields$1 {
    customizations: CustomizationNonNullableFields$1[];
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkCustomizationResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    customization?: CustomizationNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateCustomizationsResponseNonNullableFields$1 {
    results: BulkCustomizationResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface AddCustomizationChoicesResponseNonNullableFields$1 {
    customization?: CustomizationNonNullableFields$1;
}
interface SetCustomizationChoicesResponseNonNullableFields$1 {
    customization?: CustomizationNonNullableFields$1;
}
interface RemoveCustomizationChoicesResponseNonNullableFields$1 {
    customization?: CustomizationNonNullableFields$1;
}
interface BulkAddCustomizationChoicesResponseNonNullableFields$1 {
    results: BulkCustomizationResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateCustomizationsResponseNonNullableFields$1 {
    results: BulkCustomizationResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

/**
 * Customizations include options and modifiers which can later be applied to products.
 * Options are designed to add variations to a product, where modifiers add a customizable change to the product but without creating another variant.
 */
interface Customization extends CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
    /**
     * Customization ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`). */
    name?: string;
    /** Customization type. */
    customizationType?: CustomizationType;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     */
    customizationRenderType?: CustomizationRenderType;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
/** @oneof */
interface CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
}
declare enum CustomizationType {
    UNKNOWN_CUSTOMIZATION_TYPE = "UNKNOWN_CUSTOMIZATION_TYPE",
    PRODUCT_OPTION = "PRODUCT_OPTION",
    MODIFIER = "MODIFIER"
}
declare enum CustomizationRenderType {
    UNKNOWN_CUSTOMIZATION_RENDER_TYPE = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE",
    FREE_TEXT = "FREE_TEXT",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface FreeTextSettings {
    /** Minimum text character length. */
    minCharCount?: number;
    /** Maximum text character length. */
    maxCharCount?: number;
    /** Default amount added to a product's price when this choice is assigned to a modifier. */
    defaultAddedPrice?: string | null;
    /** Title to display to customer for their free-text input. */
    title?: string;
}
interface ChoicesSettings {
    /** List of choices. */
    choices?: Choice[];
}
interface Choice extends ChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /**
     * Choice ID.
     * @readonly
     */
    _id?: string;
    /**
     * Choice type.
     *
     * > **Notes:**
     * > + For `customizationRenderType: SWATCH_CHOICES`, the supported `choiceType` values are: `ONE_COLOR`, `MULTIPLE_COLORS`, or `IMAGE`.
     * > + For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`, the supported `choiceType` value is: `CHOICE_TEXT`.
     */
    choiceType?: ChoiceType;
    /**
     * A read-only key generated based on choice name. Used for eCommerce integration.
     * @readonly
     */
    key?: string | null;
    /** Choice name. */
    name?: string;
    /** Default amount added to a product's price when this customization is assigned to a modifier. */
    defaultAddedPrice?: string | null;
    /**
     * Number of products this choice is assigned to .
     * @readonly
     */
    assignedProductsCount?: number;
}
/** @oneof */
interface ChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    CHOICE_TEXT = "CHOICE_TEXT",
    ONE_COLOR = "ONE_COLOR",
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    IMAGE = "IMAGE"
}
interface CreateCustomizationRequest {
    /** Customization to create. */
    customization: Customization;
}
interface CreateCustomizationResponse {
    /** Created customization. */
    customization?: Customization;
}
interface GetCustomizationRequest {
    /** Customization ID. */
    customizationId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetCustomizationResponse {
    /** Customization. */
    customization?: Customization;
}
interface UpdateCustomizationRequest {
    /** Customization to update. */
    customization: Customization;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateCustomizationResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface DeleteCustomizationRequest {
    /** Customization ID. */
    customizationId: string;
}
interface DeleteCustomizationResponse {
}
interface QueryCustomizationsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCustomizationsResponse {
    /** List of customizations. */
    customizations?: Customization[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateCustomizationsRequest {
    /** Customizations to create. */
    customizations: Customization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateCustomizationsResponse {
    /** Customizations created by bulk action. */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkCustomizationResult {
    /** Bulk action metadata for customization. */
    itemMetadata?: ItemMetadata;
    /**
     * Full customization entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    customization?: Customization;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface AddCustomizationChoicesRequest {
    /** Customization ID. */
    customizationId: string;
    /** Choices to add. */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface AddCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface SetCustomizationChoicesRequest {
    /** Customization ID. */
    customizationId: string;
    /** Choices to set. */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface SetCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface RemoveCustomizationChoicesRequest {
    /** Customization ID. */
    customizationId: string;
    /** IDs of choices to remove. */
    choiceIds: string[];
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface RemoveCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface BulkAddCustomizationChoicesRequest {
    /** List of customization IDs and choices. */
    customizationsChoices: CustomizationChoices[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CustomizationChoices {
    /** Customization ID. */
    customizationId?: string;
    /** Choices to add. */
    choices?: Choice[];
}
interface BulkAddCustomizationChoicesResponse {
    /** Customizations updated by bulk action. */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateCustomizationsRequest {
    /** List of customizations to update. */
    customizations: MaskedCustomization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface MaskedCustomization {
    /** Customization to update. */
    customization?: Customization;
}
interface BulkUpdateCustomizationsResponse {
    /** Customizations updated by bulk action. */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface FreeTextSettingsNonNullableFields {
    minCharCount: number;
    maxCharCount: number;
    title: string;
}
interface MultipleColorsNonNullableFields {
    colorCodes: string[];
}
interface ChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image: string;
    _id: string;
    choiceType: ChoiceType;
    name: string;
    assignedProductsCount: number;
}
interface ChoicesSettingsNonNullableFields {
    choices: ChoiceNonNullableFields[];
}
interface CustomizationNonNullableFields {
    freeTextInput?: FreeTextSettingsNonNullableFields;
    choicesSettings?: ChoicesSettingsNonNullableFields;
    name: string;
    customizationType: CustomizationType;
    customizationRenderType: CustomizationRenderType;
}
interface CreateCustomizationResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface GetCustomizationResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface UpdateCustomizationResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface QueryCustomizationsResponseNonNullableFields {
    customizations: CustomizationNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkCustomizationResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    customization?: CustomizationNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateCustomizationsResponseNonNullableFields {
    results: BulkCustomizationResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface AddCustomizationChoicesResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface SetCustomizationChoicesResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface RemoveCustomizationChoicesResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface BulkAddCustomizationChoicesResponseNonNullableFields {
    results: BulkCustomizationResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateCustomizationsResponseNonNullableFields {
    results: BulkCustomizationResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCustomization(): __PublicMethodMetaInfo<'POST', {}, CreateCustomizationRequest, CreateCustomizationRequest$1, CreateCustomizationResponse & CreateCustomizationResponseNonNullableFields, CreateCustomizationResponse$1 & CreateCustomizationResponseNonNullableFields$1>;
declare function getCustomization(): __PublicMethodMetaInfo<'GET', {
    customizationId: string;
}, GetCustomizationRequest, GetCustomizationRequest$1, GetCustomizationResponse & GetCustomizationResponseNonNullableFields, GetCustomizationResponse$1 & GetCustomizationResponseNonNullableFields$1>;
declare function updateCustomization(): __PublicMethodMetaInfo<'PATCH', {
    customizationId: string;
}, UpdateCustomizationRequest, UpdateCustomizationRequest$1, UpdateCustomizationResponse & UpdateCustomizationResponseNonNullableFields, UpdateCustomizationResponse$1 & UpdateCustomizationResponseNonNullableFields$1>;
declare function deleteCustomization(): __PublicMethodMetaInfo<'DELETE', {
    customizationId: string;
}, DeleteCustomizationRequest, DeleteCustomizationRequest$1, DeleteCustomizationResponse, DeleteCustomizationResponse$1>;
declare function queryCustomizations(): __PublicMethodMetaInfo<'POST', {}, QueryCustomizationsRequest, QueryCustomizationsRequest$1, QueryCustomizationsResponse & QueryCustomizationsResponseNonNullableFields, QueryCustomizationsResponse$1 & QueryCustomizationsResponseNonNullableFields$1>;
declare function bulkCreateCustomizations(): __PublicMethodMetaInfo<'POST', {}, BulkCreateCustomizationsRequest, BulkCreateCustomizationsRequest$1, BulkCreateCustomizationsResponse & BulkCreateCustomizationsResponseNonNullableFields, BulkCreateCustomizationsResponse$1 & BulkCreateCustomizationsResponseNonNullableFields$1>;
declare function addCustomizationChoices(): __PublicMethodMetaInfo<'POST', {
    customizationId: string;
}, AddCustomizationChoicesRequest, AddCustomizationChoicesRequest$1, AddCustomizationChoicesResponse & AddCustomizationChoicesResponseNonNullableFields, AddCustomizationChoicesResponse$1 & AddCustomizationChoicesResponseNonNullableFields$1>;
declare function setCustomizationChoices(): __PublicMethodMetaInfo<'POST', {
    customizationId: string;
}, SetCustomizationChoicesRequest, SetCustomizationChoicesRequest$1, SetCustomizationChoicesResponse & SetCustomizationChoicesResponseNonNullableFields, SetCustomizationChoicesResponse$1 & SetCustomizationChoicesResponseNonNullableFields$1>;
declare function removeCustomizationChoices(): __PublicMethodMetaInfo<'POST', {
    customizationId: string;
}, RemoveCustomizationChoicesRequest, RemoveCustomizationChoicesRequest$1, RemoveCustomizationChoicesResponse & RemoveCustomizationChoicesResponseNonNullableFields, RemoveCustomizationChoicesResponse$1 & RemoveCustomizationChoicesResponseNonNullableFields$1>;
declare function bulkAddCustomizationChoices(): __PublicMethodMetaInfo<'POST', {}, BulkAddCustomizationChoicesRequest, BulkAddCustomizationChoicesRequest$1, BulkAddCustomizationChoicesResponse & BulkAddCustomizationChoicesResponseNonNullableFields, BulkAddCustomizationChoicesResponse$1 & BulkAddCustomizationChoicesResponseNonNullableFields$1>;
declare function bulkUpdateCustomizations(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateCustomizationsRequest, BulkUpdateCustomizationsRequest$1, BulkUpdateCustomizationsResponse & BulkUpdateCustomizationsResponseNonNullableFields, BulkUpdateCustomizationsResponse$1 & BulkUpdateCustomizationsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, addCustomizationChoices, bulkAddCustomizationChoices, bulkCreateCustomizations, bulkUpdateCustomizations, createCustomization, deleteCustomization, getCustomization, queryCustomizations, removeCustomizationChoices, setCustomizationChoices, updateCustomization };
