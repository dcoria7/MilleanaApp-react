type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A ? 1 : 2) extends
	(<G>() => G extends B ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;

interface WishlistData {
    /** GUID unique to this list for this site */
    _id?: string | null;
    /** Member id the list belongs to */
    ownerId?: string;
    /** List of items in the list. Not necessarily the full list (can depends on request data) */
    items?: WishlistItem[];
    /** Total count of items in the list */
    totalCount?: number;
}
interface WishlistItem {
    /** Unique identifier for an item of this type and origin */
    _id?: string;
    /**
     * The data the item was save to the list
     * @readonly
     */
    dateAdded?: Date | null;
    /** The type of the item. For example "product" */
    type?: string;
    /** The origin of the item. Should be the scope the item type is related to. For example "wixstores" */
    origin?: string;
}
interface ItemsAddedToWishlist {
    /** GUID unique to this list for its site */
    _id?: string | null;
    /** Member id the list belongs to */
    ownerId?: string;
    /** List of items that were added to wishlist */
    items?: WishlistItem[];
}
interface ItemsRemovedFromWishlist {
    /** GUID unique to this list for its site */
    _id?: string | null;
    /** Member id the list belongs to */
    ownerId?: string;
    /** List of items that were removed from wishlist */
    items?: WishlistItem[];
}
interface GetWishlistRequest {
    /** List length limit. Default is 100 */
    limit?: number | null;
    /** List starting index offset. Default is 0 */
    offset?: number | null;
    /** Filter requested list by specific kinds of items */
    kind?: WishlistItemKind[];
}
interface WishlistItemKind {
    /** The type of the item. For example "product" */
    type?: string;
    /** The origin of the item. Should be the scope the item type is related to. For example "wixstores" */
    origin?: string;
}
interface GetWishlistResponse {
    /** Object containing requested list data */
    wishlist?: WishlistData;
}
interface AddToWishlistRequest {
    /** List of items to add to list */
    items?: WishlistItem[];
}
interface AddToWishlistResponse {
}
interface RemoveFromWishlistRequest {
    /** List of items to remove from list */
    items?: WishlistItem[];
}
interface RemoveFromWishlistResponse {
}
interface GetWishlistByIdRequest {
    /** Unique identifier representing requested list */
    _id: string;
    /** List length limit. Default is 100 */
    limit?: number | null;
    /** List starting index offset. Default is 0 */
    offset?: number | null;
    /** Filter requested list by specific kinds of items */
    kind?: WishlistItemKind[];
}
interface GetWishlistByIdResponse {
    /** Object containing requested list data */
    wishlist?: WishlistData;
}
interface GetWishlistsRequest {
    /** List length limit. Default is 100 */
    limit?: number | null;
    /** List starting index offset. Default is 0 */
    offset?: number | null;
}
interface GetWishlistsResponse {
    /** List result of requested wishlists */
    wishlists?: WishlistData[];
}
interface MessageEnvelope$a {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$a;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$a extends IdentificationDataIdOneOf$a {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$a;
}
/** @oneof */
interface IdentificationDataIdOneOf$a {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$a {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface WishlistItemNonNullableFields {
    _id: string;
    type: string;
    origin: string;
}
interface WishlistDataNonNullableFields {
    ownerId: string;
    items: WishlistItemNonNullableFields[];
    totalCount: number;
}
interface GetWishlistByIdResponseNonNullableFields {
    wishlist?: WishlistDataNonNullableFields;
}
interface GetWishlistByIdOptions {
    /** List length limit. Default is 100 */
    limit?: number | null;
    /** List starting index offset. Default is 0 */
    offset?: number | null;
    /** Filter requested list by specific kinds of items */
    kind?: WishlistItemKind[];
}

declare function getWishlistById$1(httpClient: HttpClient): GetWishlistByIdSignature;
interface GetWishlistByIdSignature {
    /**
     * Get wishlist by id
     * @param - Unique identifier representing requested list
     * @returns Object containing requested list data
     */
    (_id: string, options?: GetWishlistByIdOptions | undefined): Promise<WishlistData & WishlistDataNonNullableFields>;
}

declare const getWishlistById: MaybeContext<BuildRESTFunction<typeof getWishlistById$1> & typeof getWishlistById$1>;

type index_d$c_AddToWishlistRequest = AddToWishlistRequest;
type index_d$c_AddToWishlistResponse = AddToWishlistResponse;
type index_d$c_GetWishlistByIdOptions = GetWishlistByIdOptions;
type index_d$c_GetWishlistByIdRequest = GetWishlistByIdRequest;
type index_d$c_GetWishlistByIdResponse = GetWishlistByIdResponse;
type index_d$c_GetWishlistByIdResponseNonNullableFields = GetWishlistByIdResponseNonNullableFields;
type index_d$c_GetWishlistRequest = GetWishlistRequest;
type index_d$c_GetWishlistResponse = GetWishlistResponse;
type index_d$c_GetWishlistsRequest = GetWishlistsRequest;
type index_d$c_GetWishlistsResponse = GetWishlistsResponse;
type index_d$c_ItemsAddedToWishlist = ItemsAddedToWishlist;
type index_d$c_ItemsRemovedFromWishlist = ItemsRemovedFromWishlist;
type index_d$c_RemoveFromWishlistRequest = RemoveFromWishlistRequest;
type index_d$c_RemoveFromWishlistResponse = RemoveFromWishlistResponse;
type index_d$c_WishlistData = WishlistData;
type index_d$c_WishlistDataNonNullableFields = WishlistDataNonNullableFields;
type index_d$c_WishlistItem = WishlistItem;
type index_d$c_WishlistItemKind = WishlistItemKind;
declare const index_d$c_getWishlistById: typeof getWishlistById;
declare namespace index_d$c {
  export { type index_d$c_AddToWishlistRequest as AddToWishlistRequest, type index_d$c_AddToWishlistResponse as AddToWishlistResponse, type index_d$c_GetWishlistByIdOptions as GetWishlistByIdOptions, type index_d$c_GetWishlistByIdRequest as GetWishlistByIdRequest, type index_d$c_GetWishlistByIdResponse as GetWishlistByIdResponse, type index_d$c_GetWishlistByIdResponseNonNullableFields as GetWishlistByIdResponseNonNullableFields, type index_d$c_GetWishlistRequest as GetWishlistRequest, type index_d$c_GetWishlistResponse as GetWishlistResponse, type index_d$c_GetWishlistsRequest as GetWishlistsRequest, type index_d$c_GetWishlistsResponse as GetWishlistsResponse, type IdentificationData$a as IdentificationData, type IdentificationDataIdOneOf$a as IdentificationDataIdOneOf, type index_d$c_ItemsAddedToWishlist as ItemsAddedToWishlist, type index_d$c_ItemsRemovedFromWishlist as ItemsRemovedFromWishlist, type MessageEnvelope$a as MessageEnvelope, type index_d$c_RemoveFromWishlistRequest as RemoveFromWishlistRequest, type index_d$c_RemoveFromWishlistResponse as RemoveFromWishlistResponse, WebhookIdentityType$a as WebhookIdentityType, type index_d$c_WishlistData as WishlistData, type index_d$c_WishlistDataNonNullableFields as WishlistDataNonNullableFields, type index_d$c_WishlistItem as WishlistItem, type index_d$c_WishlistItemKind as WishlistItemKind, index_d$c_getWishlistById as getWishlistById };
}

interface Collection$1 {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media$3;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface Media$3 {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem$1;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem$1[];
}
interface MediaItem$1 extends MediaItemItemOneOf$1 {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize$1;
    /** Video data (URL, size). */
    video?: MediaItemVideo$1;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize$1;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType$1;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    _id?: string;
}
/** @oneof */
interface MediaItemItemOneOf$1 {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize$1;
    /** Video data (URL, size). */
    video?: MediaItemVideo$1;
}
interface MediaItemUrlAndSize$1 {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType$1 {
    unspecified_media_item_type = "unspecified_media_item_type",
    image = "image",
    video = "video",
    audio = "audio",
    document = "document",
    zip = "zip"
}
interface MediaItemVideo$1 {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize$1[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema$2 {
    /** SEO tag information. */
    tags?: Tag$2[];
    /** SEO general settings. */
    settings?: Settings$3;
}
interface Keyword$2 {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag$2 {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings$3 {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword$2[];
}
interface QueryCollectionsRequest$1 {
    query?: PlatformQuery$1;
}
interface PlatformQuery$1 extends PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$3;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$8;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$8[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$3;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$8;
}
interface Sorting$8 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$8;
}
declare enum SortOrder$8 {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$3 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$8 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCollectionsResponse$1 {
    collections?: Collection$1[];
    metadata?: PlatformPagingMetadata$1;
}
interface PlatformPagingMetadata$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$8;
}
interface Cursors$8 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface GetCollectionRequest$1 {
    /** Requested collection ID. */
    _id: string;
}
interface GetCollectionResponse$1 {
    collection?: Collection$1;
}
interface GetCollectionBySlugRequest$1 {
    /** Slug of the collection to retrieve. */
    slug: string;
}
interface GetCollectionBySlugResponse$1 {
    /** The requested collection. */
    collection?: Collection$1;
}
interface MediaItemUrlAndSizeNonNullableFields$1 {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields$1 {
    files: MediaItemUrlAndSizeNonNullableFields$1[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields$1 {
    image?: MediaItemUrlAndSizeNonNullableFields$1;
    video?: MediaItemVideoNonNullableFields$1;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields$1;
    mediaType: MediaItemType$1;
    title: string;
    _id: string;
}
interface MediaNonNullableFields$2 {
    mainMedia?: MediaItemNonNullableFields$1;
    items: MediaItemNonNullableFields$1[];
}
interface TagNonNullableFields$2 {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields$2 {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields$3 {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields$2[];
}
interface SeoSchemaNonNullableFields$2 {
    tags: TagNonNullableFields$2[];
    settings?: SettingsNonNullableFields$3;
}
interface CollectionNonNullableFields$1 {
    media?: MediaNonNullableFields$2;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields$2;
}
interface QueryCollectionsResponseNonNullableFields {
    collections: CollectionNonNullableFields$1[];
}
interface GetCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields$1;
}
interface GetCollectionBySlugResponseNonNullableFields$1 {
    collection?: CollectionNonNullableFields$1;
}
interface QueryOffsetResult$1 {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface CollectionsQueryResult extends QueryOffsetResult$1 {
    items: Collection$1[];
    query: CollectionsQueryBuilder;
    next: () => Promise<CollectionsQueryResult>;
    prev: () => Promise<CollectionsQueryResult>;
}
interface CollectionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => CollectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'name', value: any[]) => CollectionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'name', value: any) => CollectionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'name', value: boolean) => CollectionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'name'>) => CollectionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'name'>) => CollectionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => CollectionsQueryBuilder;
    /** @param skip - Number of items to skip in the query results before returning the results.
     * @documentationMaturity preview
     */
    skip: (skip: number) => CollectionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<CollectionsQueryResult>;
}

declare function queryCollections$1(httpClient: HttpClient): QueryCollectionsSignature;
interface QueryCollectionsSignature {
    /**
     * Retrieves a list of up to 100 collections, given the provided paging, sorting and filtering.
     * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
     */
    (): CollectionsQueryBuilder;
}
declare function getCollection$1(httpClient: HttpClient): GetCollectionSignature;
interface GetCollectionSignature {
    /**
     * Retrieves a collection with the provided ID.
     * @param - Requested collection ID.
     */
    (_id: string): Promise<Collection$1 & CollectionNonNullableFields$1>;
}
declare function getCollectionBySlug$3(httpClient: HttpClient): GetCollectionBySlugSignature$1;
interface GetCollectionBySlugSignature$1 {
    /**
     * Retrieves a collection with the provided slug.
     * @param - Slug of the collection to retrieve.
     */
    (slug: string): Promise<GetCollectionBySlugResponse$1 & GetCollectionBySlugResponseNonNullableFields$1>;
}

declare const queryCollections: MaybeContext<BuildRESTFunction<typeof queryCollections$1> & typeof queryCollections$1>;
declare const getCollection: MaybeContext<BuildRESTFunction<typeof getCollection$1> & typeof getCollection$1>;
declare const getCollectionBySlug$2: MaybeContext<BuildRESTFunction<typeof getCollectionBySlug$3> & typeof getCollectionBySlug$3>;

type index_d$b_CollectionsQueryBuilder = CollectionsQueryBuilder;
type index_d$b_CollectionsQueryResult = CollectionsQueryResult;
type index_d$b_GetCollectionResponseNonNullableFields = GetCollectionResponseNonNullableFields;
type index_d$b_QueryCollectionsResponseNonNullableFields = QueryCollectionsResponseNonNullableFields;
declare const index_d$b_getCollection: typeof getCollection;
declare const index_d$b_queryCollections: typeof queryCollections;
declare namespace index_d$b {
  export { type Collection$1 as Collection, type CollectionNonNullableFields$1 as CollectionNonNullableFields, type index_d$b_CollectionsQueryBuilder as CollectionsQueryBuilder, type index_d$b_CollectionsQueryResult as CollectionsQueryResult, type CursorPaging$8 as CursorPaging, type Cursors$8 as Cursors, type GetCollectionBySlugRequest$1 as GetCollectionBySlugRequest, type GetCollectionBySlugResponse$1 as GetCollectionBySlugResponse, type GetCollectionBySlugResponseNonNullableFields$1 as GetCollectionBySlugResponseNonNullableFields, type GetCollectionRequest$1 as GetCollectionRequest, type GetCollectionResponse$1 as GetCollectionResponse, type index_d$b_GetCollectionResponseNonNullableFields as GetCollectionResponseNonNullableFields, type Keyword$2 as Keyword, type Media$3 as Media, type MediaItem$1 as MediaItem, type MediaItemItemOneOf$1 as MediaItemItemOneOf, MediaItemType$1 as MediaItemType, type MediaItemUrlAndSize$1 as MediaItemUrlAndSize, type MediaItemVideo$1 as MediaItemVideo, type PlatformPaging$3 as PlatformPaging, type PlatformPagingMetadata$1 as PlatformPagingMetadata, type PlatformQuery$1 as PlatformQuery, type PlatformQueryPagingMethodOneOf$1 as PlatformQueryPagingMethodOneOf, type QueryCollectionsRequest$1 as QueryCollectionsRequest, type QueryCollectionsResponse$1 as QueryCollectionsResponse, type index_d$b_QueryCollectionsResponseNonNullableFields as QueryCollectionsResponseNonNullableFields, type SeoSchema$2 as SeoSchema, type Settings$3 as Settings, SortOrder$8 as SortOrder, type Sorting$8 as Sorting, type Tag$2 as Tag, index_d$b_getCollection as getCollection, getCollectionBySlug$2 as getCollectionBySlug, index_d$b_queryCollections as queryCollections };
}

interface Product$2 {
    /**
     * Product ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string;
    /**
     * Product name.
     *
     * Min: 1 character
     * Max: 80 characters
     */
    name?: string | null;
    /** A friendly URL name (generated automatically by the catalog when a product is created), can be updated. */
    slug?: string;
    /** Whether the product is visible to site visitors. */
    visible?: boolean | null;
    /** Currently, only creating physical products ( `"productType": "physical"` ) is supported via the API. */
    productType?: ProductType$1;
    /** Product description. */
    description?: string | null;
    /** Stock keeping unit. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, SKUs will be set per variant, and this field will be empty. */
    sku?: string | null;
    /** Product weight. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, weight will be set per variant, and this field will be empty. */
    weight?: number | null;
    /**
     * Product weight range. The minimum and maximum weights of all the variants.
     * @readonly
     */
    weightRange?: NumericPropertyRange;
    /**
     * Product inventory status (in future this will be writable via Inventory API).
     * @readonly
     */
    stock?: Stock;
    /**
     * Deprecated (use `priceData` instead).
     * @readonly
     * @deprecated
     */
    price?: PriceData;
    /** Price data. */
    priceData?: PriceData;
    /**
     * Price data, converted to the currency specified in request header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /**
     * Product price range. The minimum and maximum prices of all the variants.
     * @readonly
     */
    priceRange?: NumericPropertyRange;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /**
     * Product cost range. The minimum and maximum costs of all the variants.
     * @readonly
     */
    costRange?: NumericPropertyRange;
    /** Price per unit data. */
    pricePerUnitData?: PricePerUnitData;
    /** Additional text that the store owner can assign to the product (e.g. shipping details, refund policy, etc.). */
    additionalInfoSections?: AdditionalInfoSection[];
    /**
     * Deprecated (use `ribbon` instead).
     * @readonly
     * @deprecated
     */
    ribbons?: Ribbon$2[];
    /**
     * Media items (images, videos etc) associated with this product (writable via [Add Product Media](https://dev.wix.com/api/rest/wix-stores/catalog/products/add-product-media) endpoint).
     * @readonly
     */
    media?: Media$2;
    /**
     * Text box for the customer to add a message to their order (e.g., customization request). Currently writable only from the UI.
     * @readonly
     */
    customTextFields?: CustomTextField[];
    /** Whether variants are being managed for this product - enables unique SKU, price and weight per variant. Also affects inventory data. Once set to `true`, can be reset to `false` only if no variants exist. You cannot set `manageVariants` to `true` if more than 300 variants are defined. */
    manageVariants?: boolean | null;
    /** Options for this product. */
    productOptions?: ProductOption[];
    /**
     * Product page URL for this product (generated automatically by the server).
     * @readonly
     */
    productPageUrl?: PageUrl;
    /**
     * Product’s unique numeric ID (assigned in ascending order).
     * Primarily used for sorting and filtering when crawling all products.
     * @readonly
     */
    numericId?: string;
    /**
     * Inventory item ID - ID referencing the inventory system.
     * @readonly
     */
    inventoryItemId?: string;
    /** Discount deducted from the product's original price. */
    discount?: Discount$1;
    /**
     * A list of all collection IDs that this product is included in (writable via the Catalog > Collection APIs).
     * @readonly
     */
    collectionIds?: string[];
    /**
     * Product variants, will be provided if the the request was sent with the `includeVariants: true`.
     *
     * Max: 1,000 variants
     * @readonly
     */
    variants?: Variant$1[];
    /**
     * Date and time the product was last updated.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Custom SEO data for the product. */
    seoData?: SeoSchema$1;
    /** Product ribbon. Used to highlight relevant information about a product. For example, "Sale", "New Arrival", "Sold Out". */
    ribbon?: string | null;
    /** Product brand. Including a brand name can help improve site and product [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores). */
    brand?: string | null;
}
declare enum ProductType$1 {
    unspecified_product_type = "unspecified_product_type",
    physical = "physical",
    digital = "digital"
}
interface NumericPropertyRange {
    /** Minimum value. */
    minValue?: number;
    /** Maximum value. */
    maxValue?: number;
}
interface Stock {
    /** Whether inventory is being tracked */
    trackInventory?: boolean;
    /** Quantity currently left in inventory */
    quantity?: number | null;
    /**
     * Whether the product is currently in stock (relevant only when tracking manually)
     * Deprecated (use `inventoryStatus` instead)
     * @deprecated
     */
    inStock?: boolean;
    /**
     * The current status of the inventory
     * + `IN_STOCK` - In stock
     * + `OUT_OF_STOCK` - Not in stock
     * + `PARTIALLY_OUT_OF_STOCK` - Some of the variants are not in stock
     */
    inventoryStatus?: InventoryStatus$1;
}
declare enum InventoryStatus$1 {
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
interface PriceData {
    /**
     * Product price currency
     * @readonly
     */
    currency?: string;
    /** Product price */
    price?: number | null;
    /**
     * Discounted product price (if no discounted price is set, the product price is returned)
     * @readonly
     */
    discountedPrice?: number;
    /**
     * The product price and discounted price, formatted with the currency
     * @readonly
     */
    formatted?: FormattedPrice;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: number | null;
}
interface FormattedPrice {
    /** Product price formatted with the currency */
    price?: string;
    /** Discounted product price formatted with the currency (if no discounted price is set, the product formatted price is returned) */
    discountedPrice?: string;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: string | null;
}
interface CostAndProfitData {
    /** Item cost. */
    itemCost?: number | null;
    /**
     * Item cost formatted with currency symbol.
     * @readonly
     */
    formattedItemCost?: string;
    /**
     * Profit. Calculated by reducing `cost` from `discounted_price`.
     * @readonly
     */
    profit?: number;
    /**
     * Profit formatted with currency symbol.
     * @readonly
     */
    formattedProfit?: string;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discounted_price`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
interface PricePerUnitData {
    /** Total quantity */
    totalQuantity?: number;
    /** Total measurement unit */
    totalMeasurementUnit?: MeasurementUnit$1;
    /** Base quantity */
    baseQuantity?: number;
    /** Base measurement unit */
    baseMeasurementUnit?: MeasurementUnit$1;
}
declare enum MeasurementUnit$1 {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
interface AdditionalInfoSection {
    /** Product info section title */
    title?: string;
    /** Product info section description */
    description?: string;
}
interface Ribbon$2 {
    /** Ribbon text */
    text?: string;
}
interface Media$2 {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    _id?: string;
}
/** @oneof */
interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
interface MediaItemUrlAndSize {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    image = "image",
    video = "video",
    audio = "audio",
    document = "document",
    zip = "zip"
}
interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface CustomTextField {
    /** Text box title */
    title?: string;
    /** Text box input max length */
    maxLength?: number;
    /** Whether this text box is mandatory */
    mandatory?: boolean;
}
interface ProductOption {
    /**
     * Option type - color or other(drop down)
     * @readonly
     */
    optionType?: OptionType;
    /** Option name. */
    name?: string;
    /** Choices available for this option. */
    choices?: Choice$1[];
}
declare enum OptionType {
    unspecified_option_type = "unspecified_option_type",
    drop_down = "drop_down",
    color = "color"
}
interface Choice$1 {
    /** Choice value. */
    value?: string;
    /** Choice description. */
    description?: string;
    /**
     * Media items (images, videos) associated with this choice
     * @readonly
     */
    media?: Media$2;
    /**
     * Based on the customer’s choices, which (if any) variants that include the selected choices are in stock
     * @readonly
     */
    inStock?: boolean;
    /**
     * Based on the customer’s choices, which (if any) variants that include the selected choices are visible
     * @readonly
     */
    visible?: boolean;
}
interface PageUrl {
    /** Base URL. For premium sites, this is the domain. For free sites, this is the site URL (e.g mysite.wixsite.com/mysite). */
    base?: string;
    /** Path to the product page - e.g /product-page/a-product. */
    path?: string;
}
interface Discount$1 {
    /**
     * Discount type:
     * + `"AMOUNT"`
     * + `"PERCENT"`
     */
    type?: DiscountType$2;
    /** Discount value */
    value?: number;
}
declare enum DiscountType$2 {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    NONE = "NONE",
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface Variant$1 {
    /** Requested Variant ID */
    _id?: string;
    /** Specific choices within a selection, as option-choice key-value pairs */
    choices?: Record<string, string>;
    variant?: VariantDataWithNoStock;
    /**
     * Variant inventory status.
     * @readonly
     */
    stock?: VariantStock;
}
interface VariantDataWithNoStock {
    /** Variant price. */
    priceData?: PriceData;
    /**
     * Variant price data, converted to currency requested in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /** Variant weight. */
    weight?: number;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface VariantStock {
    /** Whether inventory is being tracked. */
    trackQuantity?: boolean;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema$1 {
    /** SEO tag information. */
    tags?: Tag$1[];
    /** SEO general settings. */
    settings?: Settings$2;
}
interface Keyword$1 {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag$1 {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings$2 {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword$1[];
}
interface SecuredMedia$1 {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType$1;
}
declare enum FileType$1 {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface CreateProductRequest$1 {
    /** Product information. */
    product?: Product$2;
}
interface CreateProductResponse$1 {
    product?: Product$2;
}
interface CreateProductPlatformizedRequest {
    /** Product information. */
    product?: Product$2;
}
interface CreateProductPlatformizedResponse {
    product?: Product$2;
}
interface CreateDigitalProductRequest {
    /** Product information. */
    product?: Product$2;
}
interface CreateDigitalProductResponse {
    /** Created product. */
    product?: Product$2;
}
interface UpdateProductRequest$1 {
    product: Product$2;
}
interface UpdateProductResponse$1 {
    product?: Product$2;
}
interface UpdateProductPlatformizedRequest {
    product?: Product$2;
}
interface UpdateProductPlatformizedResponse {
    product?: Product$2;
}
interface DeleteProductRequest$1 {
    /** ID of the product to delete. */
    _id: string;
}
interface DeleteProductResponse$1 {
}
interface DeleteProductPlatformizedRequest {
    /** ID of the product to delete. */
    _id?: string;
}
interface DeleteProductPlatformizedResponse {
}
interface BulkDeleteProductsRequest$1 {
    /** IDs of the products to be deleted. */
    ids?: string[];
}
interface BulkDeleteProductsResponse$1 {
}
interface UpdateVariantsRequest {
    /** ID of the product with managed variants. */
    _id: string;
    /** Variant info to update. */
    variants?: VariantOverride[];
}
interface VariantOverride {
    /** The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice). You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (Not relevant when passing variant IDs) */
    choices?: Record<string, string>;
    /**
     * List of variant IDs
     * (Not relevant when passing choices)
     */
    variantIds?: string[];
    /** Variant price */
    price?: number | null;
    /** Variant cost of goods */
    cost?: number | null;
    /** Variant weight */
    weight?: number | null;
    /** Variant SKU (stock keeping unit) */
    sku?: string | null;
    /** Whether the variant is visible to  customers */
    visible?: boolean | null;
}
interface UpdateVariantsResponse {
    /** List of the product's variants. */
    variants?: Variant$1[];
}
interface ResetAllVariantDataRequest {
    /** Product ID. */
    _id: string;
}
interface ResetAllVariantDataResponse {
}
interface AddProductsToCollectionRequest {
    /** Collection ID. */
    _id: string;
    /** IDs of the products to add to the collection, separated by commas. */
    productIds?: string[];
}
interface AddProductsToCollectionResponse {
}
interface RemoveProductsFromCollectionRequest {
    /** ID of the collection from which to remove products. */
    _id: string;
    /** IDs of the products to remove from the collection. */
    productIds: string[];
}
interface RemoveProductsFromCollectionResponse {
}
interface AddProductMediaRequest {
    /** Product ID. */
    _id: string;
    /** Sources of media items already uploaded to the Wix site. */
    media?: MediaDataForWrite[];
}
interface MediaDataForWrite extends MediaDataForWriteMediaSourceOneOf {
    /** Media ID. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
    /** Assign this media item to a specific product choice. Note that you may set media items for choices under only one option (e.g., if Colors blue, green, and red have media items, Sizes S, M, and L can't have media items assigned to them). You may clear existing media from choices with the [Remove Product Media From Choices](#removeproductmediafromchoices). */
    choice?: OptionAndChoice;
}
/** @oneof */
interface MediaDataForWriteMediaSourceOneOf {
    /** Media ID. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
}
interface OptionAndChoice {
    /** Option to add the media to. */
    option?: string;
    /** Choice to add the media to. */
    choice?: string;
}
interface AddProductMediaResponse {
}
interface RemoveProductMediaRequest {
    /** Product ID. */
    _id: string;
    /** List of media IDs to remove. Pass an empty array to delete all media items for the product. */
    mediaIds?: string[];
}
interface RemoveProductMediaResponse {
}
interface AddProductMediaToChoicesRequest {
    /** Product ID. */
    _id: string;
    /** Product media items and the choices to add the media to. */
    media?: MediaAssignmentToChoice[];
}
interface MediaAssignmentToChoice {
    /** Option name. */
    option?: string;
    /** Choice name. */
    choice?: string;
    /** Media IDs (available via the Query Product endpoint). */
    mediaIds?: string[];
}
interface AddProductMediaToChoicesResponse {
}
interface RemoveProductMediaFromChoicesRequest {
    /** Product ID from whose choices to remove media items. */
    _id: string;
    /** Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product. */
    media?: MediaAssignmentToChoice[];
}
interface RemoveProductMediaFromChoicesResponse {
}
interface DeleteProductOptionsRequest {
    /** ID of the product with options to delete. */
    _id: string;
}
interface DeleteProductOptionsResponse {
}
interface SetCustomFieldsRequest {
    /** Product ID. */
    _id?: string;
    /** Custom field that will be added, if a custom field with the same name already exists, the value of the custom field will be overridden. */
    customFields?: Record<string, any>;
}
interface SetCustomFieldsResponse {
}
interface RemoveCustomFieldsRequest {
    /** Product ID. */
    _id?: string;
    /** Custom fields to be removed (by name). */
    names?: string[];
}
interface RemoveCustomFieldsResponse {
}
interface RemoveProductBrandRequest {
    /** Product ID. */
    _id: string;
}
interface RemoveProductBrandResponse {
}
interface BulkSetCustomFieldsRequest {
    /** Filter string. */
    filter?: string | null;
    /** Custom field that will be added, if a custom field with same name already exists, the value of the custom field will be overridden. */
    customFields?: Record<string, any>;
}
interface BulkSetCustomFieldsResponse {
}
interface BulkRemoveCustomFieldsRequest {
    /** Filter string. */
    filter?: string | null;
    /** Custom fields names. */
    names?: string[];
}
interface BulkRemoveCustomFieldsResponse {
}
interface CreateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media$2;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface CreateCollectionResponse {
    /** Collection. */
    collection?: Collection;
}
interface UpdateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
interface UpdateCollectionResponse {
    /** Updated collection. */
    collection?: Collection;
}
interface DeleteCollectionRequest {
    /** ID of the collection to delete. */
    _id: string;
}
interface DeleteCollectionResponse {
}
interface RemoveProductRibbonRequest {
    /** Product ID. */
    _id: string;
}
interface RemoveProductRibbonResponse {
}
interface BulkUpdateProductsRequest$1 {
    /** Product IDs. */
    ids: string[];
    /** Field to update. */
    set?: SetValue;
}
interface SetValue extends SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
/** @oneof */
interface SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
interface BulkUpdateProductsResponse$1 {
    /** Bulk action results. */
    results?: BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$6;
}
interface BulkProductResult$1 {
    /** Item metadata. */
    itemMetadata?: ItemMetadata$6;
}
interface ItemMetadata$6 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$6;
}
interface ApplicationError$6 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$6 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateProductsByFilterSyncRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/stores/stores-catalog/filter-and-sort). */
    filter?: Record<string, any> | null;
    /** The field to update. */
    set?: SetValue;
}
interface BulkUpdateProductsByFilterSyncResponse {
    /** Items updated by bulk action. */
    results?: BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$6;
}
interface AllowedProductsCountLimitExceededErrorData {
    /** Total number of products */
    totalCount?: number;
}
interface BulkAdjustProductPropertiesRequest {
    /** Product IDs. */
    ids: string[];
    /** Numerical property to adjust. */
    adjust?: AdjustValue$1;
}
interface AdjustValue$1 extends AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
/** @oneof */
interface AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
interface PropertyAdjustmentData extends PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /** Adjust by amount. */
    amount?: number;
}
/** @oneof */
interface PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /** Adjust by amount. */
    amount?: number;
}
interface PercentageData {
    /**
     * If `true`, result will be rounded to the nearest whole number.
     * If `false`, result will be rounded to 2 places after the decimal point.
     */
    roundToInt?: boolean;
    /**
     * Percentage value, as a whole number (integer) between `-100` and `1000`.
     *
     * For example:
     * + Pass `100` to increase value by 100% (multiply original value by 2).
     * + Pass `1000` to increase value by 1000% (multiply original value by 10).
     * + Pass `-50` to decrease value by 50% (original value is halved).
     */
    rate?: number;
}
interface BulkAdjustProductPropertiesResponse {
    /** Bulk action results. */
    results?: BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$6;
}
interface BulkAdjustProductPropertiesByFilterSyncRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/stores/stores-catalog/filter-and-sort). */
    filter?: Record<string, any> | null;
    /** Numerical property to adjust. */
    adjust?: AdjustValue$1;
}
interface BulkAdjustProductPropertiesByFilterSyncResponse {
    /** Items updated by bulk action. */
    results?: BulkProductResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$6;
}
interface ReCloneStoreRequest {
    /** Description of value */
    metasiteId?: string | null;
    originalMetasiteId?: string | null;
}
interface ReCloneStoreResponse {
}
interface V1CreateProductPlatformizedRequest {
    /** Product information. */
    product?: Product$2;
}
interface V1CreateProductPlatformizedResponse {
    product?: Product$2;
}
interface V1UpdateProductPlatformizedRequest {
    product?: Product$2;
}
interface V1UpdateProductPlatformizedResponse {
    product?: Product$2;
}
interface V1DeleteProductPlatformizedRequest {
    /** ID of the product to delete. */
    _id?: string;
}
interface V1DeleteProductPlatformizedResponse {
}
interface ProductCreated {
    /** Product ID (generated automatically by the catalog). */
    productId?: string;
    /** Product name. */
    name?: string;
    /** Product price. */
    price?: PriceData;
    /** Whether the product is visible to customers. */
    visible?: boolean;
    /** Media items (images, videos, etc.) associated with this product. */
    media?: Media$2;
    /** Product stock keeping unit (SKU). If variants are being managed, this will be empty. */
    sku?: string;
    /** Product page URL for this product (generated automatically by the server). */
    productPageUrl?: PageUrl;
    /** Product brand. */
    brand?: string | null;
    /** Cost and profit data */
    costAndProfitData?: CostAndProfitData;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
    /** Event slug. A human readable identifier of the event. */
    slug?: string;
}
declare enum Version$1 {
    V1_CATALOG = "V1_CATALOG",
    V3_CATALOG = "V3_CATALOG"
}
interface ProductChanged {
    /** Product ID. */
    productId?: string;
    /** List of product fields that were changed. */
    changedFields?: string[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface ProductDeleted {
    /** ID of the product that was deleted. */
    productId?: string;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface CollectionCreated {
    /** Collection ID (generated automatically by the catalog). */
    collection_Id?: string;
    /** Collection name. */
    name?: string;
    /** Media items (images, videos, etc.) associated with this collection. */
    media?: Media$2;
    /** Collection slug */
    slug?: string;
    /** Collection visible status */
    visible?: boolean;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface CollectionChanged {
    /** Collection ID (generated automatically by the catalog). */
    collection_Id?: string;
    /** List of collection fields that were changed. */
    changedFields?: string[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface CollectionDeleted {
    /** ID of the collection that was deleted. */
    collection_Id?: string;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface VariantsChanged {
    /** Product ID. */
    productId?: string;
    /** List of variants that were changed. */
    variants?: VariantChanged[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface VariantChanged {
    /** Variant ID. */
    variantId?: string;
    choices?: Record<string, string>;
    /** List of variant fields that were changed. */
    changedFields?: string[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version$1;
}
interface QueryProductsRequest$1 {
    query?: Query$1;
    /** Whether variants should be included in the response. */
    includeVariants?: boolean;
    /** Whether hidden products should be included in the response. Requires permissions to manage products. */
    includeHiddenProducts?: boolean;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface Query$1 {
    paging?: Paging$2;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
interface Paging$2 {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface QueryProductsResponse$1 {
    products?: Product$2[];
    metadata?: PagingMetadata$4;
    totalResults?: number;
}
interface PagingMetadata$4 {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface QueryProductsPlatformizedRequest {
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$2;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$7;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$7[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging$2;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging$7;
}
interface Sorting$7 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$7;
}
declare enum SortOrder$7 {
    ASC = "ASC",
    DESC = "DESC"
}
interface PlatformPaging$2 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging$7 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryProductsPlatformizedResponse {
    products?: Product$2[];
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$7;
}
interface Cursors$7 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface QueryProductsWithBigPageLimitRequest {
    query?: QueryWithBigPageLimit;
    /** Whether variants should be included in the response. */
    includeVariants?: boolean;
    /** Whether hidden products should be included in the response. Requires permissions to manage products. */
    includeHiddenProducts?: boolean;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface QueryWithBigPageLimit {
    paging?: PagingWithBigLimit;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
interface PagingWithBigLimit {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface GetProductsRequest {
    /** Requested product IDs. */
    ids?: string[];
}
interface GetProductsResponse {
    products?: Product$2[];
}
interface GetProductRequest$1 {
    /** Requested product ID. */
    _id: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface GetProductResponse$1 {
    /** Requested product data. */
    product?: Product$2;
}
interface GetProductPlatformizedRequest {
    /** Requested product ID. */
    _id?: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface GetProductPlatformizedResponse {
    /** Requested product data. */
    product?: Product$2;
}
interface QueryCollectionsRequest {
    /** Query options. */
    query?: Query$1;
    /** Whether number of products should be included in the response. */
    includeNumberOfProducts?: boolean;
    /** Wether to include collection description in the response. When `false` is passed, `collection.description` will return null. */
    includeDescription?: boolean;
}
interface QueryCollectionsResponse {
    /** List of collections. */
    collections?: Collection[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadata$4;
    /** Total number of results returned. */
    totalResults?: number;
}
interface QueryCollectionsPlatformizedRequest {
    query?: PlatformQuery;
}
interface QueryCollectionsPlatformizedResponse {
    collections?: Collection[];
    metadata?: PlatformPagingMetadata;
}
interface GetCollectionRequest {
    /** Requested collection ID. */
    _id?: string;
    /**
     * Whether to return the `collection.numberOfProducts` field in the response.
     * Defaults to `false`, in which case the value of `collection.numberOfProducts` will be `0`.
     */
    includeNumberOfProducts?: boolean;
}
interface GetCollectionResponse {
    /** The requested collection. */
    collection?: Collection;
}
interface GetCollectionBySlugRequest {
    /** Slug of the collection to retrieve. */
    slug: string;
}
interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}
interface ProductOptionsAvailabilityRequest {
    /** Requested product ID. */
    _id: string;
    /** Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`. */
    options?: Record<string, string>;
}
interface ProductOptionsAvailabilityResponse {
    /** Variant information, given that all the choices were provided. */
    selectedVariant?: VariantData;
    /** Information about media items (images, videos, etc.) associated with this choice. */
    media?: Media$2;
    /** Options information (color, size, etc.) for this product, with the inventory and visibility fields updated based on the provided choices. */
    productOptions?: ProductOption[];
    /** Whether all the selected choices result in a visible, in-stock variant. */
    availableForPurchase?: boolean;
}
interface VariantData {
    /** Variant price. */
    price?: PriceData;
    /**
     * Variant price data converted to currency provided in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Variant weight. */
    weight?: number | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Quantity currently in inventory (relevant only when tracking by inventory). */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface QueryProductVariantsRequest {
    /** Requested product ID. */
    _id: string;
    /**
     * The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice).
     * You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (not relevant when passing variant IDs).
     */
    choices?: Record<string, string>;
    /** List of variant IDs (not relevant when passing choices). */
    variantIds?: string[];
    paging?: Paging$2;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface QueryProductVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: Variant$1[];
    metadata?: PagingMetadata$4;
    totalResults?: number;
}
interface QueryStoreVariantsRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface QueryStoreVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: StoreVariant[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface StoreVariant {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen: {productId}.{variantId}. */
    _id?: string;
    /** Variant ID. */
    variantId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant name. */
    variantName?: string;
    /** Product name. */
    productName?: string;
    /** Whether the variant is managed or represents a product. */
    managedVariant?: boolean;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Variant inventory status. */
    stock?: VariantStock;
    /** The selected options of this variant. For example, `{"Color": "Blue", "Size": "Large"}`. */
    choices?: Record<string, string>;
    /** Collections that include this variant. */
    collectionIds?: string[];
    /**
     * Media items (images, videos) associated with this variant.
     * @readonly
     */
    media?: PlatformMedia;
    /** Preorder information. */
    preorderInfo?: PreorderInfo$3;
}
interface PlatformMedia extends PlatformMediaMediaOneOf {
    image?: string;
    video?: string;
}
/** @oneof */
interface PlatformMediaMediaOneOf {
    image?: string;
    video?: string;
}
interface VideoResolution$1 {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
interface PreorderInfo$3 {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
interface QueryStoreVariantsWithBigLimitRequest {
    /** Query options. */
    query?: UnlimitedPlatformQuery;
}
/**
 * Don't use it unless you have to and know what you do. Prefer PlatformQuery other than this.
 * It doesn't have max validation for limit but we still MUST have it so implement required validation in your code.
 */
interface UnlimitedPlatformQuery extends UnlimitedPlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: UnlimitedPlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: UnlimitedPlatformCursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting$7[];
}
/** @oneof */
interface UnlimitedPlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: UnlimitedPlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: UnlimitedPlatformCursorPaging;
}
/**
 * Don't use it unless you have to and know what you do. Prefer PlatformPaging or wix.common.Paging other than this.
 * It doesn't have max validation for limit but we still MUST have it so implement required validation in your code.
 */
interface UnlimitedPlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
/**
 * Don't use it unless you have to and know what you do. Prefer PlatformCursorPaging or wix.common.CursorPaging other than this.
 * It doesn't have max validation for limit but we still MUST have it so implement required validation in your code.
 */
interface UnlimitedPlatformCursorPaging {
    /**
     * The number of items to load.
     * Cursor token returned in the query response. To be used on the next query request, but not the first query request.
     */
    limit?: number | null;
    /** Cursor returned in last query response. Should not be provided on first page request */
    cursor?: string | null;
}
interface GetStoreVariantRequest {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`. */
    _id: string;
}
interface GetStoreVariantResponse {
    /** The requested store variant. */
    variant?: StoreVariant;
}
interface QueryCustomFieldsRequest {
    /** Requested product ID. */
    _id?: string;
    /** Requested field names. */
    names?: string[];
}
interface QueryCustomFieldsResponse {
    customFields?: Record<string, any>;
}
interface BulkQueryCustomFieldsRequest {
    /** Filter string. */
    query?: Query$1;
    /** Requested field names. */
    names?: string[];
}
interface BulkQueryCustomFieldsResponse {
    /** ProductId to Custom Fields Map packed in container. */
    productIdToCustomFields?: Record<string, CustomFieldsContainer>;
    metadata?: PagingMetadata$4;
    totalResults?: number;
}
interface CustomFieldsContainer {
    customFields?: Record<string, any>;
}
interface AggregateProductsRequest {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation?: Record<string, any> | null;
    /** Whether hidden products should be considered. Requires permissions to manage products. */
    includeHiddenProducts?: boolean;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface AggregateProductsResponse {
    aggregates?: Record<string, any> | null;
}
interface MessageEnvelope$9 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$9;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$9 extends IdentificationDataIdOneOf$9 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$9;
}
/** @oneof */
interface IdentificationDataIdOneOf$9 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$9 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface NumericPropertyRangeNonNullableFields {
    minValue: number;
    maxValue: number;
}
interface StockNonNullableFields {
    trackInventory: boolean;
    inStock: boolean;
    inventoryStatus: InventoryStatus$1;
}
interface FormattedPriceNonNullableFields {
    price: string;
    discountedPrice: string;
}
interface PriceDataNonNullableFields {
    currency: string;
    discountedPrice: number;
    formatted?: FormattedPriceNonNullableFields;
}
interface CostAndProfitDataNonNullableFields {
    formattedItemCost: string;
    profit: number;
    formattedProfit: string;
    profitMargin: number;
}
interface PricePerUnitDataNonNullableFields {
    totalQuantity: number;
    totalMeasurementUnit: MeasurementUnit$1;
    baseQuantity: number;
    baseMeasurementUnit: MeasurementUnit$1;
}
interface AdditionalInfoSectionNonNullableFields {
    title: string;
    description: string;
}
interface RibbonNonNullableFields$1 {
    text: string;
}
interface MediaItemUrlAndSizeNonNullableFields {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields {
    files: MediaItemUrlAndSizeNonNullableFields[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields {
    image?: MediaItemUrlAndSizeNonNullableFields;
    video?: MediaItemVideoNonNullableFields;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields;
    mediaType: MediaItemType;
    title: string;
    _id: string;
}
interface MediaNonNullableFields$1 {
    mainMedia?: MediaItemNonNullableFields;
    items: MediaItemNonNullableFields[];
}
interface CustomTextFieldNonNullableFields {
    title: string;
    maxLength: number;
    mandatory: boolean;
}
interface ChoiceNonNullableFields$1 {
    value: string;
    description: string;
    media?: MediaNonNullableFields$1;
    inStock: boolean;
    visible: boolean;
}
interface ProductOptionNonNullableFields {
    optionType: OptionType;
    name: string;
    choices: ChoiceNonNullableFields$1[];
}
interface PageUrlNonNullableFields {
    base: string;
    path: string;
}
interface DiscountNonNullableFields$1 {
    type: DiscountType$2;
    value: number;
}
interface VariantDataWithNoStockNonNullableFields {
    priceData?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    costAndProfitData?: CostAndProfitDataNonNullableFields;
    weight: number;
    sku: string;
    visible: boolean;
}
interface VariantStockNonNullableFields {
    trackQuantity: boolean;
    inStock: boolean;
}
interface VariantNonNullableFields$1 {
    _id: string;
    variant?: VariantDataWithNoStockNonNullableFields;
    stock?: VariantStockNonNullableFields;
}
interface TagNonNullableFields$1 {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields$1 {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields$2 {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields$1[];
}
interface SeoSchemaNonNullableFields$1 {
    tags: TagNonNullableFields$1[];
    settings?: SettingsNonNullableFields$2;
}
interface SecuredMediaNonNullableFields$1 {
    _id: string;
    fileName: string;
    fileType: FileType$1;
}
interface ProductNonNullableFields$2 {
    _id: string;
    slug: string;
    productType: ProductType$1;
    weightRange?: NumericPropertyRangeNonNullableFields;
    stock?: StockNonNullableFields;
    price?: PriceDataNonNullableFields;
    priceData?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    priceRange?: NumericPropertyRangeNonNullableFields;
    costAndProfitData?: CostAndProfitDataNonNullableFields;
    costRange?: NumericPropertyRangeNonNullableFields;
    pricePerUnitData?: PricePerUnitDataNonNullableFields;
    additionalInfoSections: AdditionalInfoSectionNonNullableFields[];
    ribbons: RibbonNonNullableFields$1[];
    media?: MediaNonNullableFields$1;
    customTextFields: CustomTextFieldNonNullableFields[];
    productOptions: ProductOptionNonNullableFields[];
    productPageUrl?: PageUrlNonNullableFields;
    numericId: string;
    inventoryItemId: string;
    discount?: DiscountNonNullableFields$1;
    collectionIds: string[];
    variants: VariantNonNullableFields$1[];
    seoData?: SeoSchemaNonNullableFields$1;
    exportProductId: string;
    digitalFile?: SecuredMediaNonNullableFields$1;
}
interface CreateProductResponseNonNullableFields$1 {
    product?: ProductNonNullableFields$2;
}
interface UpdateProductResponseNonNullableFields$1 {
    product?: ProductNonNullableFields$2;
}
interface UpdateVariantsResponseNonNullableFields {
    variants: VariantNonNullableFields$1[];
}
interface CollectionNonNullableFields {
    media?: MediaNonNullableFields$1;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields$1;
}
interface CreateCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface UpdateCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface ApplicationErrorNonNullableFields$6 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$5 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$6;
}
interface BulkProductResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$5;
}
interface BulkActionMetadataNonNullableFields$5 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkUpdateProductsResponseNonNullableFields$1 {
    results: BulkProductResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$5;
}
interface BulkAdjustProductPropertiesResponseNonNullableFields {
    results: BulkProductResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$5;
}
interface QueryProductsPlatformizedResponseNonNullableFields {
    products: ProductNonNullableFields$2[];
}
interface GetProductResponseNonNullableFields {
    product?: ProductNonNullableFields$2;
}
interface GetCollectionBySlugResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface VariantDataNonNullableFields {
    price?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    sku: string;
    inStock: boolean;
    visible: boolean;
    variantId: string;
}
interface ProductOptionsAvailabilityResponseNonNullableFields {
    selectedVariant?: VariantDataNonNullableFields;
    media?: MediaNonNullableFields$1;
    productOptions: ProductOptionNonNullableFields[];
    availableForPurchase: boolean;
    managedProduct: boolean;
}
interface PagingMetadataNonNullableFields$2 {
    items: number;
    offset: number;
}
interface QueryProductVariantsResponseNonNullableFields {
    variants: VariantNonNullableFields$1[];
    metadata?: PagingMetadataNonNullableFields$2;
    totalResults: number;
}
interface PlatformMediaNonNullableFields {
    image: string;
    video: string;
}
interface PreorderInfoNonNullableFields$1 {
    enabled: boolean;
}
interface StoreVariantNonNullableFields {
    _id: string;
    variantId: string;
    productId: string;
    variantName: string;
    productName: string;
    managedVariant: boolean;
    sku: string;
    stock?: VariantStockNonNullableFields;
    collectionIds: string[];
    media?: PlatformMediaNonNullableFields;
    preorderInfo?: PreorderInfoNonNullableFields$1;
}
interface QueryStoreVariantsResponseNonNullableFields {
    variants: StoreVariantNonNullableFields[];
}
interface GetStoreVariantResponseNonNullableFields {
    variant?: StoreVariantNonNullableFields;
}
interface BaseEventMetadata$7 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$9;
}
interface ProductCreatedEnvelope$1 {
    data: ProductCreated;
    metadata: BaseEventMetadata$7;
}
interface ProductChangedEnvelope {
    data: ProductChanged;
    metadata: BaseEventMetadata$7;
}
interface ProductDeletedEnvelope$1 {
    data: ProductDeleted;
    metadata: BaseEventMetadata$7;
}
interface ProductCollectionCreatedEnvelope {
    data: CollectionCreated;
    metadata: BaseEventMetadata$7;
}
interface ProductCollectionChangedEnvelope {
    data: CollectionChanged;
    metadata: BaseEventMetadata$7;
}
interface ProductCollectionDeletedEnvelope {
    data: CollectionDeleted;
    metadata: BaseEventMetadata$7;
}
interface ProductVariantsChangedEnvelope {
    data: VariantsChanged;
    metadata: BaseEventMetadata$7;
}
interface UpdateProduct$1 {
    /**
     * Product ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string;
    /**
     * Product name.
     *
     * Min: 1 character
     * Max: 80 characters
     */
    name?: string | null;
    /** A friendly URL name (generated automatically by the catalog when a product is created), can be updated. */
    slug?: string;
    /** Whether the product is visible to site visitors. */
    visible?: boolean | null;
    /** Currently, only creating physical products ( `"productType": "physical"` ) is supported via the API. */
    productType?: ProductType$1;
    /** Product description. */
    description?: string | null;
    /** Stock keeping unit. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, SKUs will be set per variant, and this field will be empty. */
    sku?: string | null;
    /** Product weight. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, weight will be set per variant, and this field will be empty. */
    weight?: number | null;
    /**
     * Product weight range. The minimum and maximum weights of all the variants.
     * @readonly
     */
    weightRange?: NumericPropertyRange;
    /**
     * Product inventory status (in future this will be writable via Inventory API).
     * @readonly
     */
    stock?: Stock;
    /**
     * Deprecated (use `priceData` instead).
     * @readonly
     * @deprecated
     */
    price?: PriceData;
    /** Price data. */
    priceData?: PriceData;
    /**
     * Price data, converted to the currency specified in request header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /**
     * Product price range. The minimum and maximum prices of all the variants.
     * @readonly
     */
    priceRange?: NumericPropertyRange;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /**
     * Product cost range. The minimum and maximum costs of all the variants.
     * @readonly
     */
    costRange?: NumericPropertyRange;
    /** Price per unit data. */
    pricePerUnitData?: PricePerUnitData;
    /** Additional text that the store owner can assign to the product (e.g. shipping details, refund policy, etc.). */
    additionalInfoSections?: AdditionalInfoSection[];
    /**
     * Deprecated (use `ribbon` instead).
     * @readonly
     * @deprecated
     */
    ribbons?: Ribbon$2[];
    /**
     * Media items (images, videos etc) associated with this product (writable via [Add Product Media](https://dev.wix.com/api/rest/wix-stores/catalog/products/add-product-media) endpoint).
     * @readonly
     */
    media?: Media$2;
    /**
     * Text box for the customer to add a message to their order (e.g., customization request). Currently writable only from the UI.
     * @readonly
     */
    customTextFields?: CustomTextField[];
    /** Whether variants are being managed for this product - enables unique SKU, price and weight per variant. Also affects inventory data. Once set to `true`, can be reset to `false` only if no variants exist. You cannot set `manageVariants` to `true` if more than 300 variants are defined. */
    manageVariants?: boolean | null;
    /** Options for this product. */
    productOptions?: ProductOption[];
    /**
     * Product page URL for this product (generated automatically by the server).
     * @readonly
     */
    productPageUrl?: PageUrl;
    /**
     * Product’s unique numeric ID (assigned in ascending order).
     * Primarily used for sorting and filtering when crawling all products.
     * @readonly
     */
    numericId?: string;
    /**
     * Inventory item ID - ID referencing the inventory system.
     * @readonly
     */
    inventoryItemId?: string;
    /** Discount deducted from the product's original price. */
    discount?: Discount$1;
    /**
     * A list of all collection IDs that this product is included in (writable via the Catalog > Collection APIs).
     * @readonly
     */
    collectionIds?: string[];
    /**
     * Product variants, will be provided if the the request was sent with the `includeVariants: true`.
     *
     * Max: 1,000 variants
     * @readonly
     */
    variants?: Variant$1[];
    /**
     * Date and time the product was last updated.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Custom SEO data for the product. */
    seoData?: SeoSchema$1;
    /** Product ribbon. Used to highlight relevant information about a product. For example, "Sale", "New Arrival", "Sold Out". */
    ribbon?: string | null;
    /** Product brand. Including a brand name can help improve site and product [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores). */
    brand?: string | null;
}
interface UpdateCollection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    _id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media$2;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface QueryOffsetResult {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface ProductsQueryResult$1 extends QueryOffsetResult {
    items: Product$2[];
    query: ProductsQueryBuilder$1;
    next: () => Promise<ProductsQueryResult$1>;
    prev: () => Promise<ProductsQueryResult$1>;
}
interface ProductsQueryBuilder$1 {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'name' | 'slug' | 'productType' | 'description' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'collectionIds' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'name' | 'slug' | 'productType' | 'description' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'collectionIds' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: 'priceData.price' | 'numericId' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: 'priceData.price' | 'numericId' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: 'priceData.price' | 'numericId' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: 'priceData.price' | 'numericId' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name' | 'slug' | 'description' | 'sku', value: string) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'name' | 'slug' | 'productType' | 'description' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'collectionIds' | 'lastUpdated' | '_createdDate', value: any[]) => ProductsQueryBuilder$1;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'collectionIds', value: any[]) => ProductsQueryBuilder$1;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'name' | 'slug' | 'productType' | 'description' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'collectionIds' | 'lastUpdated' | '_createdDate', value: any) => ProductsQueryBuilder$1;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'name' | 'slug' | 'productType' | 'description' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'collectionIds' | 'lastUpdated' | '_createdDate', value: boolean) => ProductsQueryBuilder$1;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'name' | 'slug' | 'productType' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'lastUpdated'>) => ProductsQueryBuilder$1;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'name' | 'slug' | 'productType' | 'sku' | 'price' | 'priceData.price' | 'numericId' | 'lastUpdated'>) => ProductsQueryBuilder$1;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => ProductsQueryBuilder$1;
    /** @param skip - Number of items to skip in the query results before returning the results.
     * @documentationMaturity preview
     */
    skip: (skip: number) => ProductsQueryBuilder$1;
    /** @documentationMaturity preview */
    find: () => Promise<ProductsQueryResult$1>;
}
interface GetProductOptions$1 {
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface QueryProductVariantsOptions {
    /**
     * The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice).
     * You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (not relevant when passing variant IDs).
     */
    choices?: Record<string, string>;
    /** List of variant IDs (not relevant when passing choices). */
    variantIds?: string[];
    paging?: Paging$2;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}

declare function createProduct$3(httpClient: HttpClient): CreateProductSignature$1;
interface CreateProductSignature$1 {
    /**
     * Creates a new product.
     * @param - Product information.
     */
    (product: Product$2): Promise<CreateProductResponse$1 & CreateProductResponseNonNullableFields$1>;
}
declare function updateProduct$3(httpClient: HttpClient): UpdateProductSignature$1;
interface UpdateProductSignature$1 {
    /**
     * Updates specified fields in a product.
     * @param - Product ID (generated automatically by the catalog).
     * @param - Product info to update.
     */
    (_id: string, product: UpdateProduct$1): Promise<UpdateProductResponse$1 & UpdateProductResponseNonNullableFields$1>;
}
declare function deleteProduct$3(httpClient: HttpClient): DeleteProductSignature$1;
interface DeleteProductSignature$1 {
    /**
     * Deletes a product.
     * @param - ID of the product to delete.
     */
    (_id: string): Promise<void>;
}
declare function updateProductVariants$1(httpClient: HttpClient): UpdateProductVariantsSignature;
interface UpdateProductVariantsSignature {
    /**
     * Updates variants of a specified product.
     * @param - ID of the product with managed variants.
     * @param - Variant info to update.
     */
    (_id: string, variants: VariantOverride[]): Promise<UpdateVariantsResponse & UpdateVariantsResponseNonNullableFields>;
}
declare function resetAllProductVariantData$1(httpClient: HttpClient): ResetAllProductVariantDataSignature;
interface ResetAllProductVariantDataSignature {
    /**
     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
declare function addProductsToCollection$1(httpClient: HttpClient): AddProductsToCollectionSignature;
interface AddProductsToCollectionSignature {
    /**
     * Adds products to a specified collection.
     * @param - Collection ID.
     * @param - IDs of the products to add to the collection, separated by commas.
     */
    (_id: string, productIds: string[]): Promise<void>;
}
declare function removeProductsFromCollection$1(httpClient: HttpClient): RemoveProductsFromCollectionSignature;
interface RemoveProductsFromCollectionSignature {
    /**
     * Deletes products from a specified collection.
     * @param - ID of the collection from which to remove products.
     * @param - IDs of the products to remove from the collection.
     */
    (_id: string, productIds: string[]): Promise<void>;
}
declare function addProductMedia$1(httpClient: HttpClient): AddProductMediaSignature;
interface AddProductMediaSignature {
    /**
     * Adds media items to a specified product, either via URL or existing media ID.
     *
     * > **NOTE:** The URL is not validated and no event is triggered to indicate if the media was added successfully.
     * @param - Product ID.
     * @param - Sources of media items already uploaded to the Wix site.
     */
    (_id: string, media: MediaDataForWrite[]): Promise<void>;
}
declare function removeProductMedia$1(httpClient: HttpClient): RemoveProductMediaSignature;
interface RemoveProductMediaSignature {
    /**
     * Removes specified media items from a product.
     * Pass an empty array to remove all media items.
     * @param - Product ID.
     * @param - List of media IDs to remove. Pass an empty array to delete all media items for the product.
     */
    (_id: string, mediaIds: string[]): Promise<void>;
}
declare function addProductMediaToChoices$1(httpClient: HttpClient): AddProductMediaToChoicesSignature;
interface AddProductMediaToChoicesSignature {
    /**
     * Links media items that are already associated with a specific product to a choice within the same product.
     *
     * Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).
     *
     * To remove all existing media items, call the [Remove Product Media From Choices](https://dev.wix.com/api/rest/wix-stores/catalog/products/remove-product-media-from-choices) endpoint.
     * @param - Product ID.
     * @param - Product media items and the choices to add the media to.
     */
    (_id: string, media: MediaAssignmentToChoice[]): Promise<void>;
}
declare function removeProductMediaFromChoices$1(httpClient: HttpClient): RemoveProductMediaFromChoicesSignature;
interface RemoveProductMediaFromChoicesSignature {
    /**
     * Removes media items from all or some of a product's choices.
     * (Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).)
     * @param - Product ID from whose choices to remove media items.
     * @param - Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product.
     */
    (_id: string, media: MediaAssignmentToChoice[]): Promise<void>;
}
declare function deleteProductOptions$1(httpClient: HttpClient): DeleteProductOptionsSignature;
interface DeleteProductOptionsSignature {
    /**
     * Delete all options from a specific product. Only available when [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is disabled.
     * @param - ID of the product with options to delete.
     */
    (_id: string): Promise<void>;
}
declare function removeBrand$1(httpClient: HttpClient): RemoveBrandSignature;
interface RemoveBrandSignature {
    /**
     * Deletes a product's brand.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
declare function createCollection$1(httpClient: HttpClient): CreateCollectionSignature;
interface CreateCollectionSignature {
    /**
     * Creates a new collection.
     * @param - Collection info.
     */
    (collection: Collection): Promise<CreateCollectionResponse & CreateCollectionResponseNonNullableFields>;
}
declare function updateCollection$1(httpClient: HttpClient): UpdateCollectionSignature;
interface UpdateCollectionSignature {
    /**
     * Updates specified properties of a collection. To add products to a collection, call the [addProductsToCollection](#addproductstocollection) function.
     * @param - Collection ID (generated automatically by the catalog).
     * @param - Collection info to update.
     */
    (_id: string | null, collection: UpdateCollection): Promise<UpdateCollectionResponse & UpdateCollectionResponseNonNullableFields>;
}
declare function deleteCollection$1(httpClient: HttpClient): DeleteCollectionSignature;
interface DeleteCollectionSignature {
    /**
     * Deletes a collection.
     * @param - ID of the collection to delete.
     */
    (_id: string): Promise<void>;
}
declare function removeRibbon$1(httpClient: HttpClient): RemoveRibbonSignature;
interface RemoveRibbonSignature {
    /**
     * Deletes a product's ribbon.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
declare function bulkUpdateProductsProperty$1(httpClient: HttpClient): BulkUpdateProductsPropertySignature;
interface BulkUpdateProductsPropertySignature {
    /**
     * Updates a specified property for up to 100 products at a time.
     * @param - Product IDs.
     * @param - Field to update.
     */
    (ids: string[], set: SetValue): Promise<BulkUpdateProductsResponse$1 & BulkUpdateProductsResponseNonNullableFields$1>;
}
declare function bulkAdjustProductProperty$1(httpClient: HttpClient): BulkAdjustProductPropertySignature;
interface BulkAdjustProductPropertySignature {
    /**
     * Adjusts a specified numerical property for up to 100 products at a time.
     * The property can be increased or decreased either by percentage or amount.
     * @param - Numerical property to adjust.
     * @param - Product IDs.
     */
    (adjust: AdjustValue$1, ids: string[]): Promise<BulkAdjustProductPropertiesResponse & BulkAdjustProductPropertiesResponseNonNullableFields>;
}
declare function queryProducts$3(httpClient: HttpClient): QueryProductsSignature$1;
interface QueryProductsSignature$1 {
    /**
     * Returns a list of up to 100 products, given the provided paging, sorting and filtering.
     */
    (): ProductsQueryBuilder$1;
}
declare function getProduct$3(httpClient: HttpClient): GetProductSignature$1;
interface GetProductSignature$1 {
    /**
     * Retrieves a product with the provided ID.
     * @param - Requested product ID.
     */
    (_id: string, options?: GetProductOptions$1 | undefined): Promise<GetProductResponse$1 & GetProductResponseNonNullableFields>;
}
declare function getCollectionBySlug$1(httpClient: HttpClient): GetCollectionBySlugSignature;
interface GetCollectionBySlugSignature {
    /**
     * Retrieves a collection with the provided slug.
     * @param - Slug of the collection to retrieve.
     */
    (slug: string): Promise<GetCollectionBySlugResponse & GetCollectionBySlugResponseNonNullableFields>;
}
declare function getProductOptionsAvailability$1(httpClient: HttpClient): GetProductOptionsAvailabilitySignature;
interface GetProductOptionsAvailabilitySignature {
    /**
     * Gets the availability of relevant product variants based on the product ID and selections provided. See [Use Cases](https://dev.wix.com/api/rest/wix-stores/catalog/use-cases) for an example.
     * @param - Requested product ID.
     * @param - Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`.
     */
    (_id: string, options: Record<string, string>): Promise<ProductOptionsAvailabilityResponse & ProductOptionsAvailabilityResponseNonNullableFields>;
}
declare function queryProductVariants$1(httpClient: HttpClient): QueryProductVariantsSignature;
interface QueryProductVariantsSignature {
    /**
     * Retrieves product variants, based on either choices (option-choice key-value pairs) or variant IDs.
     * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
     * @param - Requested product ID.
     */
    (_id: string, options?: QueryProductVariantsOptions | undefined): Promise<QueryProductVariantsResponse & QueryProductVariantsResponseNonNullableFields>;
}
declare function queryStoreVariants$1(httpClient: HttpClient): QueryStoreVariantsSignature;
interface QueryStoreVariantsSignature {
    /**
     * Retrieves up to 100 store variants, given the provided paging, filtering, and sorting.
     * @param - Query options.
     */
    (query: PlatformQuery): Promise<QueryStoreVariantsResponse & QueryStoreVariantsResponseNonNullableFields>;
}
declare function getStoreVariant$1(httpClient: HttpClient): GetStoreVariantSignature;
interface GetStoreVariantSignature {
    /**
     * Retrieves a store variant with the provided ID.
     * @param - Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`.
     */
    (_id: string): Promise<GetStoreVariantResponse & GetStoreVariantResponseNonNullableFields>;
}
declare const onProductCreated$3: EventDefinition<ProductCreatedEnvelope$1, "com.wix.ecommerce.catalog.api.v1.ProductCreated">;
declare const onProductChanged$1: EventDefinition<ProductChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductChanged">;
declare const onProductDeleted$3: EventDefinition<ProductDeletedEnvelope$1, "com.wix.ecommerce.catalog.api.v1.ProductDeleted">;
declare const onProductCollectionCreated$1: EventDefinition<ProductCollectionCreatedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionCreated">;
declare const onProductCollectionChanged$1: EventDefinition<ProductCollectionChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionChanged">;
declare const onProductCollectionDeleted$1: EventDefinition<ProductCollectionDeletedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionDeleted">;
declare const onProductVariantsChanged$1: EventDefinition<ProductVariantsChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.VariantsChanged">;

declare function createEventModule$7<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createProduct$2: MaybeContext<BuildRESTFunction<typeof createProduct$3> & typeof createProduct$3>;
declare const updateProduct$2: MaybeContext<BuildRESTFunction<typeof updateProduct$3> & typeof updateProduct$3>;
declare const deleteProduct$2: MaybeContext<BuildRESTFunction<typeof deleteProduct$3> & typeof deleteProduct$3>;
declare const updateProductVariants: MaybeContext<BuildRESTFunction<typeof updateProductVariants$1> & typeof updateProductVariants$1>;
declare const resetAllProductVariantData: MaybeContext<BuildRESTFunction<typeof resetAllProductVariantData$1> & typeof resetAllProductVariantData$1>;
declare const addProductsToCollection: MaybeContext<BuildRESTFunction<typeof addProductsToCollection$1> & typeof addProductsToCollection$1>;
declare const removeProductsFromCollection: MaybeContext<BuildRESTFunction<typeof removeProductsFromCollection$1> & typeof removeProductsFromCollection$1>;
declare const addProductMedia: MaybeContext<BuildRESTFunction<typeof addProductMedia$1> & typeof addProductMedia$1>;
declare const removeProductMedia: MaybeContext<BuildRESTFunction<typeof removeProductMedia$1> & typeof removeProductMedia$1>;
declare const addProductMediaToChoices: MaybeContext<BuildRESTFunction<typeof addProductMediaToChoices$1> & typeof addProductMediaToChoices$1>;
declare const removeProductMediaFromChoices: MaybeContext<BuildRESTFunction<typeof removeProductMediaFromChoices$1> & typeof removeProductMediaFromChoices$1>;
declare const deleteProductOptions: MaybeContext<BuildRESTFunction<typeof deleteProductOptions$1> & typeof deleteProductOptions$1>;
declare const removeBrand: MaybeContext<BuildRESTFunction<typeof removeBrand$1> & typeof removeBrand$1>;
declare const createCollection: MaybeContext<BuildRESTFunction<typeof createCollection$1> & typeof createCollection$1>;
declare const updateCollection: MaybeContext<BuildRESTFunction<typeof updateCollection$1> & typeof updateCollection$1>;
declare const deleteCollection: MaybeContext<BuildRESTFunction<typeof deleteCollection$1> & typeof deleteCollection$1>;
declare const removeRibbon: MaybeContext<BuildRESTFunction<typeof removeRibbon$1> & typeof removeRibbon$1>;
declare const bulkUpdateProductsProperty: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsProperty$1> & typeof bulkUpdateProductsProperty$1>;
declare const bulkAdjustProductProperty: MaybeContext<BuildRESTFunction<typeof bulkAdjustProductProperty$1> & typeof bulkAdjustProductProperty$1>;
declare const queryProducts$2: MaybeContext<BuildRESTFunction<typeof queryProducts$3> & typeof queryProducts$3>;
declare const getProduct$2: MaybeContext<BuildRESTFunction<typeof getProduct$3> & typeof getProduct$3>;
declare const getCollectionBySlug: MaybeContext<BuildRESTFunction<typeof getCollectionBySlug$1> & typeof getCollectionBySlug$1>;
declare const getProductOptionsAvailability: MaybeContext<BuildRESTFunction<typeof getProductOptionsAvailability$1> & typeof getProductOptionsAvailability$1>;
declare const queryProductVariants: MaybeContext<BuildRESTFunction<typeof queryProductVariants$1> & typeof queryProductVariants$1>;
declare const queryStoreVariants: MaybeContext<BuildRESTFunction<typeof queryStoreVariants$1> & typeof queryStoreVariants$1>;
declare const getStoreVariant: MaybeContext<BuildRESTFunction<typeof getStoreVariant$1> & typeof getStoreVariant$1>;

type _publicOnProductCreatedType$1 = typeof onProductCreated$3;
/**
 * Triggered when a product is created.
 */
declare const onProductCreated$2: ReturnType<typeof createEventModule$7<_publicOnProductCreatedType>>;

type _publicOnProductChangedType = typeof onProductChanged$1;
/**
 * Triggered when a product is changed.
 */
declare const onProductChanged: ReturnType<typeof createEventModule$7<_publicOnProductChangedType>>;

type _publicOnProductDeletedType$1 = typeof onProductDeleted$3;
/**
 * Triggered when a product is deleted.
 */
declare const onProductDeleted$2: ReturnType<typeof createEventModule$7<_publicOnProductDeletedType>>;

type _publicOnProductCollectionCreatedType = typeof onProductCollectionCreated$1;
/**
 * Triggered when a collection is created.
 */
declare const onProductCollectionCreated: ReturnType<typeof createEventModule$7<_publicOnProductCollectionCreatedType>>;

type _publicOnProductCollectionChangedType = typeof onProductCollectionChanged$1;
/**
 * Triggered when a collection is changed.
 */
declare const onProductCollectionChanged: ReturnType<typeof createEventModule$7<_publicOnProductCollectionChangedType>>;

type _publicOnProductCollectionDeletedType = typeof onProductCollectionDeleted$1;
/**
 * Triggered when a collection is deleted.
 */
declare const onProductCollectionDeleted: ReturnType<typeof createEventModule$7<_publicOnProductCollectionDeletedType>>;

type _publicOnProductVariantsChangedType = typeof onProductVariantsChanged$1;
/**
 * Triggered when a product variant is changed.
 */
declare const onProductVariantsChanged: ReturnType<typeof createEventModule$7<_publicOnProductVariantsChangedType>>;

type index_d$a_AddProductMediaRequest = AddProductMediaRequest;
type index_d$a_AddProductMediaResponse = AddProductMediaResponse;
type index_d$a_AddProductMediaToChoicesRequest = AddProductMediaToChoicesRequest;
type index_d$a_AddProductMediaToChoicesResponse = AddProductMediaToChoicesResponse;
type index_d$a_AddProductsToCollectionRequest = AddProductsToCollectionRequest;
type index_d$a_AddProductsToCollectionResponse = AddProductsToCollectionResponse;
type index_d$a_AdditionalInfoSection = AdditionalInfoSection;
type index_d$a_AdjustValueValueOneOf = AdjustValueValueOneOf;
type index_d$a_AggregateProductsRequest = AggregateProductsRequest;
type index_d$a_AggregateProductsResponse = AggregateProductsResponse;
type index_d$a_AllowedProductsCountLimitExceededErrorData = AllowedProductsCountLimitExceededErrorData;
type index_d$a_BulkAdjustProductPropertiesByFilterSyncRequest = BulkAdjustProductPropertiesByFilterSyncRequest;
type index_d$a_BulkAdjustProductPropertiesByFilterSyncResponse = BulkAdjustProductPropertiesByFilterSyncResponse;
type index_d$a_BulkAdjustProductPropertiesRequest = BulkAdjustProductPropertiesRequest;
type index_d$a_BulkAdjustProductPropertiesResponse = BulkAdjustProductPropertiesResponse;
type index_d$a_BulkAdjustProductPropertiesResponseNonNullableFields = BulkAdjustProductPropertiesResponseNonNullableFields;
type index_d$a_BulkQueryCustomFieldsRequest = BulkQueryCustomFieldsRequest;
type index_d$a_BulkQueryCustomFieldsResponse = BulkQueryCustomFieldsResponse;
type index_d$a_BulkRemoveCustomFieldsRequest = BulkRemoveCustomFieldsRequest;
type index_d$a_BulkRemoveCustomFieldsResponse = BulkRemoveCustomFieldsResponse;
type index_d$a_BulkSetCustomFieldsRequest = BulkSetCustomFieldsRequest;
type index_d$a_BulkSetCustomFieldsResponse = BulkSetCustomFieldsResponse;
type index_d$a_BulkUpdateProductsByFilterSyncRequest = BulkUpdateProductsByFilterSyncRequest;
type index_d$a_BulkUpdateProductsByFilterSyncResponse = BulkUpdateProductsByFilterSyncResponse;
type index_d$a_Collection = Collection;
type index_d$a_CollectionChanged = CollectionChanged;
type index_d$a_CollectionCreated = CollectionCreated;
type index_d$a_CollectionDeleted = CollectionDeleted;
type index_d$a_CostAndProfitData = CostAndProfitData;
type index_d$a_CreateCollectionRequest = CreateCollectionRequest;
type index_d$a_CreateCollectionResponse = CreateCollectionResponse;
type index_d$a_CreateCollectionResponseNonNullableFields = CreateCollectionResponseNonNullableFields;
type index_d$a_CreateDigitalProductRequest = CreateDigitalProductRequest;
type index_d$a_CreateDigitalProductResponse = CreateDigitalProductResponse;
type index_d$a_CreateProductPlatformizedRequest = CreateProductPlatformizedRequest;
type index_d$a_CreateProductPlatformizedResponse = CreateProductPlatformizedResponse;
type index_d$a_CustomFieldsContainer = CustomFieldsContainer;
type index_d$a_CustomTextField = CustomTextField;
type index_d$a_DeleteCollectionRequest = DeleteCollectionRequest;
type index_d$a_DeleteCollectionResponse = DeleteCollectionResponse;
type index_d$a_DeleteProductOptionsRequest = DeleteProductOptionsRequest;
type index_d$a_DeleteProductOptionsResponse = DeleteProductOptionsResponse;
type index_d$a_DeleteProductPlatformizedRequest = DeleteProductPlatformizedRequest;
type index_d$a_DeleteProductPlatformizedResponse = DeleteProductPlatformizedResponse;
type index_d$a_FormattedPrice = FormattedPrice;
type index_d$a_GetCollectionBySlugRequest = GetCollectionBySlugRequest;
type index_d$a_GetCollectionBySlugResponse = GetCollectionBySlugResponse;
type index_d$a_GetCollectionBySlugResponseNonNullableFields = GetCollectionBySlugResponseNonNullableFields;
type index_d$a_GetCollectionRequest = GetCollectionRequest;
type index_d$a_GetCollectionResponse = GetCollectionResponse;
type index_d$a_GetProductPlatformizedRequest = GetProductPlatformizedRequest;
type index_d$a_GetProductPlatformizedResponse = GetProductPlatformizedResponse;
type index_d$a_GetProductResponseNonNullableFields = GetProductResponseNonNullableFields;
type index_d$a_GetProductsRequest = GetProductsRequest;
type index_d$a_GetProductsResponse = GetProductsResponse;
type index_d$a_GetStoreVariantRequest = GetStoreVariantRequest;
type index_d$a_GetStoreVariantResponse = GetStoreVariantResponse;
type index_d$a_GetStoreVariantResponseNonNullableFields = GetStoreVariantResponseNonNullableFields;
type index_d$a_MediaAssignmentToChoice = MediaAssignmentToChoice;
type index_d$a_MediaDataForWrite = MediaDataForWrite;
type index_d$a_MediaDataForWriteMediaSourceOneOf = MediaDataForWriteMediaSourceOneOf;
type index_d$a_MediaItem = MediaItem;
type index_d$a_MediaItemItemOneOf = MediaItemItemOneOf;
type index_d$a_MediaItemType = MediaItemType;
declare const index_d$a_MediaItemType: typeof MediaItemType;
type index_d$a_MediaItemUrlAndSize = MediaItemUrlAndSize;
type index_d$a_MediaItemVideo = MediaItemVideo;
type index_d$a_NumericPropertyRange = NumericPropertyRange;
type index_d$a_OptionAndChoice = OptionAndChoice;
type index_d$a_OptionType = OptionType;
declare const index_d$a_OptionType: typeof OptionType;
type index_d$a_PageUrl = PageUrl;
type index_d$a_PagingWithBigLimit = PagingWithBigLimit;
type index_d$a_PercentageData = PercentageData;
type index_d$a_PlatformMedia = PlatformMedia;
type index_d$a_PlatformMediaMediaOneOf = PlatformMediaMediaOneOf;
type index_d$a_PlatformPagingMetadata = PlatformPagingMetadata;
type index_d$a_PlatformQuery = PlatformQuery;
type index_d$a_PlatformQueryPagingMethodOneOf = PlatformQueryPagingMethodOneOf;
type index_d$a_PriceData = PriceData;
type index_d$a_PricePerUnitData = PricePerUnitData;
type index_d$a_ProductChanged = ProductChanged;
type index_d$a_ProductChangedEnvelope = ProductChangedEnvelope;
type index_d$a_ProductCollectionChangedEnvelope = ProductCollectionChangedEnvelope;
type index_d$a_ProductCollectionCreatedEnvelope = ProductCollectionCreatedEnvelope;
type index_d$a_ProductCollectionDeletedEnvelope = ProductCollectionDeletedEnvelope;
type index_d$a_ProductCreated = ProductCreated;
type index_d$a_ProductDeleted = ProductDeleted;
type index_d$a_ProductOption = ProductOption;
type index_d$a_ProductOptionsAvailabilityRequest = ProductOptionsAvailabilityRequest;
type index_d$a_ProductOptionsAvailabilityResponse = ProductOptionsAvailabilityResponse;
type index_d$a_ProductOptionsAvailabilityResponseNonNullableFields = ProductOptionsAvailabilityResponseNonNullableFields;
type index_d$a_ProductVariantsChangedEnvelope = ProductVariantsChangedEnvelope;
type index_d$a_PropertyAdjustmentData = PropertyAdjustmentData;
type index_d$a_PropertyAdjustmentDataByOneOf = PropertyAdjustmentDataByOneOf;
type index_d$a_QueryCollectionsPlatformizedRequest = QueryCollectionsPlatformizedRequest;
type index_d$a_QueryCollectionsPlatformizedResponse = QueryCollectionsPlatformizedResponse;
type index_d$a_QueryCollectionsRequest = QueryCollectionsRequest;
type index_d$a_QueryCollectionsResponse = QueryCollectionsResponse;
type index_d$a_QueryCustomFieldsRequest = QueryCustomFieldsRequest;
type index_d$a_QueryCustomFieldsResponse = QueryCustomFieldsResponse;
type index_d$a_QueryProductVariantsOptions = QueryProductVariantsOptions;
type index_d$a_QueryProductVariantsRequest = QueryProductVariantsRequest;
type index_d$a_QueryProductVariantsResponse = QueryProductVariantsResponse;
type index_d$a_QueryProductVariantsResponseNonNullableFields = QueryProductVariantsResponseNonNullableFields;
type index_d$a_QueryProductsPlatformizedRequest = QueryProductsPlatformizedRequest;
type index_d$a_QueryProductsPlatformizedResponse = QueryProductsPlatformizedResponse;
type index_d$a_QueryProductsPlatformizedResponseNonNullableFields = QueryProductsPlatformizedResponseNonNullableFields;
type index_d$a_QueryProductsWithBigPageLimitRequest = QueryProductsWithBigPageLimitRequest;
type index_d$a_QueryStoreVariantsRequest = QueryStoreVariantsRequest;
type index_d$a_QueryStoreVariantsResponse = QueryStoreVariantsResponse;
type index_d$a_QueryStoreVariantsResponseNonNullableFields = QueryStoreVariantsResponseNonNullableFields;
type index_d$a_QueryStoreVariantsWithBigLimitRequest = QueryStoreVariantsWithBigLimitRequest;
type index_d$a_QueryWithBigPageLimit = QueryWithBigPageLimit;
type index_d$a_ReCloneStoreRequest = ReCloneStoreRequest;
type index_d$a_ReCloneStoreResponse = ReCloneStoreResponse;
type index_d$a_RemoveCustomFieldsRequest = RemoveCustomFieldsRequest;
type index_d$a_RemoveCustomFieldsResponse = RemoveCustomFieldsResponse;
type index_d$a_RemoveProductBrandRequest = RemoveProductBrandRequest;
type index_d$a_RemoveProductBrandResponse = RemoveProductBrandResponse;
type index_d$a_RemoveProductMediaFromChoicesRequest = RemoveProductMediaFromChoicesRequest;
type index_d$a_RemoveProductMediaFromChoicesResponse = RemoveProductMediaFromChoicesResponse;
type index_d$a_RemoveProductMediaRequest = RemoveProductMediaRequest;
type index_d$a_RemoveProductMediaResponse = RemoveProductMediaResponse;
type index_d$a_RemoveProductRibbonRequest = RemoveProductRibbonRequest;
type index_d$a_RemoveProductRibbonResponse = RemoveProductRibbonResponse;
type index_d$a_RemoveProductsFromCollectionRequest = RemoveProductsFromCollectionRequest;
type index_d$a_RemoveProductsFromCollectionResponse = RemoveProductsFromCollectionResponse;
type index_d$a_ResetAllVariantDataRequest = ResetAllVariantDataRequest;
type index_d$a_ResetAllVariantDataResponse = ResetAllVariantDataResponse;
type index_d$a_SetCustomFieldsRequest = SetCustomFieldsRequest;
type index_d$a_SetCustomFieldsResponse = SetCustomFieldsResponse;
type index_d$a_SetValue = SetValue;
type index_d$a_SetValueValueOneOf = SetValueValueOneOf;
type index_d$a_Stock = Stock;
type index_d$a_StoreVariant = StoreVariant;
type index_d$a_UnlimitedPlatformCursorPaging = UnlimitedPlatformCursorPaging;
type index_d$a_UnlimitedPlatformPaging = UnlimitedPlatformPaging;
type index_d$a_UnlimitedPlatformQuery = UnlimitedPlatformQuery;
type index_d$a_UnlimitedPlatformQueryPagingMethodOneOf = UnlimitedPlatformQueryPagingMethodOneOf;
type index_d$a_UpdateCollection = UpdateCollection;
type index_d$a_UpdateCollectionRequest = UpdateCollectionRequest;
type index_d$a_UpdateCollectionResponse = UpdateCollectionResponse;
type index_d$a_UpdateCollectionResponseNonNullableFields = UpdateCollectionResponseNonNullableFields;
type index_d$a_UpdateProductPlatformizedRequest = UpdateProductPlatformizedRequest;
type index_d$a_UpdateProductPlatformizedResponse = UpdateProductPlatformizedResponse;
type index_d$a_UpdateVariantsRequest = UpdateVariantsRequest;
type index_d$a_UpdateVariantsResponse = UpdateVariantsResponse;
type index_d$a_UpdateVariantsResponseNonNullableFields = UpdateVariantsResponseNonNullableFields;
type index_d$a_V1CreateProductPlatformizedRequest = V1CreateProductPlatformizedRequest;
type index_d$a_V1CreateProductPlatformizedResponse = V1CreateProductPlatformizedResponse;
type index_d$a_V1DeleteProductPlatformizedRequest = V1DeleteProductPlatformizedRequest;
type index_d$a_V1DeleteProductPlatformizedResponse = V1DeleteProductPlatformizedResponse;
type index_d$a_V1UpdateProductPlatformizedRequest = V1UpdateProductPlatformizedRequest;
type index_d$a_V1UpdateProductPlatformizedResponse = V1UpdateProductPlatformizedResponse;
type index_d$a_VariantChanged = VariantChanged;
type index_d$a_VariantData = VariantData;
type index_d$a_VariantDataWithNoStock = VariantDataWithNoStock;
type index_d$a_VariantOverride = VariantOverride;
type index_d$a_VariantStock = VariantStock;
type index_d$a_VariantsChanged = VariantsChanged;
type index_d$a__publicOnProductChangedType = _publicOnProductChangedType;
type index_d$a__publicOnProductCollectionChangedType = _publicOnProductCollectionChangedType;
type index_d$a__publicOnProductCollectionCreatedType = _publicOnProductCollectionCreatedType;
type index_d$a__publicOnProductCollectionDeletedType = _publicOnProductCollectionDeletedType;
type index_d$a__publicOnProductVariantsChangedType = _publicOnProductVariantsChangedType;
declare const index_d$a_addProductMedia: typeof addProductMedia;
declare const index_d$a_addProductMediaToChoices: typeof addProductMediaToChoices;
declare const index_d$a_addProductsToCollection: typeof addProductsToCollection;
declare const index_d$a_bulkAdjustProductProperty: typeof bulkAdjustProductProperty;
declare const index_d$a_bulkUpdateProductsProperty: typeof bulkUpdateProductsProperty;
declare const index_d$a_createCollection: typeof createCollection;
declare const index_d$a_deleteCollection: typeof deleteCollection;
declare const index_d$a_deleteProductOptions: typeof deleteProductOptions;
declare const index_d$a_getCollectionBySlug: typeof getCollectionBySlug;
declare const index_d$a_getProductOptionsAvailability: typeof getProductOptionsAvailability;
declare const index_d$a_getStoreVariant: typeof getStoreVariant;
declare const index_d$a_onProductChanged: typeof onProductChanged;
declare const index_d$a_onProductCollectionChanged: typeof onProductCollectionChanged;
declare const index_d$a_onProductCollectionCreated: typeof onProductCollectionCreated;
declare const index_d$a_onProductCollectionDeleted: typeof onProductCollectionDeleted;
declare const index_d$a_onProductVariantsChanged: typeof onProductVariantsChanged;
declare const index_d$a_queryProductVariants: typeof queryProductVariants;
declare const index_d$a_queryStoreVariants: typeof queryStoreVariants;
declare const index_d$a_removeBrand: typeof removeBrand;
declare const index_d$a_removeProductMedia: typeof removeProductMedia;
declare const index_d$a_removeProductMediaFromChoices: typeof removeProductMediaFromChoices;
declare const index_d$a_removeProductsFromCollection: typeof removeProductsFromCollection;
declare const index_d$a_removeRibbon: typeof removeRibbon;
declare const index_d$a_resetAllProductVariantData: typeof resetAllProductVariantData;
declare const index_d$a_updateCollection: typeof updateCollection;
declare const index_d$a_updateProductVariants: typeof updateProductVariants;
declare namespace index_d$a {
  export { type index_d$a_AddProductMediaRequest as AddProductMediaRequest, type index_d$a_AddProductMediaResponse as AddProductMediaResponse, type index_d$a_AddProductMediaToChoicesRequest as AddProductMediaToChoicesRequest, type index_d$a_AddProductMediaToChoicesResponse as AddProductMediaToChoicesResponse, type index_d$a_AddProductsToCollectionRequest as AddProductsToCollectionRequest, type index_d$a_AddProductsToCollectionResponse as AddProductsToCollectionResponse, type index_d$a_AdditionalInfoSection as AdditionalInfoSection, type AdjustValue$1 as AdjustValue, type index_d$a_AdjustValueValueOneOf as AdjustValueValueOneOf, type index_d$a_AggregateProductsRequest as AggregateProductsRequest, type index_d$a_AggregateProductsResponse as AggregateProductsResponse, type index_d$a_AllowedProductsCountLimitExceededErrorData as AllowedProductsCountLimitExceededErrorData, type ApplicationError$6 as ApplicationError, type BaseEventMetadata$7 as BaseEventMetadata, type BulkActionMetadata$6 as BulkActionMetadata, type index_d$a_BulkAdjustProductPropertiesByFilterSyncRequest as BulkAdjustProductPropertiesByFilterSyncRequest, type index_d$a_BulkAdjustProductPropertiesByFilterSyncResponse as BulkAdjustProductPropertiesByFilterSyncResponse, type index_d$a_BulkAdjustProductPropertiesRequest as BulkAdjustProductPropertiesRequest, type index_d$a_BulkAdjustProductPropertiesResponse as BulkAdjustProductPropertiesResponse, type index_d$a_BulkAdjustProductPropertiesResponseNonNullableFields as BulkAdjustProductPropertiesResponseNonNullableFields, type BulkDeleteProductsRequest$1 as BulkDeleteProductsRequest, type BulkDeleteProductsResponse$1 as BulkDeleteProductsResponse, type BulkProductResult$1 as BulkProductResult, type index_d$a_BulkQueryCustomFieldsRequest as BulkQueryCustomFieldsRequest, type index_d$a_BulkQueryCustomFieldsResponse as BulkQueryCustomFieldsResponse, type index_d$a_BulkRemoveCustomFieldsRequest as BulkRemoveCustomFieldsRequest, type index_d$a_BulkRemoveCustomFieldsResponse as BulkRemoveCustomFieldsResponse, type index_d$a_BulkSetCustomFieldsRequest as BulkSetCustomFieldsRequest, type index_d$a_BulkSetCustomFieldsResponse as BulkSetCustomFieldsResponse, type index_d$a_BulkUpdateProductsByFilterSyncRequest as BulkUpdateProductsByFilterSyncRequest, type index_d$a_BulkUpdateProductsByFilterSyncResponse as BulkUpdateProductsByFilterSyncResponse, type BulkUpdateProductsRequest$1 as BulkUpdateProductsRequest, type BulkUpdateProductsResponse$1 as BulkUpdateProductsResponse, type BulkUpdateProductsResponseNonNullableFields$1 as BulkUpdateProductsResponseNonNullableFields, type Choice$1 as Choice, type index_d$a_Collection as Collection, type index_d$a_CollectionChanged as CollectionChanged, type index_d$a_CollectionCreated as CollectionCreated, type index_d$a_CollectionDeleted as CollectionDeleted, type index_d$a_CostAndProfitData as CostAndProfitData, type index_d$a_CreateCollectionRequest as CreateCollectionRequest, type index_d$a_CreateCollectionResponse as CreateCollectionResponse, type index_d$a_CreateCollectionResponseNonNullableFields as CreateCollectionResponseNonNullableFields, type index_d$a_CreateDigitalProductRequest as CreateDigitalProductRequest, type index_d$a_CreateDigitalProductResponse as CreateDigitalProductResponse, type index_d$a_CreateProductPlatformizedRequest as CreateProductPlatformizedRequest, type index_d$a_CreateProductPlatformizedResponse as CreateProductPlatformizedResponse, type CreateProductRequest$1 as CreateProductRequest, type CreateProductResponse$1 as CreateProductResponse, type CreateProductResponseNonNullableFields$1 as CreateProductResponseNonNullableFields, type CursorPaging$7 as CursorPaging, type Cursors$7 as Cursors, type index_d$a_CustomFieldsContainer as CustomFieldsContainer, type index_d$a_CustomTextField as CustomTextField, type index_d$a_DeleteCollectionRequest as DeleteCollectionRequest, type index_d$a_DeleteCollectionResponse as DeleteCollectionResponse, type index_d$a_DeleteProductOptionsRequest as DeleteProductOptionsRequest, type index_d$a_DeleteProductOptionsResponse as DeleteProductOptionsResponse, type index_d$a_DeleteProductPlatformizedRequest as DeleteProductPlatformizedRequest, type index_d$a_DeleteProductPlatformizedResponse as DeleteProductPlatformizedResponse, type DeleteProductRequest$1 as DeleteProductRequest, type DeleteProductResponse$1 as DeleteProductResponse, type Discount$1 as Discount, DiscountType$2 as DiscountType, FileType$1 as FileType, type index_d$a_FormattedPrice as FormattedPrice, type index_d$a_GetCollectionBySlugRequest as GetCollectionBySlugRequest, type index_d$a_GetCollectionBySlugResponse as GetCollectionBySlugResponse, type index_d$a_GetCollectionBySlugResponseNonNullableFields as GetCollectionBySlugResponseNonNullableFields, type index_d$a_GetCollectionRequest as GetCollectionRequest, type index_d$a_GetCollectionResponse as GetCollectionResponse, type GetProductOptions$1 as GetProductOptions, type index_d$a_GetProductPlatformizedRequest as GetProductPlatformizedRequest, type index_d$a_GetProductPlatformizedResponse as GetProductPlatformizedResponse, type GetProductRequest$1 as GetProductRequest, type GetProductResponse$1 as GetProductResponse, type index_d$a_GetProductResponseNonNullableFields as GetProductResponseNonNullableFields, type index_d$a_GetProductsRequest as GetProductsRequest, type index_d$a_GetProductsResponse as GetProductsResponse, type index_d$a_GetStoreVariantRequest as GetStoreVariantRequest, type index_d$a_GetStoreVariantResponse as GetStoreVariantResponse, type index_d$a_GetStoreVariantResponseNonNullableFields as GetStoreVariantResponseNonNullableFields, type IdentificationData$9 as IdentificationData, type IdentificationDataIdOneOf$9 as IdentificationDataIdOneOf, InventoryStatus$1 as InventoryStatus, type ItemMetadata$6 as ItemMetadata, type Keyword$1 as Keyword, MeasurementUnit$1 as MeasurementUnit, type Media$2 as Media, type index_d$a_MediaAssignmentToChoice as MediaAssignmentToChoice, type index_d$a_MediaDataForWrite as MediaDataForWrite, type index_d$a_MediaDataForWriteMediaSourceOneOf as MediaDataForWriteMediaSourceOneOf, type index_d$a_MediaItem as MediaItem, type index_d$a_MediaItemItemOneOf as MediaItemItemOneOf, index_d$a_MediaItemType as MediaItemType, type index_d$a_MediaItemUrlAndSize as MediaItemUrlAndSize, type index_d$a_MediaItemVideo as MediaItemVideo, type MessageEnvelope$9 as MessageEnvelope, type index_d$a_NumericPropertyRange as NumericPropertyRange, type index_d$a_OptionAndChoice as OptionAndChoice, index_d$a_OptionType as OptionType, type index_d$a_PageUrl as PageUrl, type Paging$2 as Paging, type PagingMetadata$4 as PagingMetadata, type index_d$a_PagingWithBigLimit as PagingWithBigLimit, type index_d$a_PercentageData as PercentageData, type index_d$a_PlatformMedia as PlatformMedia, type index_d$a_PlatformMediaMediaOneOf as PlatformMediaMediaOneOf, type PlatformPaging$2 as PlatformPaging, type index_d$a_PlatformPagingMetadata as PlatformPagingMetadata, type index_d$a_PlatformQuery as PlatformQuery, type index_d$a_PlatformQueryPagingMethodOneOf as PlatformQueryPagingMethodOneOf, type PreorderInfo$3 as PreorderInfo, type index_d$a_PriceData as PriceData, type index_d$a_PricePerUnitData as PricePerUnitData, type Product$2 as Product, type index_d$a_ProductChanged as ProductChanged, type index_d$a_ProductChangedEnvelope as ProductChangedEnvelope, type index_d$a_ProductCollectionChangedEnvelope as ProductCollectionChangedEnvelope, type index_d$a_ProductCollectionCreatedEnvelope as ProductCollectionCreatedEnvelope, type index_d$a_ProductCollectionDeletedEnvelope as ProductCollectionDeletedEnvelope, type index_d$a_ProductCreated as ProductCreated, type ProductCreatedEnvelope$1 as ProductCreatedEnvelope, type index_d$a_ProductDeleted as ProductDeleted, type ProductDeletedEnvelope$1 as ProductDeletedEnvelope, type index_d$a_ProductOption as ProductOption, type index_d$a_ProductOptionsAvailabilityRequest as ProductOptionsAvailabilityRequest, type index_d$a_ProductOptionsAvailabilityResponse as ProductOptionsAvailabilityResponse, type index_d$a_ProductOptionsAvailabilityResponseNonNullableFields as ProductOptionsAvailabilityResponseNonNullableFields, ProductType$1 as ProductType, type index_d$a_ProductVariantsChangedEnvelope as ProductVariantsChangedEnvelope, type ProductsQueryBuilder$1 as ProductsQueryBuilder, type ProductsQueryResult$1 as ProductsQueryResult, type index_d$a_PropertyAdjustmentData as PropertyAdjustmentData, type index_d$a_PropertyAdjustmentDataByOneOf as PropertyAdjustmentDataByOneOf, type Query$1 as Query, type index_d$a_QueryCollectionsPlatformizedRequest as QueryCollectionsPlatformizedRequest, type index_d$a_QueryCollectionsPlatformizedResponse as QueryCollectionsPlatformizedResponse, type index_d$a_QueryCollectionsRequest as QueryCollectionsRequest, type index_d$a_QueryCollectionsResponse as QueryCollectionsResponse, type index_d$a_QueryCustomFieldsRequest as QueryCustomFieldsRequest, type index_d$a_QueryCustomFieldsResponse as QueryCustomFieldsResponse, type index_d$a_QueryProductVariantsOptions as QueryProductVariantsOptions, type index_d$a_QueryProductVariantsRequest as QueryProductVariantsRequest, type index_d$a_QueryProductVariantsResponse as QueryProductVariantsResponse, type index_d$a_QueryProductVariantsResponseNonNullableFields as QueryProductVariantsResponseNonNullableFields, type index_d$a_QueryProductsPlatformizedRequest as QueryProductsPlatformizedRequest, type index_d$a_QueryProductsPlatformizedResponse as QueryProductsPlatformizedResponse, type index_d$a_QueryProductsPlatformizedResponseNonNullableFields as QueryProductsPlatformizedResponseNonNullableFields, type QueryProductsRequest$1 as QueryProductsRequest, type QueryProductsResponse$1 as QueryProductsResponse, type index_d$a_QueryProductsWithBigPageLimitRequest as QueryProductsWithBigPageLimitRequest, type index_d$a_QueryStoreVariantsRequest as QueryStoreVariantsRequest, type index_d$a_QueryStoreVariantsResponse as QueryStoreVariantsResponse, type index_d$a_QueryStoreVariantsResponseNonNullableFields as QueryStoreVariantsResponseNonNullableFields, type index_d$a_QueryStoreVariantsWithBigLimitRequest as QueryStoreVariantsWithBigLimitRequest, type index_d$a_QueryWithBigPageLimit as QueryWithBigPageLimit, type index_d$a_ReCloneStoreRequest as ReCloneStoreRequest, type index_d$a_ReCloneStoreResponse as ReCloneStoreResponse, type index_d$a_RemoveCustomFieldsRequest as RemoveCustomFieldsRequest, type index_d$a_RemoveCustomFieldsResponse as RemoveCustomFieldsResponse, type index_d$a_RemoveProductBrandRequest as RemoveProductBrandRequest, type index_d$a_RemoveProductBrandResponse as RemoveProductBrandResponse, type index_d$a_RemoveProductMediaFromChoicesRequest as RemoveProductMediaFromChoicesRequest, type index_d$a_RemoveProductMediaFromChoicesResponse as RemoveProductMediaFromChoicesResponse, type index_d$a_RemoveProductMediaRequest as RemoveProductMediaRequest, type index_d$a_RemoveProductMediaResponse as RemoveProductMediaResponse, type index_d$a_RemoveProductRibbonRequest as RemoveProductRibbonRequest, type index_d$a_RemoveProductRibbonResponse as RemoveProductRibbonResponse, type index_d$a_RemoveProductsFromCollectionRequest as RemoveProductsFromCollectionRequest, type index_d$a_RemoveProductsFromCollectionResponse as RemoveProductsFromCollectionResponse, type index_d$a_ResetAllVariantDataRequest as ResetAllVariantDataRequest, type index_d$a_ResetAllVariantDataResponse as ResetAllVariantDataResponse, type Ribbon$2 as Ribbon, type SecuredMedia$1 as SecuredMedia, type SeoSchema$1 as SeoSchema, type index_d$a_SetCustomFieldsRequest as SetCustomFieldsRequest, type index_d$a_SetCustomFieldsResponse as SetCustomFieldsResponse, type index_d$a_SetValue as SetValue, type index_d$a_SetValueValueOneOf as SetValueValueOneOf, type Settings$2 as Settings, SortOrder$7 as SortOrder, type Sorting$7 as Sorting, type index_d$a_Stock as Stock, type index_d$a_StoreVariant as StoreVariant, type Tag$1 as Tag, type index_d$a_UnlimitedPlatformCursorPaging as UnlimitedPlatformCursorPaging, type index_d$a_UnlimitedPlatformPaging as UnlimitedPlatformPaging, type index_d$a_UnlimitedPlatformQuery as UnlimitedPlatformQuery, type index_d$a_UnlimitedPlatformQueryPagingMethodOneOf as UnlimitedPlatformQueryPagingMethodOneOf, type index_d$a_UpdateCollection as UpdateCollection, type index_d$a_UpdateCollectionRequest as UpdateCollectionRequest, type index_d$a_UpdateCollectionResponse as UpdateCollectionResponse, type index_d$a_UpdateCollectionResponseNonNullableFields as UpdateCollectionResponseNonNullableFields, type UpdateProduct$1 as UpdateProduct, type index_d$a_UpdateProductPlatformizedRequest as UpdateProductPlatformizedRequest, type index_d$a_UpdateProductPlatformizedResponse as UpdateProductPlatformizedResponse, type UpdateProductRequest$1 as UpdateProductRequest, type UpdateProductResponse$1 as UpdateProductResponse, type UpdateProductResponseNonNullableFields$1 as UpdateProductResponseNonNullableFields, type index_d$a_UpdateVariantsRequest as UpdateVariantsRequest, type index_d$a_UpdateVariantsResponse as UpdateVariantsResponse, type index_d$a_UpdateVariantsResponseNonNullableFields as UpdateVariantsResponseNonNullableFields, type index_d$a_V1CreateProductPlatformizedRequest as V1CreateProductPlatformizedRequest, type index_d$a_V1CreateProductPlatformizedResponse as V1CreateProductPlatformizedResponse, type index_d$a_V1DeleteProductPlatformizedRequest as V1DeleteProductPlatformizedRequest, type index_d$a_V1DeleteProductPlatformizedResponse as V1DeleteProductPlatformizedResponse, type index_d$a_V1UpdateProductPlatformizedRequest as V1UpdateProductPlatformizedRequest, type index_d$a_V1UpdateProductPlatformizedResponse as V1UpdateProductPlatformizedResponse, type Variant$1 as Variant, type index_d$a_VariantChanged as VariantChanged, type index_d$a_VariantData as VariantData, type index_d$a_VariantDataWithNoStock as VariantDataWithNoStock, type index_d$a_VariantOverride as VariantOverride, type index_d$a_VariantStock as VariantStock, type index_d$a_VariantsChanged as VariantsChanged, Version$1 as Version, type VideoResolution$1 as VideoResolution, WebhookIdentityType$9 as WebhookIdentityType, type index_d$a__publicOnProductChangedType as _publicOnProductChangedType, type index_d$a__publicOnProductCollectionChangedType as _publicOnProductCollectionChangedType, type index_d$a__publicOnProductCollectionCreatedType as _publicOnProductCollectionCreatedType, type index_d$a__publicOnProductCollectionDeletedType as _publicOnProductCollectionDeletedType, type _publicOnProductCreatedType$1 as _publicOnProductCreatedType, type _publicOnProductDeletedType$1 as _publicOnProductDeletedType, type index_d$a__publicOnProductVariantsChangedType as _publicOnProductVariantsChangedType, index_d$a_addProductMedia as addProductMedia, index_d$a_addProductMediaToChoices as addProductMediaToChoices, index_d$a_addProductsToCollection as addProductsToCollection, index_d$a_bulkAdjustProductProperty as bulkAdjustProductProperty, index_d$a_bulkUpdateProductsProperty as bulkUpdateProductsProperty, index_d$a_createCollection as createCollection, createProduct$2 as createProduct, index_d$a_deleteCollection as deleteCollection, deleteProduct$2 as deleteProduct, index_d$a_deleteProductOptions as deleteProductOptions, index_d$a_getCollectionBySlug as getCollectionBySlug, getProduct$2 as getProduct, index_d$a_getProductOptionsAvailability as getProductOptionsAvailability, index_d$a_getStoreVariant as getStoreVariant, index_d$a_onProductChanged as onProductChanged, index_d$a_onProductCollectionChanged as onProductCollectionChanged, index_d$a_onProductCollectionCreated as onProductCollectionCreated, index_d$a_onProductCollectionDeleted as onProductCollectionDeleted, onProductCreated$2 as onProductCreated, onProductDeleted$2 as onProductDeleted, index_d$a_onProductVariantsChanged as onProductVariantsChanged, onProductChanged$1 as publicOnProductChanged, onProductCollectionChanged$1 as publicOnProductCollectionChanged, onProductCollectionCreated$1 as publicOnProductCollectionCreated, onProductCollectionDeleted$1 as publicOnProductCollectionDeleted, onProductCreated$3 as publicOnProductCreated, onProductDeleted$3 as publicOnProductDeleted, onProductVariantsChanged$1 as publicOnProductVariantsChanged, index_d$a_queryProductVariants as queryProductVariants, queryProducts$2 as queryProducts, index_d$a_queryStoreVariants as queryStoreVariants, index_d$a_removeBrand as removeBrand, index_d$a_removeProductMedia as removeProductMedia, index_d$a_removeProductMediaFromChoices as removeProductMediaFromChoices, index_d$a_removeProductsFromCollection as removeProductsFromCollection, index_d$a_removeRibbon as removeRibbon, index_d$a_resetAllProductVariantData as resetAllProductVariantData, index_d$a_updateCollection as updateCollection, updateProduct$2 as updateProduct, index_d$a_updateProductVariants as updateProductVariants };
}

/**
 * A brand is a visible property of a product.
 * Adding brands to your products can help improve site and product visibility on search engines.
 */
interface Brand$1 {
    /**
     * Brand ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface InvalidateCache$6 extends InvalidateCacheGetByOneOf$6 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$6;
    /** Invalidate by page id */
    page?: Page$6;
    /** Invalidate by URI path */
    uri?: URI$6;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$6;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf$6 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$6;
    /** Invalidate by page id */
    page?: Page$6;
    /** Invalidate by URI path */
    uri?: URI$6;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$6;
}
interface App$6 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page$6 {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI$6 {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File$6 {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateBrandRequest {
    /** Brand to create. */
    brand: Brand$1;
}
interface CreateBrandResponse {
    /** Created brand. */
    brand?: Brand$1;
}
interface GetBrandRequest {
    /** Brand ID. */
    brandId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
declare enum RequestedFields$4 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetBrandResponse {
    /** Brand. */
    brand?: Brand$1;
}
interface UpdateBrandRequest {
    /** Brand to update. */
    brand: Brand$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface UpdateBrandResponse {
    /** Updated brand. */
    brand?: Brand$1;
}
interface DeleteBrandRequest {
    /** Brand ID. */
    brandId: string;
}
interface DeleteBrandResponse {
}
interface QueryBrandsRequest {
    /** Query options. */
    query?: CursorQuery$5;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface CursorQuery$5 extends CursorQueryPagingMethodOneOf$5 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$6;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$6[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$5 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$6;
}
interface Sorting$6 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$6;
}
declare enum SortOrder$6 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$6 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBrandsResponse {
    /** List of brands. */
    brands?: Brand$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$6;
}
interface CursorPagingMetadata$6 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$6;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$6 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateBrandsRequest {
    /** Brands to create. */
    brands: Brand$1[];
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateBrandsResponse {
    /** Brands created by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$5;
}
interface BulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata$5;
    /**
     * Full brand entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Brand$1;
}
interface ItemMetadata$5 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$5;
}
interface ApplicationError$5 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$5 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateBrandsRequest {
    /** List of brands to update. */
    brands: MaskedBrand[];
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface MaskedBrand {
    /** Brand to update. */
    brand?: Brand$1;
}
interface BulkUpdateBrandsResponse {
    /** Brands updated by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$5;
}
interface GetOrCreateBrandRequest {
    /** Brand name to retrieve or create. */
    brandName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface GetOrCreateBrandResponse {
    /** Brand. */
    brand?: Brand$1;
}
interface BulkGetOrCreateBrandsRequest {
    /** Brand names to retrieve or create. */
    brandNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface BulkGetOrCreateBrandsResponse {
    /** Brands retrieved or created by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$5;
}
interface BulkDeleteBrandsRequest {
    /** IDs of brands to delete. */
    brandIds: string[];
}
interface BulkDeleteBrandsResponse {
    /** Brands deleted by bulk action. */
    results?: BulkDeleteBrandsResponseBulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$5;
}
interface BulkDeleteBrandsResponseBulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata$5;
}
interface DomainEvent$6 extends DomainEventBodyOneOf$6 {
    createdEvent?: EntityCreatedEvent$6;
    updatedEvent?: EntityUpdatedEvent$6;
    deletedEvent?: EntityDeletedEvent$6;
    actionEvent?: ActionEvent$6;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$6 {
    createdEvent?: EntityCreatedEvent$6;
    updatedEvent?: EntityUpdatedEvent$6;
    deletedEvent?: EntityDeletedEvent$6;
    actionEvent?: ActionEvent$6;
}
interface EntityCreatedEvent$6 {
    entity?: string;
}
interface RestoreInfo$6 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$6 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$6 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$6 {
    body?: string;
}
interface Empty$7 {
}
interface MessageEnvelope$8 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$8;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$8 extends IdentificationDataIdOneOf$8 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$8;
}
/** @oneof */
interface IdentificationDataIdOneOf$8 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$8 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface BrandNonNullableFields {
    name: string;
}
interface CreateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface GetBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface UpdateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface QueryBrandsResponseNonNullableFields {
    brands: BrandNonNullableFields[];
}
interface ApplicationErrorNonNullableFields$5 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$4 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$5;
}
interface BulkBrandsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$4;
    item?: BrandNonNullableFields;
}
interface BulkActionMetadataNonNullableFields$4 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$4;
}
interface BulkUpdateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$4;
}
interface GetOrCreateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface BulkGetOrCreateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$4;
}
interface BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$4;
}
interface BulkDeleteBrandsResponseNonNullableFields {
    results: BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$4;
}
interface BaseEventMetadata$6 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$8;
}
interface EventMetadata$5 extends BaseEventMetadata$6 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface BrandCreatedEnvelope {
    entity: Brand$1;
    metadata: EventMetadata$5;
}
interface BrandUpdatedEnvelope {
    entity: Brand$1;
    metadata: EventMetadata$5;
}
interface BrandDeletedEnvelope {
    metadata: EventMetadata$5;
}
interface GetBrandOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface UpdateBrand {
    /**
     * Brand ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface UpdateBrandOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface QueryBrandsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[] | undefined;
}
interface QueryCursorResult$6 {
    cursors: Cursors$6;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface BrandsQueryResult extends QueryCursorResult$6 {
    items: Brand$1[];
    query: BrandsQueryBuilder;
    next: () => Promise<BrandsQueryResult>;
    prev: () => Promise<BrandsQueryResult>;
}
interface BrandsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => BrandsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any[]) => BrandsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => BrandsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: boolean) => BrandsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => BrandsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => BrandsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => BrandsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => BrandsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<BrandsQueryResult>;
}
interface BulkCreateBrandsOptions {
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkUpdateBrandsOptions {
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface GetOrCreateBrandOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}
interface BulkGetOrCreateBrandsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$4[];
}

declare function createBrand$1(httpClient: HttpClient): CreateBrandSignature;
interface CreateBrandSignature {
    /**
     * Creates a brand.
     *
     * To assign the brand to a product, include the `brand.id` or `brand.name`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Brand to create.
     * @returns Created brand.
     */
    (brand: Brand$1): Promise<Brand$1 & BrandNonNullableFields>;
}
declare function getBrand$1(httpClient: HttpClient): GetBrandSignature;
interface GetBrandSignature {
    /**
     * Retrieves a brand.
     * @param - Brand ID.
     * @returns Brand.
     */
    (brandId: string, options?: GetBrandOptions | undefined): Promise<Brand$1 & BrandNonNullableFields>;
}
declare function updateBrand$1(httpClient: HttpClient): UpdateBrandSignature;
interface UpdateBrandSignature {
    /**
     * Updates a brand.
     *
     * Each time the brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - Brand ID.
     * @returns Updated brand.
     */
    (_id: string | null, brand: UpdateBrand, options?: UpdateBrandOptions | undefined): Promise<Brand$1 & BrandNonNullableFields>;
}
declare function deleteBrand$1(httpClient: HttpClient): DeleteBrandSignature;
interface DeleteBrandSignature {
    /**
     * Deletes a brand.
     *
     * > **Note:** Deleting a brand will also remove it from all products it is assigned to.
     * @param - Brand ID.
     */
    (brandId: string): Promise<void>;
}
declare function queryBrands$1(httpClient: HttpClient): QueryBrandsSignature;
interface QueryBrandsSignature {
    /**
     * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryBrandsOptions | undefined): BrandsQueryBuilder;
}
declare function bulkCreateBrands$1(httpClient: HttpClient): BulkCreateBrandsSignature;
interface BulkCreateBrandsSignature {
    /**
     * Creates multiple brands.
     * @param - Brands to create.
     */
    (brands: Brand$1[], options?: BulkCreateBrandsOptions | undefined): Promise<BulkCreateBrandsResponse & BulkCreateBrandsResponseNonNullableFields>;
}
declare function bulkUpdateBrands$1(httpClient: HttpClient): BulkUpdateBrandsSignature;
interface BulkUpdateBrandsSignature {
    /**
     * Updates multiple brands.
     *
     * Each time a brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - List of brands to update.
     */
    (brands: MaskedBrand[], options?: BulkUpdateBrandsOptions | undefined): Promise<BulkUpdateBrandsResponse & BulkUpdateBrandsResponseNonNullableFields>;
}
declare function getOrCreateBrand$1(httpClient: HttpClient): GetOrCreateBrandSignature;
interface GetOrCreateBrandSignature {
    /**
     * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.
     * @param - Brand name to retrieve or create.
     */
    (brandName: string, options?: GetOrCreateBrandOptions | undefined): Promise<GetOrCreateBrandResponse & GetOrCreateBrandResponseNonNullableFields>;
}
declare function bulkGetOrCreateBrands$1(httpClient: HttpClient): BulkGetOrCreateBrandsSignature;
interface BulkGetOrCreateBrandsSignature {
    /**
     * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.
     * @param - Brand names to retrieve or create.
     */
    (brandNames: string[], options?: BulkGetOrCreateBrandsOptions | undefined): Promise<BulkGetOrCreateBrandsResponse & BulkGetOrCreateBrandsResponseNonNullableFields>;
}
declare function bulkDeleteBrands$1(httpClient: HttpClient): BulkDeleteBrandsSignature;
interface BulkDeleteBrandsSignature {
    /**
     * Deletes multiple brands.
     * @param - IDs of brands to delete.
     */
    (brandIds: string[]): Promise<BulkDeleteBrandsResponse & BulkDeleteBrandsResponseNonNullableFields>;
}
declare const onBrandCreated$1: EventDefinition<BrandCreatedEnvelope, "wix.stores.catalog.v3.brand_created">;
declare const onBrandUpdated$1: EventDefinition<BrandUpdatedEnvelope, "wix.stores.catalog.v3.brand_updated">;
declare const onBrandDeleted$1: EventDefinition<BrandDeletedEnvelope, "wix.stores.catalog.v3.brand_deleted">;

declare function createEventModule$6<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createBrand: MaybeContext<BuildRESTFunction<typeof createBrand$1> & typeof createBrand$1>;
declare const getBrand: MaybeContext<BuildRESTFunction<typeof getBrand$1> & typeof getBrand$1>;
declare const updateBrand: MaybeContext<BuildRESTFunction<typeof updateBrand$1> & typeof updateBrand$1>;
declare const deleteBrand: MaybeContext<BuildRESTFunction<typeof deleteBrand$1> & typeof deleteBrand$1>;
declare const queryBrands: MaybeContext<BuildRESTFunction<typeof queryBrands$1> & typeof queryBrands$1>;
declare const bulkCreateBrands: MaybeContext<BuildRESTFunction<typeof bulkCreateBrands$1> & typeof bulkCreateBrands$1>;
declare const bulkUpdateBrands: MaybeContext<BuildRESTFunction<typeof bulkUpdateBrands$1> & typeof bulkUpdateBrands$1>;
declare const getOrCreateBrand: MaybeContext<BuildRESTFunction<typeof getOrCreateBrand$1> & typeof getOrCreateBrand$1>;
declare const bulkGetOrCreateBrands: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateBrands$1> & typeof bulkGetOrCreateBrands$1>;
declare const bulkDeleteBrands: MaybeContext<BuildRESTFunction<typeof bulkDeleteBrands$1> & typeof bulkDeleteBrands$1>;

type _publicOnBrandCreatedType = typeof onBrandCreated$1;
/**
 * Triggered when a brand is created.
 */
declare const onBrandCreated: ReturnType<typeof createEventModule$6<_publicOnBrandCreatedType>>;

type _publicOnBrandUpdatedType = typeof onBrandUpdated$1;
/**
 * Triggered when a brand is updated.
 */
declare const onBrandUpdated: ReturnType<typeof createEventModule$6<_publicOnBrandUpdatedType>>;

type _publicOnBrandDeletedType = typeof onBrandDeleted$1;
/**
 * Triggered when a brand is deleted.
 */
declare const onBrandDeleted: ReturnType<typeof createEventModule$6<_publicOnBrandDeletedType>>;

type index_d$9_BrandCreatedEnvelope = BrandCreatedEnvelope;
type index_d$9_BrandDeletedEnvelope = BrandDeletedEnvelope;
type index_d$9_BrandNonNullableFields = BrandNonNullableFields;
type index_d$9_BrandUpdatedEnvelope = BrandUpdatedEnvelope;
type index_d$9_BrandsQueryBuilder = BrandsQueryBuilder;
type index_d$9_BrandsQueryResult = BrandsQueryResult;
type index_d$9_BulkBrandsResult = BulkBrandsResult;
type index_d$9_BulkCreateBrandsOptions = BulkCreateBrandsOptions;
type index_d$9_BulkCreateBrandsRequest = BulkCreateBrandsRequest;
type index_d$9_BulkCreateBrandsResponse = BulkCreateBrandsResponse;
type index_d$9_BulkCreateBrandsResponseNonNullableFields = BulkCreateBrandsResponseNonNullableFields;
type index_d$9_BulkDeleteBrandsRequest = BulkDeleteBrandsRequest;
type index_d$9_BulkDeleteBrandsResponse = BulkDeleteBrandsResponse;
type index_d$9_BulkDeleteBrandsResponseBulkBrandsResult = BulkDeleteBrandsResponseBulkBrandsResult;
type index_d$9_BulkDeleteBrandsResponseNonNullableFields = BulkDeleteBrandsResponseNonNullableFields;
type index_d$9_BulkGetOrCreateBrandsOptions = BulkGetOrCreateBrandsOptions;
type index_d$9_BulkGetOrCreateBrandsRequest = BulkGetOrCreateBrandsRequest;
type index_d$9_BulkGetOrCreateBrandsResponse = BulkGetOrCreateBrandsResponse;
type index_d$9_BulkGetOrCreateBrandsResponseNonNullableFields = BulkGetOrCreateBrandsResponseNonNullableFields;
type index_d$9_BulkUpdateBrandsOptions = BulkUpdateBrandsOptions;
type index_d$9_BulkUpdateBrandsRequest = BulkUpdateBrandsRequest;
type index_d$9_BulkUpdateBrandsResponse = BulkUpdateBrandsResponse;
type index_d$9_BulkUpdateBrandsResponseNonNullableFields = BulkUpdateBrandsResponseNonNullableFields;
type index_d$9_CreateBrandRequest = CreateBrandRequest;
type index_d$9_CreateBrandResponse = CreateBrandResponse;
type index_d$9_CreateBrandResponseNonNullableFields = CreateBrandResponseNonNullableFields;
type index_d$9_DeleteBrandRequest = DeleteBrandRequest;
type index_d$9_DeleteBrandResponse = DeleteBrandResponse;
type index_d$9_GetBrandOptions = GetBrandOptions;
type index_d$9_GetBrandRequest = GetBrandRequest;
type index_d$9_GetBrandResponse = GetBrandResponse;
type index_d$9_GetBrandResponseNonNullableFields = GetBrandResponseNonNullableFields;
type index_d$9_GetOrCreateBrandOptions = GetOrCreateBrandOptions;
type index_d$9_GetOrCreateBrandRequest = GetOrCreateBrandRequest;
type index_d$9_GetOrCreateBrandResponse = GetOrCreateBrandResponse;
type index_d$9_GetOrCreateBrandResponseNonNullableFields = GetOrCreateBrandResponseNonNullableFields;
type index_d$9_MaskedBrand = MaskedBrand;
type index_d$9_QueryBrandsOptions = QueryBrandsOptions;
type index_d$9_QueryBrandsRequest = QueryBrandsRequest;
type index_d$9_QueryBrandsResponse = QueryBrandsResponse;
type index_d$9_QueryBrandsResponseNonNullableFields = QueryBrandsResponseNonNullableFields;
type index_d$9_UpdateBrand = UpdateBrand;
type index_d$9_UpdateBrandOptions = UpdateBrandOptions;
type index_d$9_UpdateBrandRequest = UpdateBrandRequest;
type index_d$9_UpdateBrandResponse = UpdateBrandResponse;
type index_d$9_UpdateBrandResponseNonNullableFields = UpdateBrandResponseNonNullableFields;
type index_d$9__publicOnBrandCreatedType = _publicOnBrandCreatedType;
type index_d$9__publicOnBrandDeletedType = _publicOnBrandDeletedType;
type index_d$9__publicOnBrandUpdatedType = _publicOnBrandUpdatedType;
declare const index_d$9_bulkCreateBrands: typeof bulkCreateBrands;
declare const index_d$9_bulkDeleteBrands: typeof bulkDeleteBrands;
declare const index_d$9_bulkGetOrCreateBrands: typeof bulkGetOrCreateBrands;
declare const index_d$9_bulkUpdateBrands: typeof bulkUpdateBrands;
declare const index_d$9_createBrand: typeof createBrand;
declare const index_d$9_deleteBrand: typeof deleteBrand;
declare const index_d$9_getBrand: typeof getBrand;
declare const index_d$9_getOrCreateBrand: typeof getOrCreateBrand;
declare const index_d$9_onBrandCreated: typeof onBrandCreated;
declare const index_d$9_onBrandDeleted: typeof onBrandDeleted;
declare const index_d$9_onBrandUpdated: typeof onBrandUpdated;
declare const index_d$9_queryBrands: typeof queryBrands;
declare const index_d$9_updateBrand: typeof updateBrand;
declare namespace index_d$9 {
  export { type ActionEvent$6 as ActionEvent, type App$6 as App, type ApplicationError$5 as ApplicationError, type BaseEventMetadata$6 as BaseEventMetadata, type Brand$1 as Brand, type index_d$9_BrandCreatedEnvelope as BrandCreatedEnvelope, type index_d$9_BrandDeletedEnvelope as BrandDeletedEnvelope, type index_d$9_BrandNonNullableFields as BrandNonNullableFields, type index_d$9_BrandUpdatedEnvelope as BrandUpdatedEnvelope, type index_d$9_BrandsQueryBuilder as BrandsQueryBuilder, type index_d$9_BrandsQueryResult as BrandsQueryResult, type BulkActionMetadata$5 as BulkActionMetadata, type index_d$9_BulkBrandsResult as BulkBrandsResult, type index_d$9_BulkCreateBrandsOptions as BulkCreateBrandsOptions, type index_d$9_BulkCreateBrandsRequest as BulkCreateBrandsRequest, type index_d$9_BulkCreateBrandsResponse as BulkCreateBrandsResponse, type index_d$9_BulkCreateBrandsResponseNonNullableFields as BulkCreateBrandsResponseNonNullableFields, type index_d$9_BulkDeleteBrandsRequest as BulkDeleteBrandsRequest, type index_d$9_BulkDeleteBrandsResponse as BulkDeleteBrandsResponse, type index_d$9_BulkDeleteBrandsResponseBulkBrandsResult as BulkDeleteBrandsResponseBulkBrandsResult, type index_d$9_BulkDeleteBrandsResponseNonNullableFields as BulkDeleteBrandsResponseNonNullableFields, type index_d$9_BulkGetOrCreateBrandsOptions as BulkGetOrCreateBrandsOptions, type index_d$9_BulkGetOrCreateBrandsRequest as BulkGetOrCreateBrandsRequest, type index_d$9_BulkGetOrCreateBrandsResponse as BulkGetOrCreateBrandsResponse, type index_d$9_BulkGetOrCreateBrandsResponseNonNullableFields as BulkGetOrCreateBrandsResponseNonNullableFields, type index_d$9_BulkUpdateBrandsOptions as BulkUpdateBrandsOptions, type index_d$9_BulkUpdateBrandsRequest as BulkUpdateBrandsRequest, type index_d$9_BulkUpdateBrandsResponse as BulkUpdateBrandsResponse, type index_d$9_BulkUpdateBrandsResponseNonNullableFields as BulkUpdateBrandsResponseNonNullableFields, type index_d$9_CreateBrandRequest as CreateBrandRequest, type index_d$9_CreateBrandResponse as CreateBrandResponse, type index_d$9_CreateBrandResponseNonNullableFields as CreateBrandResponseNonNullableFields, type CursorPaging$6 as CursorPaging, type CursorPagingMetadata$6 as CursorPagingMetadata, type CursorQuery$5 as CursorQuery, type CursorQueryPagingMethodOneOf$5 as CursorQueryPagingMethodOneOf, type Cursors$6 as Cursors, type index_d$9_DeleteBrandRequest as DeleteBrandRequest, type index_d$9_DeleteBrandResponse as DeleteBrandResponse, type DomainEvent$6 as DomainEvent, type DomainEventBodyOneOf$6 as DomainEventBodyOneOf, type Empty$7 as Empty, type EntityCreatedEvent$6 as EntityCreatedEvent, type EntityDeletedEvent$6 as EntityDeletedEvent, type EntityUpdatedEvent$6 as EntityUpdatedEvent, type EventMetadata$5 as EventMetadata, type File$6 as File, type index_d$9_GetBrandOptions as GetBrandOptions, type index_d$9_GetBrandRequest as GetBrandRequest, type index_d$9_GetBrandResponse as GetBrandResponse, type index_d$9_GetBrandResponseNonNullableFields as GetBrandResponseNonNullableFields, type index_d$9_GetOrCreateBrandOptions as GetOrCreateBrandOptions, type index_d$9_GetOrCreateBrandRequest as GetOrCreateBrandRequest, type index_d$9_GetOrCreateBrandResponse as GetOrCreateBrandResponse, type index_d$9_GetOrCreateBrandResponseNonNullableFields as GetOrCreateBrandResponseNonNullableFields, type IdentificationData$8 as IdentificationData, type IdentificationDataIdOneOf$8 as IdentificationDataIdOneOf, type InvalidateCache$6 as InvalidateCache, type InvalidateCacheGetByOneOf$6 as InvalidateCacheGetByOneOf, type ItemMetadata$5 as ItemMetadata, type index_d$9_MaskedBrand as MaskedBrand, type MessageEnvelope$8 as MessageEnvelope, type Page$6 as Page, type index_d$9_QueryBrandsOptions as QueryBrandsOptions, type index_d$9_QueryBrandsRequest as QueryBrandsRequest, type index_d$9_QueryBrandsResponse as QueryBrandsResponse, type index_d$9_QueryBrandsResponseNonNullableFields as QueryBrandsResponseNonNullableFields, RequestedFields$4 as RequestedFields, type RestoreInfo$6 as RestoreInfo, SortOrder$6 as SortOrder, type Sorting$6 as Sorting, type URI$6 as URI, type index_d$9_UpdateBrand as UpdateBrand, type index_d$9_UpdateBrandOptions as UpdateBrandOptions, type index_d$9_UpdateBrandRequest as UpdateBrandRequest, type index_d$9_UpdateBrandResponse as UpdateBrandResponse, type index_d$9_UpdateBrandResponseNonNullableFields as UpdateBrandResponseNonNullableFields, WebhookIdentityType$8 as WebhookIdentityType, type index_d$9__publicOnBrandCreatedType as _publicOnBrandCreatedType, type index_d$9__publicOnBrandDeletedType as _publicOnBrandDeletedType, type index_d$9__publicOnBrandUpdatedType as _publicOnBrandUpdatedType, index_d$9_bulkCreateBrands as bulkCreateBrands, index_d$9_bulkDeleteBrands as bulkDeleteBrands, index_d$9_bulkGetOrCreateBrands as bulkGetOrCreateBrands, index_d$9_bulkUpdateBrands as bulkUpdateBrands, index_d$9_createBrand as createBrand, index_d$9_deleteBrand as deleteBrand, index_d$9_getBrand as getBrand, index_d$9_getOrCreateBrand as getOrCreateBrand, index_d$9_onBrandCreated as onBrandCreated, index_d$9_onBrandDeleted as onBrandDeleted, index_d$9_onBrandUpdated as onBrandUpdated, onBrandCreated$1 as publicOnBrandCreated, onBrandDeleted$1 as publicOnBrandDeleted, onBrandUpdated$1 as publicOnBrandUpdated, index_d$9_queryBrands as queryBrands, index_d$9_updateBrand as updateBrand };
}

/**
 * Customizations include options and modifiers which can later be applied to products.
 * Options are designed to add variations to a product, where modifiers add a customizable change to the product but without creating another variant.
 */
interface Customization extends CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings$1;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings$1;
    /**
     * Customization ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`). */
    name?: string;
    /** Customization type. */
    customizationType?: CustomizationType;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     */
    customizationRenderType?: CustomizationRenderType;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
/** @oneof */
interface CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings$1;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings$1;
}
declare enum CustomizationType {
    UNKNOWN_CUSTOMIZATION_TYPE = "UNKNOWN_CUSTOMIZATION_TYPE",
    PRODUCT_OPTION = "PRODUCT_OPTION",
    MODIFIER = "MODIFIER"
}
declare enum CustomizationRenderType {
    UNKNOWN_CUSTOMIZATION_RENDER_TYPE = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE",
    FREE_TEXT = "FREE_TEXT",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface FreeTextSettings$1 {
    /** Minimum text character length. */
    minCharCount?: number;
    /** Maximum text character length. */
    maxCharCount?: number;
    /** Default amount added to a product's price when this choice is assigned to a modifier. */
    defaultAddedPrice?: string | null;
    /** Title to display to customer for their free-text input. */
    title?: string;
}
interface ChoicesSettings$1 {
    /** List of choices. */
    choices?: Choice[];
}
interface Choice extends ChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /**
     * Choice ID.
     * @readonly
     */
    _id?: string;
    /**
     * Choice type.
     *
     * > **Notes:**
     * > + For `customizationRenderType: SWATCH_CHOICES`, the supported `choiceType` values are: `ONE_COLOR`, `MULTIPLE_COLORS`, or `IMAGE`.
     * > + For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`, the supported `choiceType` value is: `CHOICE_TEXT`.
     */
    choiceType?: ChoiceType$1;
    /**
     * A read-only key generated based on choice name. Used for eCommerce integration.
     * @readonly
     */
    key?: string | null;
    /** Choice name. */
    name?: string;
    /** Default amount added to a product's price when this customization is assigned to a modifier. */
    defaultAddedPrice?: string | null;
    /**
     * Number of products this choice is assigned to .
     * @readonly
     */
    assignedProductsCount?: number;
}
/** @oneof */
interface ChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
declare enum ChoiceType$1 {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    CHOICE_TEXT = "CHOICE_TEXT",
    ONE_COLOR = "ONE_COLOR",
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    IMAGE = "IMAGE"
}
interface MultipleColors$1 {
    /** A list of color codes. */
    colorCodes?: string[];
}
interface InvalidateCache$5 extends InvalidateCacheGetByOneOf$5 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$5;
    /** Invalidate by page id */
    page?: Page$5;
    /** Invalidate by URI path */
    uri?: URI$5;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$5;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf$5 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$5;
    /** Invalidate by page id */
    page?: Page$5;
    /** Invalidate by URI path */
    uri?: URI$5;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$5;
}
interface App$5 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page$5 {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI$5 {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File$5 {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateCustomizationRequest {
    /** Customization to create. */
    customization: Customization;
}
interface CreateCustomizationResponse {
    /** Created customization. */
    customization?: Customization;
}
interface GetCustomizationRequest {
    /** Customization ID. */
    customizationId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
declare enum RequestedFields$3 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetCustomizationResponse {
    /** Customization. */
    customization?: Customization;
}
interface UpdateCustomizationRequest {
    /** Customization to update. */
    customization: Customization;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface UpdateCustomizationResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface DeleteCustomizationRequest {
    /** Customization ID. */
    customizationId: string;
}
interface DeleteCustomizationResponse {
}
interface QueryCustomizationsRequest {
    /** Query options. */
    query?: CursorQuery$4;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface CursorQuery$4 extends CursorQueryPagingMethodOneOf$4 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$5;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$5[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$4 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$5;
}
interface Sorting$5 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$5;
}
declare enum SortOrder$5 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$5 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryCustomizationsResponse {
    /** List of customizations. */
    customizations?: Customization[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$5;
}
interface CursorPagingMetadata$5 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$5;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$5 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateCustomizationsRequest {
    /** Customizations to create. */
    customizations: Customization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateCustomizationsResponse {
    /** Customizations created by bulk action. */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$4;
}
interface BulkCustomizationResult {
    /** Bulk action metadata for customization. */
    itemMetadata?: ItemMetadata$4;
    /**
     * Full customization entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    customization?: Customization;
}
interface ItemMetadata$4 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$4;
}
interface ApplicationError$4 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$4 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface CustomizationIdsWrapper {
    /**
     * list of all the customization ids that are invalid
     * e.g list of failed choices ids
     */
    customizationIds?: string[];
}
interface AddCustomizationChoicesRequest {
    /** Customization ID. */
    customizationId: string;
    /** Choices to add. */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface AddCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface SetCustomizationChoicesRequest {
    /** Customization ID. */
    customizationId: string;
    /** Choices to set. */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface SetCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface RemoveCustomizationChoicesRequest {
    /** Customization ID. */
    customizationId: string;
    /** IDs of choices to remove. */
    choiceIds: string[];
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface RemoveCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface BulkAddCustomizationChoicesRequest {
    /** List of customization IDs and choices. */
    customizationsChoices: CustomizationChoices[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface CustomizationChoices {
    /** Customization ID. */
    customizationId?: string;
    /** Choices to add. */
    choices?: Choice[];
}
interface BulkAddCustomizationChoicesResponse {
    /** Customizations updated by bulk action. */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$4;
}
interface BulkUpdateCustomizationsRequest {
    /** List of customizations to update. */
    customizations: MaskedCustomization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface MaskedCustomization {
    /** Customization to update. */
    customization?: Customization;
}
interface BulkUpdateCustomizationsResponse {
    /** Customizations updated by bulk action. */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$4;
}
interface DomainEvent$5 extends DomainEventBodyOneOf$5 {
    createdEvent?: EntityCreatedEvent$5;
    updatedEvent?: EntityUpdatedEvent$5;
    deletedEvent?: EntityDeletedEvent$5;
    actionEvent?: ActionEvent$5;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$5 {
    createdEvent?: EntityCreatedEvent$5;
    updatedEvent?: EntityUpdatedEvent$5;
    deletedEvent?: EntityDeletedEvent$5;
    actionEvent?: ActionEvent$5;
}
interface EntityCreatedEvent$5 {
    entity?: string;
}
interface RestoreInfo$5 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$5 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$5 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$5 {
    body?: string;
}
interface Empty$6 {
}
interface MessageEnvelope$7 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$7;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$7 extends IdentificationDataIdOneOf$7 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$7;
}
/** @oneof */
interface IdentificationDataIdOneOf$7 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$7 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface FreeTextSettingsNonNullableFields$1 {
    minCharCount: number;
    maxCharCount: number;
    title: string;
}
interface MultipleColorsNonNullableFields$1 {
    colorCodes: string[];
}
interface ChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields$1;
    image: string;
    _id: string;
    choiceType: ChoiceType$1;
    name: string;
    assignedProductsCount: number;
}
interface ChoicesSettingsNonNullableFields$1 {
    choices: ChoiceNonNullableFields[];
}
interface CustomizationNonNullableFields {
    freeTextInput?: FreeTextSettingsNonNullableFields$1;
    choicesSettings?: ChoicesSettingsNonNullableFields$1;
    name: string;
    customizationType: CustomizationType;
    customizationRenderType: CustomizationRenderType;
}
interface CreateCustomizationResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface GetCustomizationResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface UpdateCustomizationResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface QueryCustomizationsResponseNonNullableFields {
    customizations: CustomizationNonNullableFields[];
}
interface ApplicationErrorNonNullableFields$4 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$3 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$4;
}
interface BulkCustomizationResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$3;
    customization?: CustomizationNonNullableFields;
}
interface BulkActionMetadataNonNullableFields$3 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateCustomizationsResponseNonNullableFields {
    results: BulkCustomizationResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$3;
}
interface AddCustomizationChoicesResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface SetCustomizationChoicesResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface RemoveCustomizationChoicesResponseNonNullableFields {
    customization?: CustomizationNonNullableFields;
}
interface BulkAddCustomizationChoicesResponseNonNullableFields {
    results: BulkCustomizationResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$3;
}
interface BulkUpdateCustomizationsResponseNonNullableFields {
    results: BulkCustomizationResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$3;
}
interface BaseEventMetadata$5 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$7;
}
interface EventMetadata$4 extends BaseEventMetadata$5 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface CustomizationCreatedEnvelope {
    entity: Customization;
    metadata: EventMetadata$4;
}
interface CustomizationUpdatedEnvelope {
    entity: Customization;
    metadata: EventMetadata$4;
}
interface CustomizationDeletedEnvelope {
    entity: Customization;
    metadata: EventMetadata$4;
}
interface GetCustomizationOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface UpdateCustomization {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     */
    freeTextInput?: FreeTextSettings$1;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings$1;
    /**
     * Customization ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`). */
    name?: string;
    /** Customization type. */
    customizationType?: CustomizationType;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     */
    customizationRenderType?: CustomizationRenderType;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface UpdateCustomizationOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface QueryCustomizationsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[] | undefined;
}
interface QueryCursorResult$5 {
    cursors: Cursors$5;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface CustomizationsQueryResult extends QueryCursorResult$5 {
    items: Customization[];
    query: CustomizationsQueryBuilder;
    next: () => Promise<CustomizationsQueryResult>;
    prev: () => Promise<CustomizationsQueryResult>;
}
interface CustomizationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => CustomizationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any[]) => CustomizationsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: any) => CustomizationsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name' | 'customizationType' | 'customizationRenderType', value: boolean) => CustomizationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'name'>) => CustomizationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'name'>) => CustomizationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => CustomizationsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => CustomizationsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<CustomizationsQueryResult>;
}
interface BulkCreateCustomizationsOptions {
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface AddCustomizationChoicesOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface SetCustomizationChoicesOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface RemoveCustomizationChoicesOptions {
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface BulkAddCustomizationChoicesOptions {
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}
interface BulkUpdateCustomizationsOptions {
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$3[];
}

declare function createCustomization$1(httpClient: HttpClient): CreateCustomizationSignature;
interface CreateCustomizationSignature {
    /**
     * Creates a customization.
     * @param - Customization to create.
     * @returns Created customization.
     */
    (customization: Customization): Promise<Customization & CustomizationNonNullableFields>;
}
declare function getCustomization$1(httpClient: HttpClient): GetCustomizationSignature;
interface GetCustomizationSignature {
    /**
     * Retrieves a customization.
     * @param - Customization ID.
     * @returns Customization.
     */
    (customizationId: string, options?: GetCustomizationOptions | undefined): Promise<Customization & CustomizationNonNullableFields>;
}
declare function updateCustomization$1(httpClient: HttpClient): UpdateCustomizationSignature;
interface UpdateCustomizationSignature {
    /**
     * Updates a customization.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - Customization ID.
     * @returns Updated customization.
     */
    (_id: string | null, customization: UpdateCustomization, options?: UpdateCustomizationOptions | undefined): Promise<Customization & CustomizationNonNullableFields>;
}
declare function deleteCustomization$1(httpClient: HttpClient): DeleteCustomizationSignature;
interface DeleteCustomizationSignature {
    /**
     * Deletes a customization.
     *
     * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
     * @param - Customization ID.
     */
    (customizationId: string): Promise<void>;
}
declare function queryCustomizations$1(httpClient: HttpClient): QueryCustomizationsSignature;
interface QueryCustomizationsSignature {
    /**
     * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Customizations runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryCustomizationsOptions | undefined): CustomizationsQueryBuilder;
}
declare function bulkCreateCustomizations$1(httpClient: HttpClient): BulkCreateCustomizationsSignature;
interface BulkCreateCustomizationsSignature {
    /**
     * Creates multiple brands.
     * @param - Customizations to create.
     */
    (customizations: Customization[], options?: BulkCreateCustomizationsOptions | undefined): Promise<BulkCreateCustomizationsResponse & BulkCreateCustomizationsResponseNonNullableFields>;
}
declare function addCustomizationChoices$1(httpClient: HttpClient): AddCustomizationChoicesSignature;
interface AddCustomizationChoicesSignature {
    /**
     * Adds choices to a customization.
     * @param - Customization ID.
     * @param - Choices to add.
     */
    (customizationId: string, choices: Choice[], options?: AddCustomizationChoicesOptions | undefined): Promise<AddCustomizationChoicesResponse & AddCustomizationChoicesResponseNonNullableFields>;
}
declare function setCustomizationChoices$1(httpClient: HttpClient): SetCustomizationChoicesSignature;
interface SetCustomizationChoicesSignature {
    /**
     * Sets a customization's choices. Any and all existing choices will be overridden.
     *
     * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - Choices to set.
     */
    (customizationId: string, choices: Choice[], options?: SetCustomizationChoicesOptions | undefined): Promise<SetCustomizationChoicesResponse & SetCustomizationChoicesResponseNonNullableFields>;
}
declare function removeCustomizationChoices$1(httpClient: HttpClient): RemoveCustomizationChoicesSignature;
interface RemoveCustomizationChoicesSignature {
    /**
     * Removes choices from a customization.
     *
     * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - IDs of choices to remove.
     */
    (customizationId: string, choiceIds: string[], options?: RemoveCustomizationChoicesOptions | undefined): Promise<RemoveCustomizationChoicesResponse & RemoveCustomizationChoicesResponseNonNullableFields>;
}
declare function bulkAddCustomizationChoices$1(httpClient: HttpClient): BulkAddCustomizationChoicesSignature;
interface BulkAddCustomizationChoicesSignature {
    /**
     * Adds choices to multiple customizations.
     * @param - List of customization IDs and choices.
     */
    (customizationsChoices: CustomizationChoices[], options?: BulkAddCustomizationChoicesOptions | undefined): Promise<BulkAddCustomizationChoicesResponse & BulkAddCustomizationChoicesResponseNonNullableFields>;
}
declare function bulkUpdateCustomizations$1(httpClient: HttpClient): BulkUpdateCustomizationsSignature;
interface BulkUpdateCustomizationsSignature {
    /**
     * Updates multiple customizations.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - List of customizations to update.
     */
    (customizations: MaskedCustomization[], options?: BulkUpdateCustomizationsOptions | undefined): Promise<BulkUpdateCustomizationsResponse & BulkUpdateCustomizationsResponseNonNullableFields>;
}
declare const onCustomizationCreated$1: EventDefinition<CustomizationCreatedEnvelope, "wix.stores.catalog.v3.customization_created">;
declare const onCustomizationUpdated$1: EventDefinition<CustomizationUpdatedEnvelope, "wix.stores.catalog.v3.customization_updated">;
declare const onCustomizationDeleted$1: EventDefinition<CustomizationDeletedEnvelope, "wix.stores.catalog.v3.customization_deleted">;

declare function createEventModule$5<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createCustomization: MaybeContext<BuildRESTFunction<typeof createCustomization$1> & typeof createCustomization$1>;
declare const getCustomization: MaybeContext<BuildRESTFunction<typeof getCustomization$1> & typeof getCustomization$1>;
declare const updateCustomization: MaybeContext<BuildRESTFunction<typeof updateCustomization$1> & typeof updateCustomization$1>;
declare const deleteCustomization: MaybeContext<BuildRESTFunction<typeof deleteCustomization$1> & typeof deleteCustomization$1>;
declare const queryCustomizations: MaybeContext<BuildRESTFunction<typeof queryCustomizations$1> & typeof queryCustomizations$1>;
declare const bulkCreateCustomizations: MaybeContext<BuildRESTFunction<typeof bulkCreateCustomizations$1> & typeof bulkCreateCustomizations$1>;
declare const addCustomizationChoices: MaybeContext<BuildRESTFunction<typeof addCustomizationChoices$1> & typeof addCustomizationChoices$1>;
declare const setCustomizationChoices: MaybeContext<BuildRESTFunction<typeof setCustomizationChoices$1> & typeof setCustomizationChoices$1>;
declare const removeCustomizationChoices: MaybeContext<BuildRESTFunction<typeof removeCustomizationChoices$1> & typeof removeCustomizationChoices$1>;
declare const bulkAddCustomizationChoices: MaybeContext<BuildRESTFunction<typeof bulkAddCustomizationChoices$1> & typeof bulkAddCustomizationChoices$1>;
declare const bulkUpdateCustomizations: MaybeContext<BuildRESTFunction<typeof bulkUpdateCustomizations$1> & typeof bulkUpdateCustomizations$1>;

type _publicOnCustomizationCreatedType = typeof onCustomizationCreated$1;
/**
 * Triggered when a customization is created.
 */
declare const onCustomizationCreated: ReturnType<typeof createEventModule$5<_publicOnCustomizationCreatedType>>;

type _publicOnCustomizationUpdatedType = typeof onCustomizationUpdated$1;
/**
 * Triggered when a customization is updated.
 */
declare const onCustomizationUpdated: ReturnType<typeof createEventModule$5<_publicOnCustomizationUpdatedType>>;

type _publicOnCustomizationDeletedType = typeof onCustomizationDeleted$1;
/**
 * Triggered when a customization is deleted.
 */
declare const onCustomizationDeleted: ReturnType<typeof createEventModule$5<_publicOnCustomizationDeletedType>>;

type index_d$8_AddCustomizationChoicesOptions = AddCustomizationChoicesOptions;
type index_d$8_AddCustomizationChoicesRequest = AddCustomizationChoicesRequest;
type index_d$8_AddCustomizationChoicesResponse = AddCustomizationChoicesResponse;
type index_d$8_AddCustomizationChoicesResponseNonNullableFields = AddCustomizationChoicesResponseNonNullableFields;
type index_d$8_BulkAddCustomizationChoicesOptions = BulkAddCustomizationChoicesOptions;
type index_d$8_BulkAddCustomizationChoicesRequest = BulkAddCustomizationChoicesRequest;
type index_d$8_BulkAddCustomizationChoicesResponse = BulkAddCustomizationChoicesResponse;
type index_d$8_BulkAddCustomizationChoicesResponseNonNullableFields = BulkAddCustomizationChoicesResponseNonNullableFields;
type index_d$8_BulkCreateCustomizationsOptions = BulkCreateCustomizationsOptions;
type index_d$8_BulkCreateCustomizationsRequest = BulkCreateCustomizationsRequest;
type index_d$8_BulkCreateCustomizationsResponse = BulkCreateCustomizationsResponse;
type index_d$8_BulkCreateCustomizationsResponseNonNullableFields = BulkCreateCustomizationsResponseNonNullableFields;
type index_d$8_BulkCustomizationResult = BulkCustomizationResult;
type index_d$8_BulkUpdateCustomizationsOptions = BulkUpdateCustomizationsOptions;
type index_d$8_BulkUpdateCustomizationsRequest = BulkUpdateCustomizationsRequest;
type index_d$8_BulkUpdateCustomizationsResponse = BulkUpdateCustomizationsResponse;
type index_d$8_BulkUpdateCustomizationsResponseNonNullableFields = BulkUpdateCustomizationsResponseNonNullableFields;
type index_d$8_Choice = Choice;
type index_d$8_ChoiceValueOneOf = ChoiceValueOneOf;
type index_d$8_CreateCustomizationRequest = CreateCustomizationRequest;
type index_d$8_CreateCustomizationResponse = CreateCustomizationResponse;
type index_d$8_CreateCustomizationResponseNonNullableFields = CreateCustomizationResponseNonNullableFields;
type index_d$8_Customization = Customization;
type index_d$8_CustomizationChoices = CustomizationChoices;
type index_d$8_CustomizationCreatedEnvelope = CustomizationCreatedEnvelope;
type index_d$8_CustomizationCustomizationSettingsOneOf = CustomizationCustomizationSettingsOneOf;
type index_d$8_CustomizationDeletedEnvelope = CustomizationDeletedEnvelope;
type index_d$8_CustomizationIdsWrapper = CustomizationIdsWrapper;
type index_d$8_CustomizationNonNullableFields = CustomizationNonNullableFields;
type index_d$8_CustomizationRenderType = CustomizationRenderType;
declare const index_d$8_CustomizationRenderType: typeof CustomizationRenderType;
type index_d$8_CustomizationType = CustomizationType;
declare const index_d$8_CustomizationType: typeof CustomizationType;
type index_d$8_CustomizationUpdatedEnvelope = CustomizationUpdatedEnvelope;
type index_d$8_CustomizationsQueryBuilder = CustomizationsQueryBuilder;
type index_d$8_CustomizationsQueryResult = CustomizationsQueryResult;
type index_d$8_DeleteCustomizationRequest = DeleteCustomizationRequest;
type index_d$8_DeleteCustomizationResponse = DeleteCustomizationResponse;
type index_d$8_GetCustomizationOptions = GetCustomizationOptions;
type index_d$8_GetCustomizationRequest = GetCustomizationRequest;
type index_d$8_GetCustomizationResponse = GetCustomizationResponse;
type index_d$8_GetCustomizationResponseNonNullableFields = GetCustomizationResponseNonNullableFields;
type index_d$8_MaskedCustomization = MaskedCustomization;
type index_d$8_QueryCustomizationsOptions = QueryCustomizationsOptions;
type index_d$8_QueryCustomizationsRequest = QueryCustomizationsRequest;
type index_d$8_QueryCustomizationsResponse = QueryCustomizationsResponse;
type index_d$8_QueryCustomizationsResponseNonNullableFields = QueryCustomizationsResponseNonNullableFields;
type index_d$8_RemoveCustomizationChoicesOptions = RemoveCustomizationChoicesOptions;
type index_d$8_RemoveCustomizationChoicesRequest = RemoveCustomizationChoicesRequest;
type index_d$8_RemoveCustomizationChoicesResponse = RemoveCustomizationChoicesResponse;
type index_d$8_RemoveCustomizationChoicesResponseNonNullableFields = RemoveCustomizationChoicesResponseNonNullableFields;
type index_d$8_SetCustomizationChoicesOptions = SetCustomizationChoicesOptions;
type index_d$8_SetCustomizationChoicesRequest = SetCustomizationChoicesRequest;
type index_d$8_SetCustomizationChoicesResponse = SetCustomizationChoicesResponse;
type index_d$8_SetCustomizationChoicesResponseNonNullableFields = SetCustomizationChoicesResponseNonNullableFields;
type index_d$8_UpdateCustomization = UpdateCustomization;
type index_d$8_UpdateCustomizationOptions = UpdateCustomizationOptions;
type index_d$8_UpdateCustomizationRequest = UpdateCustomizationRequest;
type index_d$8_UpdateCustomizationResponse = UpdateCustomizationResponse;
type index_d$8_UpdateCustomizationResponseNonNullableFields = UpdateCustomizationResponseNonNullableFields;
type index_d$8__publicOnCustomizationCreatedType = _publicOnCustomizationCreatedType;
type index_d$8__publicOnCustomizationDeletedType = _publicOnCustomizationDeletedType;
type index_d$8__publicOnCustomizationUpdatedType = _publicOnCustomizationUpdatedType;
declare const index_d$8_addCustomizationChoices: typeof addCustomizationChoices;
declare const index_d$8_bulkAddCustomizationChoices: typeof bulkAddCustomizationChoices;
declare const index_d$8_bulkCreateCustomizations: typeof bulkCreateCustomizations;
declare const index_d$8_bulkUpdateCustomizations: typeof bulkUpdateCustomizations;
declare const index_d$8_createCustomization: typeof createCustomization;
declare const index_d$8_deleteCustomization: typeof deleteCustomization;
declare const index_d$8_getCustomization: typeof getCustomization;
declare const index_d$8_onCustomizationCreated: typeof onCustomizationCreated;
declare const index_d$8_onCustomizationDeleted: typeof onCustomizationDeleted;
declare const index_d$8_onCustomizationUpdated: typeof onCustomizationUpdated;
declare const index_d$8_queryCustomizations: typeof queryCustomizations;
declare const index_d$8_removeCustomizationChoices: typeof removeCustomizationChoices;
declare const index_d$8_setCustomizationChoices: typeof setCustomizationChoices;
declare const index_d$8_updateCustomization: typeof updateCustomization;
declare namespace index_d$8 {
  export { type ActionEvent$5 as ActionEvent, type index_d$8_AddCustomizationChoicesOptions as AddCustomizationChoicesOptions, type index_d$8_AddCustomizationChoicesRequest as AddCustomizationChoicesRequest, type index_d$8_AddCustomizationChoicesResponse as AddCustomizationChoicesResponse, type index_d$8_AddCustomizationChoicesResponseNonNullableFields as AddCustomizationChoicesResponseNonNullableFields, type App$5 as App, type ApplicationError$4 as ApplicationError, type BaseEventMetadata$5 as BaseEventMetadata, type BulkActionMetadata$4 as BulkActionMetadata, type index_d$8_BulkAddCustomizationChoicesOptions as BulkAddCustomizationChoicesOptions, type index_d$8_BulkAddCustomizationChoicesRequest as BulkAddCustomizationChoicesRequest, type index_d$8_BulkAddCustomizationChoicesResponse as BulkAddCustomizationChoicesResponse, type index_d$8_BulkAddCustomizationChoicesResponseNonNullableFields as BulkAddCustomizationChoicesResponseNonNullableFields, type index_d$8_BulkCreateCustomizationsOptions as BulkCreateCustomizationsOptions, type index_d$8_BulkCreateCustomizationsRequest as BulkCreateCustomizationsRequest, type index_d$8_BulkCreateCustomizationsResponse as BulkCreateCustomizationsResponse, type index_d$8_BulkCreateCustomizationsResponseNonNullableFields as BulkCreateCustomizationsResponseNonNullableFields, type index_d$8_BulkCustomizationResult as BulkCustomizationResult, type index_d$8_BulkUpdateCustomizationsOptions as BulkUpdateCustomizationsOptions, type index_d$8_BulkUpdateCustomizationsRequest as BulkUpdateCustomizationsRequest, type index_d$8_BulkUpdateCustomizationsResponse as BulkUpdateCustomizationsResponse, type index_d$8_BulkUpdateCustomizationsResponseNonNullableFields as BulkUpdateCustomizationsResponseNonNullableFields, type index_d$8_Choice as Choice, ChoiceType$1 as ChoiceType, type index_d$8_ChoiceValueOneOf as ChoiceValueOneOf, type ChoicesSettings$1 as ChoicesSettings, type index_d$8_CreateCustomizationRequest as CreateCustomizationRequest, type index_d$8_CreateCustomizationResponse as CreateCustomizationResponse, type index_d$8_CreateCustomizationResponseNonNullableFields as CreateCustomizationResponseNonNullableFields, type CursorPaging$5 as CursorPaging, type CursorPagingMetadata$5 as CursorPagingMetadata, type CursorQuery$4 as CursorQuery, type CursorQueryPagingMethodOneOf$4 as CursorQueryPagingMethodOneOf, type Cursors$5 as Cursors, type index_d$8_Customization as Customization, type index_d$8_CustomizationChoices as CustomizationChoices, type index_d$8_CustomizationCreatedEnvelope as CustomizationCreatedEnvelope, type index_d$8_CustomizationCustomizationSettingsOneOf as CustomizationCustomizationSettingsOneOf, type index_d$8_CustomizationDeletedEnvelope as CustomizationDeletedEnvelope, type index_d$8_CustomizationIdsWrapper as CustomizationIdsWrapper, type index_d$8_CustomizationNonNullableFields as CustomizationNonNullableFields, index_d$8_CustomizationRenderType as CustomizationRenderType, index_d$8_CustomizationType as CustomizationType, type index_d$8_CustomizationUpdatedEnvelope as CustomizationUpdatedEnvelope, type index_d$8_CustomizationsQueryBuilder as CustomizationsQueryBuilder, type index_d$8_CustomizationsQueryResult as CustomizationsQueryResult, type index_d$8_DeleteCustomizationRequest as DeleteCustomizationRequest, type index_d$8_DeleteCustomizationResponse as DeleteCustomizationResponse, type DomainEvent$5 as DomainEvent, type DomainEventBodyOneOf$5 as DomainEventBodyOneOf, type Empty$6 as Empty, type EntityCreatedEvent$5 as EntityCreatedEvent, type EntityDeletedEvent$5 as EntityDeletedEvent, type EntityUpdatedEvent$5 as EntityUpdatedEvent, type EventMetadata$4 as EventMetadata, type File$5 as File, type FreeTextSettings$1 as FreeTextSettings, type index_d$8_GetCustomizationOptions as GetCustomizationOptions, type index_d$8_GetCustomizationRequest as GetCustomizationRequest, type index_d$8_GetCustomizationResponse as GetCustomizationResponse, type index_d$8_GetCustomizationResponseNonNullableFields as GetCustomizationResponseNonNullableFields, type IdentificationData$7 as IdentificationData, type IdentificationDataIdOneOf$7 as IdentificationDataIdOneOf, type InvalidateCache$5 as InvalidateCache, type InvalidateCacheGetByOneOf$5 as InvalidateCacheGetByOneOf, type ItemMetadata$4 as ItemMetadata, type index_d$8_MaskedCustomization as MaskedCustomization, type MessageEnvelope$7 as MessageEnvelope, type MultipleColors$1 as MultipleColors, type Page$5 as Page, type index_d$8_QueryCustomizationsOptions as QueryCustomizationsOptions, type index_d$8_QueryCustomizationsRequest as QueryCustomizationsRequest, type index_d$8_QueryCustomizationsResponse as QueryCustomizationsResponse, type index_d$8_QueryCustomizationsResponseNonNullableFields as QueryCustomizationsResponseNonNullableFields, type index_d$8_RemoveCustomizationChoicesOptions as RemoveCustomizationChoicesOptions, type index_d$8_RemoveCustomizationChoicesRequest as RemoveCustomizationChoicesRequest, type index_d$8_RemoveCustomizationChoicesResponse as RemoveCustomizationChoicesResponse, type index_d$8_RemoveCustomizationChoicesResponseNonNullableFields as RemoveCustomizationChoicesResponseNonNullableFields, RequestedFields$3 as RequestedFields, type RestoreInfo$5 as RestoreInfo, type index_d$8_SetCustomizationChoicesOptions as SetCustomizationChoicesOptions, type index_d$8_SetCustomizationChoicesRequest as SetCustomizationChoicesRequest, type index_d$8_SetCustomizationChoicesResponse as SetCustomizationChoicesResponse, type index_d$8_SetCustomizationChoicesResponseNonNullableFields as SetCustomizationChoicesResponseNonNullableFields, SortOrder$5 as SortOrder, type Sorting$5 as Sorting, type URI$5 as URI, type index_d$8_UpdateCustomization as UpdateCustomization, type index_d$8_UpdateCustomizationOptions as UpdateCustomizationOptions, type index_d$8_UpdateCustomizationRequest as UpdateCustomizationRequest, type index_d$8_UpdateCustomizationResponse as UpdateCustomizationResponse, type index_d$8_UpdateCustomizationResponseNonNullableFields as UpdateCustomizationResponseNonNullableFields, WebhookIdentityType$7 as WebhookIdentityType, type index_d$8__publicOnCustomizationCreatedType as _publicOnCustomizationCreatedType, type index_d$8__publicOnCustomizationDeletedType as _publicOnCustomizationDeletedType, type index_d$8__publicOnCustomizationUpdatedType as _publicOnCustomizationUpdatedType, index_d$8_addCustomizationChoices as addCustomizationChoices, index_d$8_bulkAddCustomizationChoices as bulkAddCustomizationChoices, index_d$8_bulkCreateCustomizations as bulkCreateCustomizations, index_d$8_bulkUpdateCustomizations as bulkUpdateCustomizations, index_d$8_createCustomization as createCustomization, index_d$8_deleteCustomization as deleteCustomization, index_d$8_getCustomization as getCustomization, index_d$8_onCustomizationCreated as onCustomizationCreated, index_d$8_onCustomizationDeleted as onCustomizationDeleted, index_d$8_onCustomizationUpdated as onCustomizationUpdated, onCustomizationCreated$1 as publicOnCustomizationCreated, onCustomizationDeleted$1 as publicOnCustomizationDeleted, onCustomizationUpdated$1 as publicOnCustomizationUpdated, index_d$8_queryCustomizations as queryCustomizations, index_d$8_removeCustomizationChoices as removeCustomizationChoices, index_d$8_setCustomizationChoices as setCustomizationChoices, index_d$8_updateCustomization as updateCustomization };
}

/**
 * An info section is a visible property of a product
 * Add info sections to a product to provide all the explanations your customers need.
 */
interface InfoSection$1 {
    /**
     * Info section ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the info section is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the info section.
     *
     * Ignored when creating an info section.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the info section was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the info section was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Unique name. Used as an identifier. */
    uniqueName?: string;
    /** Info section title. */
    title?: string;
    /**
     * Info section description using rich content.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent$1;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
    /**
     * Number of products this info section is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Info Sections API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface RichContent$1 {
    /** Node objects representing a rich content document. */
    nodes?: Node$1[];
    /** Object metadata. */
    metadata?: Metadata$1;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle$1;
}
interface Node$1 extends NodeDataOneOf$1 {
    /** Data for a button node. */
    buttonData?: ButtonData$1;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData$1;
    /** Data for a divider node. */
    dividerData?: DividerData$1;
    /** Data for a file node. */
    fileData?: FileData$1;
    /** Data for a gallery node. */
    galleryData?: GalleryData$1;
    /** Data for a GIF node. */
    gifData?: GIFData$1;
    /** Data for a heading node. */
    headingData?: HeadingData$1;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData$1;
    /** Data for an image node. */
    imageData?: ImageData$1;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData$1;
    /** Data for a map node. */
    mapData?: MapData$1;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData$1;
    /** Data for a poll node. */
    pollData?: PollData$1;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData$1;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData$1;
    /** Data for a video node. */
    videoData?: VideoData$1;
    /** Data for an oEmbed node. */
    embedData?: EmbedData$1;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData$1;
    /** Data for a table node. */
    tableData?: TableData$1;
    /** Data for a table cell node. */
    tableCellData?: TableCellData$1;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData$1;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData$1;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData$1;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData$1;
    /** Data for a caption node. */
    captionData?: CaptionData$1;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType$1;
    /** Node ID. */
    _id?: string;
    /** A list of child nodes. */
    nodes?: Node$1[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle$1;
}
/** @oneof */
interface NodeDataOneOf$1 {
    /** Data for a button node. */
    buttonData?: ButtonData$1;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData$1;
    /** Data for a divider node. */
    dividerData?: DividerData$1;
    /** Data for a file node. */
    fileData?: FileData$1;
    /** Data for a gallery node. */
    galleryData?: GalleryData$1;
    /** Data for a GIF node. */
    gifData?: GIFData$1;
    /** Data for a heading node. */
    headingData?: HeadingData$1;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData$1;
    /** Data for an image node. */
    imageData?: ImageData$1;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData$1;
    /** Data for a map node. */
    mapData?: MapData$1;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData$1;
    /** Data for a poll node. */
    pollData?: PollData$1;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData$1;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData$1;
    /** Data for a video node. */
    videoData?: VideoData$1;
    /** Data for an oEmbed node. */
    embedData?: EmbedData$1;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData$1;
    /** Data for a table node. */
    tableData?: TableData$1;
    /** Data for a table cell node. */
    tableCellData?: TableCellData$1;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData$1;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData$1;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData$1;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData$1;
    /** Data for a caption node. */
    captionData?: CaptionData$1;
}
declare enum NodeType$1 {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION"
}
interface NodeStyle$1 {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData$1 {
    /** Styling for the button's container. */
    containerData?: PluginContainerData$1;
    /** The button type. */
    type?: Type$1;
    /** Styling for the button. */
    styles?: Styles$1;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link$1;
}
interface Border$1 {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface Colors$1 {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
interface PluginContainerData$1 {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth$1;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment$1;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler$1;
    /** The height of the node when it's displayed. */
    height?: Height$1;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType$1 {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
interface PluginContainerDataWidth$1 extends PluginContainerDataWidthDataOneOf$1 {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType$1;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf$1 {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType$1;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment$1 {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
interface Spoiler$1 {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height$1 {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type$1 {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
interface Styles$1 {
    /** Border attributes. */
    border?: Border$1;
    /** Color attributes. */
    colors?: Colors$1;
}
interface Link$1 extends LinkDataOneOf$1 {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target$1;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel$1;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf$1 {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target$1 {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
interface Rel$1 {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData$1 {
    /** Styling for the code block's text. */
    textStyle?: TextStyle$1;
}
interface TextStyle$1 {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment$1;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment$1 {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
interface DividerData$1 {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData$1;
    /** Divider line style. */
    lineStyle?: LineStyle$1;
    /** Divider width. */
    width?: Width$1;
    /** Divider alignment. */
    alignment?: Alignment$1;
}
declare enum LineStyle$1 {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
declare enum Width$1 {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
declare enum Alignment$1 {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
interface FileData$1 {
    /** Styling for the file's container. */
    containerData?: PluginContainerData$1;
    /** The source for the file's data. */
    src?: FileSource$1;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings$1;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode$1 {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
interface FileSource$1 extends FileSourceDataOneOf$1 {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf$1 {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
}
interface PDFSettings$1 {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode$1;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData$1 {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData$1;
    /** The items in the gallery. */
    items?: Item$1[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions$1;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface Media$1 {
    /** The source for the media's data. */
    src?: FileSource$1;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image$1 {
    /** Image file details. */
    media?: Media$1;
    /** Link details for images that are links. */
    link?: Link$1;
}
interface Video$1 {
    /** Video file details. */
    media?: Media$1;
    /** Video thumbnail file details. */
    thumbnail?: Media$1;
}
interface Item$1 extends ItemDataOneOf$1 {
    /** An image item. */
    image?: Image$1;
    /** A video item. */
    video?: Video$1;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf$1 {
    /** An image item. */
    image?: Image$1;
    /** A video item. */
    video?: Video$1;
}
interface GalleryOptions$1 {
    /** Gallery layout. */
    layout?: Layout$1;
    /** Styling for gallery items. */
    item?: ItemStyle$1;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails$1;
}
declare enum LayoutType$1 {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
declare enum Orientation$1 {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
declare enum Crop$1 {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
declare enum ThumbnailsAlignment$1 {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
interface Layout$1 {
    /** Gallery layout type. */
    type?: LayoutType$1;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation$1;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle$1 {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop$1;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails$1 {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment$1;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData$1 {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData$1;
    /** The source of the full size GIF. */
    original?: GIF$1;
    /** The source of the downsized GIF. */
    downsized?: GIF$1;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
}
interface GIF$1 {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
interface HeadingData$1 {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle$1;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData$1 extends HTMLDataDataOneOf$1 {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. */
    containerData?: PluginContainerData$1;
    /** The type of HTML code. */
    source?: Source$1;
}
/** @oneof */
interface HTMLDataDataOneOf$1 {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source$1 {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
interface ImageData$1 {
    /** Styling for the image's container. */
    containerData?: PluginContainerData$1;
    /** Image file details. */
    image?: Media$1;
    /** Link details for images that are links. */
    link?: Link$1;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface LinkPreviewData$1 {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData$1;
    /** Link details. */
    link?: Link$1;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
interface MapData$1 {
    /** Styling for the map's container. */
    containerData?: PluginContainerData$1;
    /** Map settings. */
    mapSettings?: MapSettings$1;
}
interface MapSettings$1 {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType$1;
}
declare enum MapType$1 {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
interface ParagraphData$1 {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle$1;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData$1 {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData$1;
    /** Poll data. */
    poll?: Poll$1;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout$1;
    /** Styling for the poll and voting options. */
    design?: Design$1;
}
declare enum ViewRole$1 {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
declare enum VoteRole$1 {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
interface Permissions$1 {
    /** Sets who can view the poll results. */
    view?: ViewRole$1;
    /** Sets who can vote. */
    vote?: VoteRole$1;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option$1 {
    /** Option ID. */
    _id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: Media$1;
}
interface Settings$1 {
    /** Permissions settings for voting. */
    permissions?: Permissions$1;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType$1 {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
declare enum PollLayoutDirection$1 {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface PollLayout$1 {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType$1;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection$1;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout$1 {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType$1 {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
interface Gradient$1 {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
interface Background$1 extends BackgroundBackgroundOneOf$1 {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: Media$1;
    /** Details for a gradient background. */
    gradient?: Gradient$1;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType$1;
}
/** @oneof */
interface BackgroundBackgroundOneOf$1 {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: Media$1;
    /** Details for a gradient background. */
    gradient?: Gradient$1;
}
interface PollDesign$1 {
    /** Background styling. */
    background?: Background$1;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign$1 {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll$1 {
    /** Poll ID. */
    _id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: Media$1;
    /** Voting options. */
    options?: Option$1[];
    /** The poll's permissions and display settings. */
    settings?: Settings$1;
}
interface PollDataLayout$1 {
    /** Poll layout settings. */
    poll?: PollLayout$1;
    /** Voting otpions layout settings. */
    options?: OptionLayout$1;
}
interface Design$1 {
    /** Styling for the poll. */
    poll?: PollDesign$1;
    /** Styling for voting options. */
    options?: OptionDesign$1;
}
interface TextData$1 {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration$1[];
}
/** Adds appearence changes to text */
interface Decoration$1 extends DecorationDataOneOf$1 {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData$1;
    /** Data for a color decoration. */
    colorData?: ColorData$1;
    /** Data for an external link decoration. */
    linkData?: LinkData$1;
    /** Data for a mention decoration. */
    mentionData?: MentionData$1;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData$1;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData$1;
    /** The type of decoration to apply. */
    type?: DecorationType$1;
}
/** @oneof */
interface DecorationDataOneOf$1 {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData$1;
    /** Data for a color decoration. */
    colorData?: ColorData$1;
    /** Data for an external link decoration. */
    linkData?: LinkData$1;
    /** Data for a mention decoration. */
    mentionData?: MentionData$1;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData$1;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData$1;
}
declare enum DecorationType$1 {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
interface AnchorData$1 {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData$1 {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData$1 {
    /** Link details. */
    link?: Link$1;
}
interface MentionData$1 {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    _id?: string | null;
}
interface FontSizeData$1 {
    /** The units used for the font size. */
    unit?: FontType$1;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType$1 {
    PX = "PX",
    EM = "EM"
}
interface SpoilerData$1 {
    /** Spoiler ID. */
    _id?: string | null;
}
interface AppEmbedData$1 extends AppEmbedDataAppDataOneOf$1 {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData$1;
    /** Data for embedded Wix Events content. */
    eventData?: EventData$1;
    /** The type of Wix App content being embedded. */
    type?: AppType$1;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: Media$1;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf$1 {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData$1;
    /** Data for embedded Wix Events content. */
    eventData?: EventData$1;
}
declare enum AppType$1 {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
interface BookingData$1 {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData$1 {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData$1 {
    /** Styling for the video's container. */
    containerData?: PluginContainerData$1;
    /** Video details. */
    video?: Media$1;
    /** Video thumbnail details. */
    thumbnail?: Media$1;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions$1;
}
interface PlaybackOptions$1 {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData$1 {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData$1;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed$1;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed$1 {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData$1 {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData$1;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems$1;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction$1;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems$1 {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
declare enum Direction$1 {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface TableData$1 {
    /** Styling for the table's container. */
    containerData?: PluginContainerData$1;
    /** The table's dimensions. */
    dimensions?: Dimensions$1;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions$1 {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData$1 {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle$1;
    /** The cell's border colors. */
    borderColors?: BorderColors$1;
}
declare enum VerticalAlignment$1 {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
interface CellStyle$1 {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment$1;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface BorderColors$1 {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
declare enum NullValue$1 {
    /** Null value. */
    NULL_VALUE = "NULL_VALUE"
}
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
interface ListValue$1 {
    /** Repeated field of dynamically typed values. */
    values?: any[];
}
interface AudioData$1 {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData$1;
    /** Audio file details. */
    audio?: Media$1;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: Media$1;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData$1 {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData$1 {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData$1 {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData$1 {
    textStyle?: TextStyle$1;
}
interface Metadata$1 {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
interface DocumentStyle$1 {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle$1;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle$1;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle$1;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle$1;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle$1;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle$1;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle$1;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle$1;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle$1;
}
interface TextNodeStyle$1 {
    /** The decorations to apply to the node. */
    decorations?: Decoration$1[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle$1;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface InvalidateCache$4 extends InvalidateCacheGetByOneOf$4 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$4;
    /** Invalidate by page id */
    page?: Page$4;
    /** Invalidate by URI path */
    uri?: URI$4;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$4;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf$4 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$4;
    /** Invalidate by page id */
    page?: Page$4;
    /** Invalidate by URI path */
    uri?: URI$4;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$4;
}
interface App$4 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page$4 {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI$4 {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File$4 {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateInfoSectionRequest {
    /** Info section to create. */
    infoSection: InfoSection$1;
}
interface CreateInfoSectionResponse {
    /** Created info section. */
    infoSection?: InfoSection$1;
}
interface GetInfoSectionRequest {
    /** Info section ID. */
    infoSectionId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
declare enum RequestedFields$2 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetInfoSectionResponse {
    /** Info section. */
    infoSection?: InfoSection$1;
}
interface GetOrCreateInfoSectionRequest {
    /** Info section to retrieve or create. */
    infoSection?: InfoSectionForGetOrCreate;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface InfoSectionForGetOrCreate {
    /**
     * Info section ID.
     * Pass an ID to retrieve an existing info section.
     */
    _id?: string | null;
    /**
     * Info section unique name.
     *
     * > **Note:**
     * > + Pass the `uniqueName` of an existing info section to return it.
     * > + If no such info section exists - pass `uniqueName` and `title` to create an info section.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     *
     * Required when passing `uniqueName` to create a new info section.
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     *
     * Learn more about [Working with Rich Content](https://dev.wix.com/docs/go-headless/tutorials-templates/other-tutorials/working-with-rich-content).
     */
    description?: RichContent$1;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
}
interface GetOrCreateInfoSectionResponse {
    /** Info section. */
    infoSection?: InfoSection$1;
}
interface BulkGetOrCreateInfoSectionsRequest {
    /** Info sections to retrieve or create. */
    infoSections?: InfoSectionForGetOrCreate[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface BulkGetOrCreateInfoSectionsResponse {
    /** Info sections retrieved or created by bulk action. */
    results?: BulkInfoSectionItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface BulkInfoSectionItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata$3;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InfoSection$1;
}
interface ItemMetadata$3 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$3;
}
interface ApplicationError$3 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$3 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateInfoSectionRequest {
    /** Info section to update. */
    infoSection: InfoSection$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface UpdateInfoSectionResponse {
    /** Updated info section. */
    infoSection?: InfoSection$1;
}
interface DeleteInfoSectionRequest {
    /** Info section ID */
    infoSectionId: string;
}
interface DeleteInfoSectionResponse {
}
interface QueryInfoSectionsRequest {
    /** Query options. */
    query?: CursorQuery$3;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface CursorQuery$3 extends CursorQueryPagingMethodOneOf$3 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$4;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$4[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$3 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$4;
}
interface Sorting$4 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$4;
}
declare enum SortOrder$4 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$4 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryInfoSectionsResponse {
    /** List of info sections. */
    infoSections?: InfoSection$1[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$4;
}
interface CursorPagingMetadata$4 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$4;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$4 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateInfoSectionsRequest {
    /** Info sections to create. */
    infoSections: InfoSection$1[];
    /**
     * Whether to return the full created info section entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInfoSectionsResponse {
    /** Info sections created by bulk action. */
    results?: BulkInfoSectionItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface BulkUpdateInfoSectionsRequest {
    /** List of info sections to update. */
    infoSections: MaskedInfoSection[];
    /**
     * Whether to return the full updated info sections entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface MaskedInfoSection {
    /** Info section to update. */
    infoSection?: InfoSection$1;
}
interface BulkUpdateInfoSectionsResponse {
    /** Info sections updated by bulk action. */
    results?: BulkInfoSectionItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface BulkDeleteInfoSectionsRequest {
    /** IDs of info sections to delete. */
    infoSectionIds: string[];
}
interface BulkDeleteInfoSectionsResponse {
    /** Info sections deleted by bulk action */
    results?: BulkInfoSectionResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$3;
}
interface BulkInfoSectionResult {
    /** Bulk action metadata for info section. */
    itemMetadata?: ItemMetadata$3;
}
interface DomainEvent$4 extends DomainEventBodyOneOf$4 {
    createdEvent?: EntityCreatedEvent$4;
    updatedEvent?: EntityUpdatedEvent$4;
    deletedEvent?: EntityDeletedEvent$4;
    actionEvent?: ActionEvent$4;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$4 {
    createdEvent?: EntityCreatedEvent$4;
    updatedEvent?: EntityUpdatedEvent$4;
    deletedEvent?: EntityDeletedEvent$4;
    actionEvent?: ActionEvent$4;
}
interface EntityCreatedEvent$4 {
    entity?: string;
}
interface RestoreInfo$4 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$4 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$4 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$4 {
    body?: string;
}
interface Empty$5 {
}
interface MessageEnvelope$6 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$6;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$6 extends IdentificationDataIdOneOf$6 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$6;
}
/** @oneof */
interface IdentificationDataIdOneOf$6 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$6 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface PluginContainerDataWidthNonNullableFields$1 {
    size: WidthType$1;
}
interface PluginContainerDataNonNullableFields$1 {
    width?: PluginContainerDataWidthNonNullableFields$1;
    alignment: PluginContainerDataAlignment$1;
}
interface LinkNonNullableFields$1 {
    url: string;
    anchor: string;
    target: Target$1;
}
interface ButtonDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    type: Type$1;
    link?: LinkNonNullableFields$1;
}
interface TextStyleNonNullableFields$1 {
    textAlignment: TextAlignment$1;
}
interface CodeBlockDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface DividerDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    lineStyle: LineStyle$1;
    width: Width$1;
    alignment: Alignment$1;
}
interface PDFSettingsNonNullableFields$1 {
    viewMode: ViewMode$1;
}
interface FileDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    pdfSettings?: PDFSettingsNonNullableFields$1;
}
interface ImageNonNullableFields$1 {
    link?: LinkNonNullableFields$1;
}
interface ItemNonNullableFields$1 {
    image?: ImageNonNullableFields$1;
}
interface LayoutNonNullableFields$1 {
    type: LayoutType$1;
    orientation: Orientation$1;
}
interface ItemStyleNonNullableFields$1 {
    crop: Crop$1;
}
interface ThumbnailsNonNullableFields$1 {
    placement: ThumbnailsAlignment$1;
}
interface GalleryOptionsNonNullableFields$1 {
    layout?: LayoutNonNullableFields$1;
    item?: ItemStyleNonNullableFields$1;
    thumbnails?: ThumbnailsNonNullableFields$1;
}
interface GalleryDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    items: ItemNonNullableFields$1[];
    options?: GalleryOptionsNonNullableFields$1;
}
interface GIFDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    height: number;
    width: number;
}
interface HeadingDataNonNullableFields$1 {
    level: number;
    textStyle?: TextStyleNonNullableFields$1;
}
interface HTMLDataNonNullableFields$1 {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields$1;
    source: Source$1;
}
interface ImageDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    link?: LinkNonNullableFields$1;
}
interface LinkPreviewDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    link?: LinkNonNullableFields$1;
}
interface MapSettingsNonNullableFields$1 {
    mapType: MapType$1;
}
interface MapDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    mapSettings?: MapSettingsNonNullableFields$1;
}
interface ParagraphDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface PermissionsNonNullableFields$1 {
    view: ViewRole$1;
    vote: VoteRole$1;
}
interface SettingsNonNullableFields$1 {
    permissions?: PermissionsNonNullableFields$1;
}
interface PollNonNullableFields$1 {
    settings?: SettingsNonNullableFields$1;
}
interface PollLayoutNonNullableFields$1 {
    type: PollLayoutType$1;
    direction: PollLayoutDirection$1;
}
interface PollDataLayoutNonNullableFields$1 {
    poll?: PollLayoutNonNullableFields$1;
}
interface BackgroundNonNullableFields$1 {
    type: BackgroundType$1;
}
interface PollDesignNonNullableFields$1 {
    background?: BackgroundNonNullableFields$1;
}
interface DesignNonNullableFields$1 {
    poll?: PollDesignNonNullableFields$1;
}
interface PollDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    poll?: PollNonNullableFields$1;
    layout?: PollDataLayoutNonNullableFields$1;
    design?: DesignNonNullableFields$1;
}
interface AnchorDataNonNullableFields$1 {
    anchor: string;
}
interface LinkDataNonNullableFields$1 {
    link?: LinkNonNullableFields$1;
}
interface MentionDataNonNullableFields$1 {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields$1 {
    unit: FontType$1;
}
interface DecorationNonNullableFields$1 {
    anchorData?: AnchorDataNonNullableFields$1;
    linkData?: LinkDataNonNullableFields$1;
    mentionData?: MentionDataNonNullableFields$1;
    fontSizeData?: FontSizeDataNonNullableFields$1;
    type: DecorationType$1;
}
interface TextDataNonNullableFields$1 {
    text: string;
    decorations: DecorationNonNullableFields$1[];
}
interface AppEmbedDataNonNullableFields$1 {
    type: AppType$1;
}
interface VideoDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface EmbedDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface CollapsibleListDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    initialExpandedItems: InitialExpandedItems$1;
    direction: Direction$1;
}
interface DimensionsNonNullableFields$1 {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
    dimensions?: DimensionsNonNullableFields$1;
}
interface CellStyleNonNullableFields$1 {
    verticalAlignment: VerticalAlignment$1;
}
interface TableCellDataNonNullableFields$1 {
    cellStyle?: CellStyleNonNullableFields$1;
}
interface AudioDataNonNullableFields$1 {
    containerData?: PluginContainerDataNonNullableFields$1;
}
interface OrderedListDataNonNullableFields$1 {
    indentation: number;
}
interface BulletedListDataNonNullableFields$1 {
    indentation: number;
}
interface BlockquoteDataNonNullableFields$1 {
    indentation: number;
}
interface CaptionDataNonNullableFields$1 {
    textStyle?: TextStyleNonNullableFields$1;
}
interface NodeNonNullableFields$1 {
    buttonData?: ButtonDataNonNullableFields$1;
    codeBlockData?: CodeBlockDataNonNullableFields$1;
    dividerData?: DividerDataNonNullableFields$1;
    fileData?: FileDataNonNullableFields$1;
    galleryData?: GalleryDataNonNullableFields$1;
    gifData?: GIFDataNonNullableFields$1;
    headingData?: HeadingDataNonNullableFields$1;
    htmlData?: HTMLDataNonNullableFields$1;
    imageData?: ImageDataNonNullableFields$1;
    linkPreviewData?: LinkPreviewDataNonNullableFields$1;
    mapData?: MapDataNonNullableFields$1;
    paragraphData?: ParagraphDataNonNullableFields$1;
    pollData?: PollDataNonNullableFields$1;
    textData?: TextDataNonNullableFields$1;
    appEmbedData?: AppEmbedDataNonNullableFields$1;
    videoData?: VideoDataNonNullableFields$1;
    embedData?: EmbedDataNonNullableFields$1;
    collapsibleListData?: CollapsibleListDataNonNullableFields$1;
    tableData?: TableDataNonNullableFields$1;
    tableCellData?: TableCellDataNonNullableFields$1;
    audioData?: AudioDataNonNullableFields$1;
    orderedListData?: OrderedListDataNonNullableFields$1;
    bulletedListData?: BulletedListDataNonNullableFields$1;
    blockquoteData?: BlockquoteDataNonNullableFields$1;
    captionData?: CaptionDataNonNullableFields$1;
    type: NodeType$1;
    _id: string;
    nodes: NodeNonNullableFields$1[];
}
interface MetadataNonNullableFields$1 {
    version: number;
}
interface TextNodeStyleNonNullableFields$1 {
    decorations: DecorationNonNullableFields$1[];
}
interface DocumentStyleNonNullableFields$1 {
    headerOne?: TextNodeStyleNonNullableFields$1;
    headerTwo?: TextNodeStyleNonNullableFields$1;
    headerThree?: TextNodeStyleNonNullableFields$1;
    headerFour?: TextNodeStyleNonNullableFields$1;
    headerFive?: TextNodeStyleNonNullableFields$1;
    headerSix?: TextNodeStyleNonNullableFields$1;
    paragraph?: TextNodeStyleNonNullableFields$1;
    blockquote?: TextNodeStyleNonNullableFields$1;
    codeBlock?: TextNodeStyleNonNullableFields$1;
}
interface RichContentNonNullableFields$1 {
    nodes: NodeNonNullableFields$1[];
    metadata?: MetadataNonNullableFields$1;
    documentStyle?: DocumentStyleNonNullableFields$1;
}
interface InfoSectionNonNullableFields$1 {
    uniqueName: string;
    title: string;
    description?: RichContentNonNullableFields$1;
}
interface CreateInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface GetInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface GetOrCreateInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$3 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$2 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$3;
}
interface BulkInfoSectionItemResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$2;
    item?: InfoSectionNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$2 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkGetOrCreateInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}
interface UpdateInfoSectionResponseNonNullableFields {
    infoSection?: InfoSectionNonNullableFields$1;
}
interface QueryInfoSectionsResponseNonNullableFields {
    infoSections: InfoSectionNonNullableFields$1[];
}
interface BulkCreateInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}
interface BulkUpdateInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}
interface BulkInfoSectionResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$2;
}
interface BulkDeleteInfoSectionsResponseNonNullableFields {
    results: BulkInfoSectionResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$2;
}
interface BaseEventMetadata$4 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$6;
}
interface EventMetadata$3 extends BaseEventMetadata$4 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface InfoSectionCreatedEnvelope {
    entity: InfoSection$1;
    metadata: EventMetadata$3;
}
interface InfoSectionUpdatedEnvelope {
    entity: InfoSection$1;
    metadata: EventMetadata$3;
}
interface InfoSectionDeletedEnvelope {
    metadata: EventMetadata$3;
}
interface GetInfoSectionOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface GetOrCreateInfoSectionOptions {
    /** Info section to retrieve or create. */
    infoSection?: InfoSectionForGetOrCreate;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface BulkGetOrCreateInfoSectionsOptions {
    /** Info sections to retrieve or create. */
    infoSections?: InfoSectionForGetOrCreate[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface UpdateInfoSection {
    /**
     * Info section ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the info section is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the info section.
     *
     * Ignored when creating an info section.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the info section was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the info section was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Unique name. Used as an identifier. */
    uniqueName?: string;
    /** Info section title. */
    title?: string;
    /**
     * Info section description using rich content.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent$1;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     */
    plainDescription?: string | null;
    /**
     * Number of products this info section is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Info Sections API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface UpdateInfoSectionOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}
interface QueryInfoSectionsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[] | undefined;
}
interface QueryCursorResult$4 {
    cursors: Cursors$4;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface InfoSectionsQueryResult extends QueryCursorResult$4 {
    items: InfoSection$1[];
    query: InfoSectionsQueryBuilder;
    next: () => Promise<InfoSectionsQueryResult>;
    prev: () => Promise<InfoSectionsQueryResult>;
}
interface InfoSectionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'uniqueName' | 'title', value: any) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'uniqueName' | 'title', value: any) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'uniqueName' | 'title', value: string) => InfoSectionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'uniqueName' | 'title', value: any[]) => InfoSectionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'uniqueName' | 'title', value: any) => InfoSectionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'uniqueName' | 'title', value: boolean) => InfoSectionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'uniqueName' | 'title'>) => InfoSectionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'uniqueName' | 'title'>) => InfoSectionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => InfoSectionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => InfoSectionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<InfoSectionsQueryResult>;
}
interface BulkCreateInfoSectionsOptions {
    /**
     * Whether to return the full created info section entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkUpdateInfoSectionsOptions {
    /**
     * Whether to return the full updated info sections entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$2[];
}

declare function createInfoSection$1(httpClient: HttpClient): CreateInfoSectionSignature;
interface CreateInfoSectionSignature {
    /**
     * Creates an info section.
     *
     * To assign the info section to a product, include the `infoSection.id` or `infoSection.uniqueName`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Info section to create.
     * @returns Created info section.
     */
    (infoSection: InfoSection$1): Promise<InfoSection$1 & InfoSectionNonNullableFields$1>;
}
declare function getInfoSection$1(httpClient: HttpClient): GetInfoSectionSignature;
interface GetInfoSectionSignature {
    /**
     * Retrieves an info section.
     * @param - Info section ID.
     * @returns Info section.
     */
    (infoSectionId: string, options?: GetInfoSectionOptions | undefined): Promise<InfoSection$1 & InfoSectionNonNullableFields$1>;
}
declare function getOrCreateInfoSection$1(httpClient: HttpClient): GetOrCreateInfoSectionSignature;
interface GetOrCreateInfoSectionSignature {
    /**
     * Retrieves an info section by ID or `uniqueName`, or creates an info section if one with the passed `uniqueName` doesn't exist.
     *
     * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
     */
    (options?: GetOrCreateInfoSectionOptions | undefined): Promise<GetOrCreateInfoSectionResponse & GetOrCreateInfoSectionResponseNonNullableFields>;
}
declare function bulkGetOrCreateInfoSections$1(httpClient: HttpClient): BulkGetOrCreateInfoSectionsSignature;
interface BulkGetOrCreateInfoSectionsSignature {
    /**
     * Retrieves multiple info sections by ID or `uniqueName`, or creates multiple info sections if those with the passed `uniqueName` don't exist.
     *
     * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
     */
    (options?: BulkGetOrCreateInfoSectionsOptions | undefined): Promise<BulkGetOrCreateInfoSectionsResponse & BulkGetOrCreateInfoSectionsResponseNonNullableFields>;
}
declare function updateInfoSection$1(httpClient: HttpClient): UpdateInfoSectionSignature;
interface UpdateInfoSectionSignature {
    /**
     * Updates an info section.
     *
     *
     * Each time the info section is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the info section.
     * This ensures you're working with the latest info section and prevents unintended overwrites.
     * @param - Info section ID.
     * @returns Updated info section.
     */
    (_id: string | null, infoSection: UpdateInfoSection, options?: UpdateInfoSectionOptions | undefined): Promise<InfoSection$1 & InfoSectionNonNullableFields$1>;
}
declare function deleteInfoSection$1(httpClient: HttpClient): DeleteInfoSectionSignature;
interface DeleteInfoSectionSignature {
    /**
     * Deletes an info section.
     *
     * > **Note:** Deleting an info section will also remove it from all products it is assigned to.
     * @param - Info section ID
     */
    (infoSectionId: string): Promise<void>;
}
declare function queryInfoSections$1(httpClient: HttpClient): QueryInfoSectionsSignature;
interface QueryInfoSectionsSignature {
    /**
     * Retrieves a list of up to 100 info sections, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Info Sections runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Info Sections: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/info-sections-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryInfoSectionsOptions | undefined): InfoSectionsQueryBuilder;
}
declare function bulkCreateInfoSections$1(httpClient: HttpClient): BulkCreateInfoSectionsSignature;
interface BulkCreateInfoSectionsSignature {
    /**
     * Creates multiple info sections.
     * @param - Info sections to create.
     */
    (infoSections: InfoSection$1[], options?: BulkCreateInfoSectionsOptions | undefined): Promise<BulkCreateInfoSectionsResponse & BulkCreateInfoSectionsResponseNonNullableFields>;
}
declare function bulkUpdateInfoSections$1(httpClient: HttpClient): BulkUpdateInfoSectionsSignature;
interface BulkUpdateInfoSectionsSignature {
    /**
     * Updates multiple info sections.
     *
     * Each time an info section is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an info section.
     * This ensures you're working with the latest info section and prevents unintended overwrites.
     * @param - List of info sections to update.
     */
    (infoSections: MaskedInfoSection[], options?: BulkUpdateInfoSectionsOptions | undefined): Promise<BulkUpdateInfoSectionsResponse & BulkUpdateInfoSectionsResponseNonNullableFields>;
}
declare function bulkDeleteInfoSections$1(httpClient: HttpClient): BulkDeleteInfoSectionsSignature;
interface BulkDeleteInfoSectionsSignature {
    /**
     * Deletes multiple info sections.
     * @param - IDs of info sections to delete.
     */
    (infoSectionIds: string[]): Promise<BulkDeleteInfoSectionsResponse & BulkDeleteInfoSectionsResponseNonNullableFields>;
}
declare const onInfoSectionCreated$1: EventDefinition<InfoSectionCreatedEnvelope, "wix.stores.catalog.v3.info_section_created">;
declare const onInfoSectionUpdated$1: EventDefinition<InfoSectionUpdatedEnvelope, "wix.stores.catalog.v3.info_section_updated">;
declare const onInfoSectionDeleted$1: EventDefinition<InfoSectionDeletedEnvelope, "wix.stores.catalog.v3.info_section_deleted">;

declare function createEventModule$4<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createInfoSection: MaybeContext<BuildRESTFunction<typeof createInfoSection$1> & typeof createInfoSection$1>;
declare const getInfoSection: MaybeContext<BuildRESTFunction<typeof getInfoSection$1> & typeof getInfoSection$1>;
declare const getOrCreateInfoSection: MaybeContext<BuildRESTFunction<typeof getOrCreateInfoSection$1> & typeof getOrCreateInfoSection$1>;
declare const bulkGetOrCreateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateInfoSections$1> & typeof bulkGetOrCreateInfoSections$1>;
declare const updateInfoSection: MaybeContext<BuildRESTFunction<typeof updateInfoSection$1> & typeof updateInfoSection$1>;
declare const deleteInfoSection: MaybeContext<BuildRESTFunction<typeof deleteInfoSection$1> & typeof deleteInfoSection$1>;
declare const queryInfoSections: MaybeContext<BuildRESTFunction<typeof queryInfoSections$1> & typeof queryInfoSections$1>;
declare const bulkCreateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkCreateInfoSections$1> & typeof bulkCreateInfoSections$1>;
declare const bulkUpdateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkUpdateInfoSections$1> & typeof bulkUpdateInfoSections$1>;
declare const bulkDeleteInfoSections: MaybeContext<BuildRESTFunction<typeof bulkDeleteInfoSections$1> & typeof bulkDeleteInfoSections$1>;

type _publicOnInfoSectionCreatedType = typeof onInfoSectionCreated$1;
/**
 * Triggered when an info section is created.
 */
declare const onInfoSectionCreated: ReturnType<typeof createEventModule$4<_publicOnInfoSectionCreatedType>>;

type _publicOnInfoSectionUpdatedType = typeof onInfoSectionUpdated$1;
/**
 * Triggered when an info section is updated.
 */
declare const onInfoSectionUpdated: ReturnType<typeof createEventModule$4<_publicOnInfoSectionUpdatedType>>;

type _publicOnInfoSectionDeletedType = typeof onInfoSectionDeleted$1;
/**
 * Triggered when an info section is deleted.
 */
declare const onInfoSectionDeleted: ReturnType<typeof createEventModule$4<_publicOnInfoSectionDeletedType>>;

type index_d$7_BulkCreateInfoSectionsOptions = BulkCreateInfoSectionsOptions;
type index_d$7_BulkCreateInfoSectionsRequest = BulkCreateInfoSectionsRequest;
type index_d$7_BulkCreateInfoSectionsResponse = BulkCreateInfoSectionsResponse;
type index_d$7_BulkCreateInfoSectionsResponseNonNullableFields = BulkCreateInfoSectionsResponseNonNullableFields;
type index_d$7_BulkDeleteInfoSectionsRequest = BulkDeleteInfoSectionsRequest;
type index_d$7_BulkDeleteInfoSectionsResponse = BulkDeleteInfoSectionsResponse;
type index_d$7_BulkDeleteInfoSectionsResponseNonNullableFields = BulkDeleteInfoSectionsResponseNonNullableFields;
type index_d$7_BulkGetOrCreateInfoSectionsOptions = BulkGetOrCreateInfoSectionsOptions;
type index_d$7_BulkGetOrCreateInfoSectionsRequest = BulkGetOrCreateInfoSectionsRequest;
type index_d$7_BulkGetOrCreateInfoSectionsResponse = BulkGetOrCreateInfoSectionsResponse;
type index_d$7_BulkGetOrCreateInfoSectionsResponseNonNullableFields = BulkGetOrCreateInfoSectionsResponseNonNullableFields;
type index_d$7_BulkInfoSectionItemResult = BulkInfoSectionItemResult;
type index_d$7_BulkInfoSectionResult = BulkInfoSectionResult;
type index_d$7_BulkUpdateInfoSectionsOptions = BulkUpdateInfoSectionsOptions;
type index_d$7_BulkUpdateInfoSectionsRequest = BulkUpdateInfoSectionsRequest;
type index_d$7_BulkUpdateInfoSectionsResponse = BulkUpdateInfoSectionsResponse;
type index_d$7_BulkUpdateInfoSectionsResponseNonNullableFields = BulkUpdateInfoSectionsResponseNonNullableFields;
type index_d$7_CreateInfoSectionRequest = CreateInfoSectionRequest;
type index_d$7_CreateInfoSectionResponse = CreateInfoSectionResponse;
type index_d$7_CreateInfoSectionResponseNonNullableFields = CreateInfoSectionResponseNonNullableFields;
type index_d$7_DeleteInfoSectionRequest = DeleteInfoSectionRequest;
type index_d$7_DeleteInfoSectionResponse = DeleteInfoSectionResponse;
type index_d$7_GetInfoSectionOptions = GetInfoSectionOptions;
type index_d$7_GetInfoSectionRequest = GetInfoSectionRequest;
type index_d$7_GetInfoSectionResponse = GetInfoSectionResponse;
type index_d$7_GetInfoSectionResponseNonNullableFields = GetInfoSectionResponseNonNullableFields;
type index_d$7_GetOrCreateInfoSectionOptions = GetOrCreateInfoSectionOptions;
type index_d$7_GetOrCreateInfoSectionRequest = GetOrCreateInfoSectionRequest;
type index_d$7_GetOrCreateInfoSectionResponse = GetOrCreateInfoSectionResponse;
type index_d$7_GetOrCreateInfoSectionResponseNonNullableFields = GetOrCreateInfoSectionResponseNonNullableFields;
type index_d$7_InfoSectionCreatedEnvelope = InfoSectionCreatedEnvelope;
type index_d$7_InfoSectionDeletedEnvelope = InfoSectionDeletedEnvelope;
type index_d$7_InfoSectionForGetOrCreate = InfoSectionForGetOrCreate;
type index_d$7_InfoSectionUpdatedEnvelope = InfoSectionUpdatedEnvelope;
type index_d$7_InfoSectionsQueryBuilder = InfoSectionsQueryBuilder;
type index_d$7_InfoSectionsQueryResult = InfoSectionsQueryResult;
type index_d$7_MaskedInfoSection = MaskedInfoSection;
type index_d$7_QueryInfoSectionsOptions = QueryInfoSectionsOptions;
type index_d$7_QueryInfoSectionsRequest = QueryInfoSectionsRequest;
type index_d$7_QueryInfoSectionsResponse = QueryInfoSectionsResponse;
type index_d$7_QueryInfoSectionsResponseNonNullableFields = QueryInfoSectionsResponseNonNullableFields;
type index_d$7_UpdateInfoSection = UpdateInfoSection;
type index_d$7_UpdateInfoSectionOptions = UpdateInfoSectionOptions;
type index_d$7_UpdateInfoSectionRequest = UpdateInfoSectionRequest;
type index_d$7_UpdateInfoSectionResponse = UpdateInfoSectionResponse;
type index_d$7_UpdateInfoSectionResponseNonNullableFields = UpdateInfoSectionResponseNonNullableFields;
type index_d$7__publicOnInfoSectionCreatedType = _publicOnInfoSectionCreatedType;
type index_d$7__publicOnInfoSectionDeletedType = _publicOnInfoSectionDeletedType;
type index_d$7__publicOnInfoSectionUpdatedType = _publicOnInfoSectionUpdatedType;
declare const index_d$7_bulkCreateInfoSections: typeof bulkCreateInfoSections;
declare const index_d$7_bulkDeleteInfoSections: typeof bulkDeleteInfoSections;
declare const index_d$7_bulkGetOrCreateInfoSections: typeof bulkGetOrCreateInfoSections;
declare const index_d$7_bulkUpdateInfoSections: typeof bulkUpdateInfoSections;
declare const index_d$7_createInfoSection: typeof createInfoSection;
declare const index_d$7_deleteInfoSection: typeof deleteInfoSection;
declare const index_d$7_getInfoSection: typeof getInfoSection;
declare const index_d$7_getOrCreateInfoSection: typeof getOrCreateInfoSection;
declare const index_d$7_onInfoSectionCreated: typeof onInfoSectionCreated;
declare const index_d$7_onInfoSectionDeleted: typeof onInfoSectionDeleted;
declare const index_d$7_onInfoSectionUpdated: typeof onInfoSectionUpdated;
declare const index_d$7_queryInfoSections: typeof queryInfoSections;
declare const index_d$7_updateInfoSection: typeof updateInfoSection;
declare namespace index_d$7 {
  export { type ActionEvent$4 as ActionEvent, Alignment$1 as Alignment, type AnchorData$1 as AnchorData, type App$4 as App, type AppEmbedData$1 as AppEmbedData, type AppEmbedDataAppDataOneOf$1 as AppEmbedDataAppDataOneOf, AppType$1 as AppType, type ApplicationError$3 as ApplicationError, type AudioData$1 as AudioData, type Background$1 as Background, type BackgroundBackgroundOneOf$1 as BackgroundBackgroundOneOf, BackgroundType$1 as BackgroundType, type BaseEventMetadata$4 as BaseEventMetadata, type BlockquoteData$1 as BlockquoteData, type BookingData$1 as BookingData, type Border$1 as Border, type BorderColors$1 as BorderColors, type BulkActionMetadata$3 as BulkActionMetadata, type index_d$7_BulkCreateInfoSectionsOptions as BulkCreateInfoSectionsOptions, type index_d$7_BulkCreateInfoSectionsRequest as BulkCreateInfoSectionsRequest, type index_d$7_BulkCreateInfoSectionsResponse as BulkCreateInfoSectionsResponse, type index_d$7_BulkCreateInfoSectionsResponseNonNullableFields as BulkCreateInfoSectionsResponseNonNullableFields, type index_d$7_BulkDeleteInfoSectionsRequest as BulkDeleteInfoSectionsRequest, type index_d$7_BulkDeleteInfoSectionsResponse as BulkDeleteInfoSectionsResponse, type index_d$7_BulkDeleteInfoSectionsResponseNonNullableFields as BulkDeleteInfoSectionsResponseNonNullableFields, type index_d$7_BulkGetOrCreateInfoSectionsOptions as BulkGetOrCreateInfoSectionsOptions, type index_d$7_BulkGetOrCreateInfoSectionsRequest as BulkGetOrCreateInfoSectionsRequest, type index_d$7_BulkGetOrCreateInfoSectionsResponse as BulkGetOrCreateInfoSectionsResponse, type index_d$7_BulkGetOrCreateInfoSectionsResponseNonNullableFields as BulkGetOrCreateInfoSectionsResponseNonNullableFields, type index_d$7_BulkInfoSectionItemResult as BulkInfoSectionItemResult, type index_d$7_BulkInfoSectionResult as BulkInfoSectionResult, type index_d$7_BulkUpdateInfoSectionsOptions as BulkUpdateInfoSectionsOptions, type index_d$7_BulkUpdateInfoSectionsRequest as BulkUpdateInfoSectionsRequest, type index_d$7_BulkUpdateInfoSectionsResponse as BulkUpdateInfoSectionsResponse, type index_d$7_BulkUpdateInfoSectionsResponseNonNullableFields as BulkUpdateInfoSectionsResponseNonNullableFields, type BulletedListData$1 as BulletedListData, type ButtonData$1 as ButtonData, type CaptionData$1 as CaptionData, type CellStyle$1 as CellStyle, type CodeBlockData$1 as CodeBlockData, type CollapsibleListData$1 as CollapsibleListData, type ColorData$1 as ColorData, type Colors$1 as Colors, type index_d$7_CreateInfoSectionRequest as CreateInfoSectionRequest, type index_d$7_CreateInfoSectionResponse as CreateInfoSectionResponse, type index_d$7_CreateInfoSectionResponseNonNullableFields as CreateInfoSectionResponseNonNullableFields, Crop$1 as Crop, type CursorPaging$4 as CursorPaging, type CursorPagingMetadata$4 as CursorPagingMetadata, type CursorQuery$3 as CursorQuery, type CursorQueryPagingMethodOneOf$3 as CursorQueryPagingMethodOneOf, type Cursors$4 as Cursors, type Decoration$1 as Decoration, type DecorationDataOneOf$1 as DecorationDataOneOf, DecorationType$1 as DecorationType, type index_d$7_DeleteInfoSectionRequest as DeleteInfoSectionRequest, type index_d$7_DeleteInfoSectionResponse as DeleteInfoSectionResponse, type Design$1 as Design, type Dimensions$1 as Dimensions, Direction$1 as Direction, type DividerData$1 as DividerData, type DocumentStyle$1 as DocumentStyle, type DomainEvent$4 as DomainEvent, type DomainEventBodyOneOf$4 as DomainEventBodyOneOf, type EmbedData$1 as EmbedData, type Empty$5 as Empty, type EntityCreatedEvent$4 as EntityCreatedEvent, type EntityDeletedEvent$4 as EntityDeletedEvent, type EntityUpdatedEvent$4 as EntityUpdatedEvent, type EventData$1 as EventData, type EventMetadata$3 as EventMetadata, type File$4 as File, type FileData$1 as FileData, type FileSource$1 as FileSource, type FileSourceDataOneOf$1 as FileSourceDataOneOf, type FontSizeData$1 as FontSizeData, FontType$1 as FontType, type GIF$1 as GIF, type GIFData$1 as GIFData, type GalleryData$1 as GalleryData, type GalleryOptions$1 as GalleryOptions, type index_d$7_GetInfoSectionOptions as GetInfoSectionOptions, type index_d$7_GetInfoSectionRequest as GetInfoSectionRequest, type index_d$7_GetInfoSectionResponse as GetInfoSectionResponse, type index_d$7_GetInfoSectionResponseNonNullableFields as GetInfoSectionResponseNonNullableFields, type index_d$7_GetOrCreateInfoSectionOptions as GetOrCreateInfoSectionOptions, type index_d$7_GetOrCreateInfoSectionRequest as GetOrCreateInfoSectionRequest, type index_d$7_GetOrCreateInfoSectionResponse as GetOrCreateInfoSectionResponse, type index_d$7_GetOrCreateInfoSectionResponseNonNullableFields as GetOrCreateInfoSectionResponseNonNullableFields, type Gradient$1 as Gradient, type HTMLData$1 as HTMLData, type HTMLDataDataOneOf$1 as HTMLDataDataOneOf, type HeadingData$1 as HeadingData, type Height$1 as Height, type IdentificationData$6 as IdentificationData, type IdentificationDataIdOneOf$6 as IdentificationDataIdOneOf, type Image$1 as Image, type ImageData$1 as ImageData, type InfoSection$1 as InfoSection, type index_d$7_InfoSectionCreatedEnvelope as InfoSectionCreatedEnvelope, type index_d$7_InfoSectionDeletedEnvelope as InfoSectionDeletedEnvelope, type index_d$7_InfoSectionForGetOrCreate as InfoSectionForGetOrCreate, type InfoSectionNonNullableFields$1 as InfoSectionNonNullableFields, type index_d$7_InfoSectionUpdatedEnvelope as InfoSectionUpdatedEnvelope, type index_d$7_InfoSectionsQueryBuilder as InfoSectionsQueryBuilder, type index_d$7_InfoSectionsQueryResult as InfoSectionsQueryResult, InitialExpandedItems$1 as InitialExpandedItems, type InvalidateCache$4 as InvalidateCache, type InvalidateCacheGetByOneOf$4 as InvalidateCacheGetByOneOf, type Item$1 as Item, type ItemDataOneOf$1 as ItemDataOneOf, type ItemMetadata$3 as ItemMetadata, type ItemStyle$1 as ItemStyle, type Layout$1 as Layout, LayoutType$1 as LayoutType, LineStyle$1 as LineStyle, type Link$1 as Link, type LinkData$1 as LinkData, type LinkDataOneOf$1 as LinkDataOneOf, type LinkPreviewData$1 as LinkPreviewData, type ListValue$1 as ListValue, type MapData$1 as MapData, type MapSettings$1 as MapSettings, MapType$1 as MapType, type index_d$7_MaskedInfoSection as MaskedInfoSection, type Media$1 as Media, type MentionData$1 as MentionData, type MessageEnvelope$6 as MessageEnvelope, type Metadata$1 as Metadata, type Node$1 as Node, type NodeDataOneOf$1 as NodeDataOneOf, type NodeStyle$1 as NodeStyle, NodeType$1 as NodeType, NullValue$1 as NullValue, type Oembed$1 as Oembed, type Option$1 as Option, type OptionDesign$1 as OptionDesign, type OptionLayout$1 as OptionLayout, type OrderedListData$1 as OrderedListData, Orientation$1 as Orientation, type PDFSettings$1 as PDFSettings, type Page$4 as Page, type ParagraphData$1 as ParagraphData, type Permissions$1 as Permissions, type PlaybackOptions$1 as PlaybackOptions, type PluginContainerData$1 as PluginContainerData, PluginContainerDataAlignment$1 as PluginContainerDataAlignment, type PluginContainerDataWidth$1 as PluginContainerDataWidth, type PluginContainerDataWidthDataOneOf$1 as PluginContainerDataWidthDataOneOf, type Poll$1 as Poll, type PollData$1 as PollData, type PollDataLayout$1 as PollDataLayout, type PollDesign$1 as PollDesign, type PollLayout$1 as PollLayout, PollLayoutDirection$1 as PollLayoutDirection, PollLayoutType$1 as PollLayoutType, type index_d$7_QueryInfoSectionsOptions as QueryInfoSectionsOptions, type index_d$7_QueryInfoSectionsRequest as QueryInfoSectionsRequest, type index_d$7_QueryInfoSectionsResponse as QueryInfoSectionsResponse, type index_d$7_QueryInfoSectionsResponseNonNullableFields as QueryInfoSectionsResponseNonNullableFields, type Rel$1 as Rel, RequestedFields$2 as RequestedFields, type RestoreInfo$4 as RestoreInfo, type RichContent$1 as RichContent, type Settings$1 as Settings, SortOrder$4 as SortOrder, type Sorting$4 as Sorting, Source$1 as Source, type Spoiler$1 as Spoiler, type SpoilerData$1 as SpoilerData, type Styles$1 as Styles, type TableCellData$1 as TableCellData, type TableData$1 as TableData, Target$1 as Target, TextAlignment$1 as TextAlignment, type TextData$1 as TextData, type TextNodeStyle$1 as TextNodeStyle, type TextStyle$1 as TextStyle, type Thumbnails$1 as Thumbnails, ThumbnailsAlignment$1 as ThumbnailsAlignment, Type$1 as Type, type URI$4 as URI, type index_d$7_UpdateInfoSection as UpdateInfoSection, type index_d$7_UpdateInfoSectionOptions as UpdateInfoSectionOptions, type index_d$7_UpdateInfoSectionRequest as UpdateInfoSectionRequest, type index_d$7_UpdateInfoSectionResponse as UpdateInfoSectionResponse, type index_d$7_UpdateInfoSectionResponseNonNullableFields as UpdateInfoSectionResponseNonNullableFields, VerticalAlignment$1 as VerticalAlignment, type Video$1 as Video, type VideoData$1 as VideoData, ViewMode$1 as ViewMode, ViewRole$1 as ViewRole, VoteRole$1 as VoteRole, WebhookIdentityType$6 as WebhookIdentityType, Width$1 as Width, WidthType$1 as WidthType, type index_d$7__publicOnInfoSectionCreatedType as _publicOnInfoSectionCreatedType, type index_d$7__publicOnInfoSectionDeletedType as _publicOnInfoSectionDeletedType, type index_d$7__publicOnInfoSectionUpdatedType as _publicOnInfoSectionUpdatedType, index_d$7_bulkCreateInfoSections as bulkCreateInfoSections, index_d$7_bulkDeleteInfoSections as bulkDeleteInfoSections, index_d$7_bulkGetOrCreateInfoSections as bulkGetOrCreateInfoSections, index_d$7_bulkUpdateInfoSections as bulkUpdateInfoSections, index_d$7_createInfoSection as createInfoSection, index_d$7_deleteInfoSection as deleteInfoSection, index_d$7_getInfoSection as getInfoSection, index_d$7_getOrCreateInfoSection as getOrCreateInfoSection, index_d$7_onInfoSectionCreated as onInfoSectionCreated, index_d$7_onInfoSectionDeleted as onInfoSectionDeleted, index_d$7_onInfoSectionUpdated as onInfoSectionUpdated, onInfoSectionCreated$1 as publicOnInfoSectionCreated, onInfoSectionDeleted$1 as publicOnInfoSectionDeleted, onInfoSectionUpdated$1 as publicOnInfoSectionUpdated, index_d$7_queryInfoSections as queryInfoSections, index_d$7_updateInfoSection as updateInfoSection };
}

/** Inventory Item. */
interface InventoryItem$1 extends InventoryItemTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus$1;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$2;
    /**
     * Product.
     * @readonly
     */
    product?: Product$1;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
declare enum AvailabilityStatus$1 {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    IN_STOCK = "IN_STOCK",
    /**
     * Whether the variant is available for preorder. InventoryItem will be available only when all below conditions are met:
     * 1. the variant is out of stock
     * 2. preorder is enabled on inventory item level (preorder_setting.enabled is true)
     * 3. preorder limit wasn't reached (preorder_setting.limit)
     */
    PREORDER = "PREORDER"
}
interface PreorderInfo$2 {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface Product$1 {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface InvalidateCache$3 extends InvalidateCacheGetByOneOf$3 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$3;
    /** Invalidate by page id */
    page?: Page$3;
    /** Invalidate by URI path */
    uri?: URI$3;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$3;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf$3 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$3;
    /** Invalidate by page id */
    page?: Page$3;
    /** Invalidate by URI path */
    uri?: URI$3;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$3;
}
interface App$3 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page$3 {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI$3 {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File$3 {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface BulkInventoryItemAction$1 {
    /** Inventory items. */
    inventoryItems?: InventoryItem$1[];
}
interface CreateInventoryItemRequest {
    /** Inventory item to create. */
    inventoryItem: InventoryItem$1;
}
interface CreateInventoryItemResponse {
    /** Created inventory item. */
    inventoryItem?: InventoryItem$1;
}
interface BulkCreateInventoryItemsRequest {
    /** Inventory items to create. */
    inventoryItems: InventoryItem$1[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInventoryItemsResponse {
    /** Inventory items created by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface V3BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata$2;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem$1;
}
interface ItemMetadata$2 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$2;
}
interface ApplicationError$2 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$2 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetInventoryItemRequest {
    /** Inventory item ID. */
    inventoryItemId: string;
}
interface GetInventoryItemResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItem$1;
}
interface UpdateInventoryItemRequest {
    /** Inventory item to update. */
    inventoryItem: InventoryItem$1;
    /** Reason for update. */
    reason?: ReasonType$1;
}
/** The reason for the inventory change. */
declare enum ReasonType$1 {
    UNKNOWN = "UNKNOWN",
    ORDER = "ORDER",
    MANUAL = "MANUAL",
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
interface UpdateInventoryItemResponse {
    /** Updated inventory item. */
    inventoryItem?: InventoryItem$1;
}
/** Report when Inventory item stock status changed from in stock to out of stock and the opposite. */
interface InventoryItemStockStatusUpdatedEvent {
    /** Inventory item new status. */
    inStock?: boolean;
}
interface InventoryItemUpdatedWithReason {
    /** Updated inventory item. */
    currentEntity?: InventoryItem$1;
    /** Reason for the update. */
    reason?: ReasonType$1;
    /**
     * ID of the app that updated this inventory item.
     *
     * When Wix Stores updates an inventory item, value will always be: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`.
     */
    appId?: string;
}
interface BulkUpdateInventoryItemsRequest$1 {
    /** Inventory items to update. */
    inventoryItems: MaskedInventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonType$1;
}
interface MaskedInventoryItem {
    /** Inventory item to update. */
    inventoryItem?: InventoryItem$1;
}
interface BulkUpdateInventoryItemsResponse$1 {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkUpdateInventoryItemsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Inventory item to update. */
    inventoryItem: InventoryItem$1;
    /** Free text to match in searchable fields. */
    search?: SearchDetails$1;
}
interface SearchDetails$1 {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: Mode$1;
    /** Search term or expression. */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path. */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
declare enum Mode$1 {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
interface BulkUpdateInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface BulkSetOrAdjustInventoryItemsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Action to adjust the inventory by. (e.g increment or decrement) */
    adjustedInventoryAction?: AdjustInventoryAction;
    /** Free text to match in searchable fields */
    search?: SearchDetails$1;
}
interface AdjustInventoryAction extends AdjustInventoryActionActionOneOf {
    /** Amount to increment by. */
    incrementBy?: number;
    /** Amount to decrement by. */
    decrementBy?: number;
}
/** @oneof */
interface AdjustInventoryActionActionOneOf {
    /** Amount to increment by. */
    incrementBy?: number;
    /** Amount to decrement by. */
    decrementBy?: number;
}
interface BulkSetOrAdjustInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface DeleteInventoryItemRequest {
    /** Inventory item ID. */
    inventoryItemId: string;
}
interface DeleteInventoryItemResponse {
}
interface BulkDeleteInventoryItemsRequest {
    /** IDs of inventory items to delete. */
    inventoryItemIds: string[];
}
interface BulkDeleteInventoryItemsResponse {
    /** Inventory items deleted by bulk action. */
    results?: BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkInventoryItemResult$1 {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata$2;
}
interface QueryInventoryItemsRequest {
    /** Query options. */
    query?: InventoryQuery;
}
interface InventoryQuery extends InventoryQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: InventoryPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: InventoryCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$3[];
}
/** @oneof */
interface InventoryQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: InventoryPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: InventoryCursorPaging;
}
interface Sorting$3 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$3;
}
declare enum SortOrder$3 {
    ASC = "ASC",
    DESC = "DESC"
}
interface InventoryPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface InventoryCursorPaging {
    /**
     * Number of items to load.
     * Cursor token returned in the query response. To be used on the next query request, but not the first query request.
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryInventoryItemsResponse {
    /** List of inventory items. */
    inventoryItems?: InventoryItem$1[];
    /** Paging metadata. */
    pagingMetadata?: PlatformPagingMetadataV2;
}
interface PlatformPagingMetadataV2 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$3;
}
interface Cursors$3 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchInventoryItemsRequest {
    /** Search options. */
    search?: CursorSearch$1;
}
interface CursorSearch$1 extends CursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$3;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$3[];
    /** Aggregations are a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: Aggregation$1[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails$1;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome.
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. For example, `"2023-12-20T10:52:34.795Z"`.
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$3;
}
interface Aggregation$1 extends AggregationKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
    /** Nested aggregation. */
    nested?: NestedAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: AggregationType$1;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation$1;
}
/** @oneof */
interface AggregationKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
    /** Nested aggregation. */
    nested?: NestedAggregation$1;
}
interface RangeBucket$1 {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum SortType$1 {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
declare enum SortDirection$1 {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
declare enum MissingValues$1 {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
interface IncludeMissingValuesOptions$1 {
    /** Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum ScalarType$1 {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX",
    /** Sum of values. */
    SUM = "SUM",
    /** Average of values. */
    AVG = "AVG"
}
interface ValueAggregation$1 extends ValueAggregationOptionsOneOf$1 {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions$1;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: SortType$1;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: SortDirection$1;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: MissingValues$1;
}
/** @oneof */
interface ValueAggregationOptionsOneOf$1 {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions$1;
}
declare enum NestedAggregationType$1 {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface RangeAggregation$1 {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds. */
    buckets?: RangeBucket$1[];
}
interface ScalarAggregation$1 {
    /** Define the operator for the scalar aggregation. */
    type?: ScalarType$1;
}
interface DateHistogramAggregation$1 {
    /** Interval for date histogram aggregation. */
    interval?: Interval$1;
}
declare enum Interval$1 {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface NestedAggregationItem$1 extends NestedAggregationItemKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationType$1;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
}
declare enum AggregationType$1 {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface NestedAggregation$1 {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one. */
    nestedAggregations?: NestedAggregationItem$1[];
}
interface GroupByAggregation$1 extends GroupByAggregationKindOneOf$1 {
    /** Value aggregation configuration. */
    value?: ValueAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Field to aggregate by. */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf$1 {
    /** Value aggregation configuration. */
    value?: ValueAggregation$1;
}
interface CursorPaging$3 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchInventoryItemsResponse {
    /** List of inventory items. */
    inventoryItems?: InventoryItem$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$3;
    /** Aggregation data. */
    aggregationData?: AggregationData$1;
}
interface CursorPagingMetadata$3 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$3;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface AggregationData$1 {
    /** key = aggregation name (as derived from search request). */
    results?: AggregationResults$1[];
}
interface ValueAggregationResult$1 {
    /** Value of the field. */
    value?: string;
    /** Count of entities with this value. */
    count?: number;
}
interface RangeAggregationResult$1 {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number;
}
interface NestedAggregationResults$1 extends NestedAggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
    /** User-defined name of aggregation, matches the one provided in request. */
    name?: string;
    /** Type of aggregation that matches result. */
    type?: AggregationType$1;
    /** Field to aggregate by, matches the one provided in request. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
}
interface ValueResults$1 {
    /** List of value aggregations. */
    results?: ValueAggregationResult$1[];
}
interface RangeResults$1 {
    /** List of ranges returned in same order as requested. */
    results?: RangeAggregationResult$1[];
}
interface AggregationResultsScalarResult$1 {
    /** Type of scalar aggregation. */
    type?: ScalarType$1;
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedValueAggregationResult$1 {
    /** Value of the field. */
    value?: string;
    /** Nested aggregations. */
    nestedResults?: NestedAggregationResults$1;
}
interface ValueResult$1 {
    /** Value of the field. */
    value?: string;
    /** Count of entities with this value. */
    count?: number | null;
}
interface RangeResult$1 {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number | null;
}
interface ScalarResult$1 {
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedResultValue$1 extends NestedResultValueResultOneOf$1 {
    /** Value aggregation result. */
    value?: ValueResult$1;
    /** Range aggregation result. */
    range?: RangeResult$1;
    /** Scalar aggregation result. */
    scalar?: ScalarResult$1;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult$1;
}
/** @oneof */
interface NestedResultValueResultOneOf$1 {
    /** Value aggregation result. */
    value?: ValueResult$1;
    /** Range aggregation result. */
    range?: RangeResult$1;
    /** Scalar aggregation result. */
    scalar?: ScalarResult$1;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult$1;
}
interface Results$1 {
    /** List of nested aggregations. */
    results?: Record<string, NestedResultValue$1>;
}
interface DateHistogramResult$1 {
    /** Date in ISO 8601 format. */
    value?: string;
    /** Count of documents in the bucket. */
    count?: number;
}
interface GroupByValueResults$1 {
    /** List of value aggregations. */
    results?: NestedValueAggregationResult$1[];
}
interface DateHistogramResults$1 {
    /** List of date histogram aggregations. */
    results?: DateHistogramResult$1[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form.
 * Aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults$1 {
    /** List of nested aggregations. */
    results?: Results$1[];
}
interface AggregationResults$1 extends AggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults$1;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults$1;
    /** Nested aggregation results. */
    nested?: NestedResults$1;
    /** User-defined name of aggregation as derived from search request. */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request. */
    type?: AggregationType$1;
    /** Field to aggregate by as derived from search request. */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults$1;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults$1;
    /** Nested aggregation results. */
    nested?: NestedResults$1;
}
interface SearchInventoryItemsWithOffsetRequest {
    /** WQL expression. */
    search?: PlatformOffsetSearch$1;
}
interface PlatformOffsetSearch$1 extends PlatformOffsetSearchPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging$1;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: Sorting$3[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: Aggregation$1[];
    /** free text to match in searchable fields */
    search?: SearchDetails$1;
}
/** @oneof */
interface PlatformOffsetSearchPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging$1;
}
interface PlatformPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface SearchInventoryItemsWithOffsetResponse {
    /** InventoryItems which satisfy the provided query. */
    inventoryItems?: InventoryItem$1[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: PagingMetadata$3;
}
interface PagingMetadata$3 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface BulkDecrementInventoryItemsRequest {
    /** Inventory item IDs and decrement data. */
    decrementData: DecrementDataById[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType$1;
}
interface DecrementDataById {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /** Amount to decrement by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkIncrementInventoryItemsRequest {
    /** Inventory item IDs and increment data. */
    incrementData: IncrementDataById[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType$1;
}
interface IncrementDataById {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /** Amount to increment by. */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkDecrementInventoryItemsByVariantAndLocationRequest {
    /** Variant and location IDs, as well as decrement data. */
    decrementData: DecrementDataByVariantAndLocation[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType$1;
}
interface DecrementDataByVariantAndLocation {
    /** Variant ID. */
    variantId?: string;
    /** Location ID. */
    locationId?: string | null;
    /** Amount to decrement by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkIncrementInventoryItemsByVariantAndLocationRequest {
    /** Variant and location IDs, as well as increment data. */
    incrementData: IncrementDataByVariantAndLocation[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType$1;
}
interface IncrementDataByVariantAndLocation {
    /** Variant ID. */
    variantId?: string;
    /** Location ID. */
    locationId?: string | null;
    /** Amount to increment by. */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata details as: totalSuccess and totalFailure. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface BulkSetInventoryItemsForProductsInLocationRequest {
    /** Location ID to set inventory items to. */
    locationId?: string | null;
    /**
     * List of inventory items per product. All existing inventory items for given product in given location_id will be replaced by ones provided in this request.
     * >**Note:** you can provide up to 1000 inventory items in total. For example you can provide 100 products with 10 inventory items in each or 1 product with 1000 inventory items or something in between.
     */
    productInventoryItems?: ProductInventoryItems[];
    /**
     * Whether to return the full inventory item entity in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface ProductInventoryItems {
    /** The ID of the product to set inventory items to. */
    productId?: string;
    /** List of inventory items to be created (if no ID provided) or updated (if existing ID provided). */
    inventoryItems?: InventoryItem$1[];
}
interface BulkSetInventoryItemsForProductsInLocationResponse {
    /** Created inventory items by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$2;
}
interface DomainEvent$3 extends DomainEventBodyOneOf$3 {
    createdEvent?: EntityCreatedEvent$3;
    updatedEvent?: EntityUpdatedEvent$3;
    deletedEvent?: EntityDeletedEvent$3;
    actionEvent?: ActionEvent$3;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$3 {
    createdEvent?: EntityCreatedEvent$3;
    updatedEvent?: EntityUpdatedEvent$3;
    deletedEvent?: EntityDeletedEvent$3;
    actionEvent?: ActionEvent$3;
}
interface EntityCreatedEvent$3 {
    entity?: string;
}
interface RestoreInfo$3 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$3 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$3 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$3 {
    body?: string;
}
interface Empty$4 {
}
interface MessageEnvelope$5 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$5;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$5 extends IdentificationDataIdOneOf$5 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$5;
}
/** @oneof */
interface IdentificationDataIdOneOf$5 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$5 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ProductNonNullableFields$1 {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields$1 {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus$1;
    product?: ProductNonNullableFields$1;
}
interface CreateInventoryItemResponseNonNullableFields {
    inventoryItem?: InventoryItemNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$2 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$2;
}
interface V3BulkInventoryItemResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: InventoryItemNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface GetInventoryItemResponseNonNullableFields {
    inventoryItem?: InventoryItemNonNullableFields$1;
}
interface UpdateInventoryItemResponseNonNullableFields {
    inventoryItem?: InventoryItemNonNullableFields$1;
}
interface BulkUpdateInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateInventoryItemsByFilterResponseNonNullableFields {
    jobId: string;
}
interface BulkInventoryItemResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkDeleteInventoryItemsResponseNonNullableFields {
    results: BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface QueryInventoryItemsResponseNonNullableFields {
    inventoryItems: InventoryItemNonNullableFields$1[];
}
interface ValueAggregationResultNonNullableFields {
    value: string;
    count: number;
}
interface ValueResultsNonNullableFields {
    results: ValueAggregationResultNonNullableFields[];
}
interface RangeAggregationResultNonNullableFields {
    count: number;
}
interface RangeResultsNonNullableFields {
    results: RangeAggregationResultNonNullableFields[];
}
interface AggregationResultsScalarResultNonNullableFields {
    type: ScalarType$1;
    value: number;
}
interface NestedAggregationResultsNonNullableFields {
    values?: ValueResultsNonNullableFields;
    ranges?: RangeResultsNonNullableFields;
    scalar?: AggregationResultsScalarResultNonNullableFields;
    name: string;
    type: AggregationType$1;
    fieldPath: string;
}
interface NestedValueAggregationResultNonNullableFields {
    value: string;
    nestedResults?: NestedAggregationResultsNonNullableFields;
}
interface GroupByValueResultsNonNullableFields {
    results: NestedValueAggregationResultNonNullableFields[];
}
interface DateHistogramResultNonNullableFields {
    value: string;
    count: number;
}
interface DateHistogramResultsNonNullableFields {
    results: DateHistogramResultNonNullableFields[];
}
interface AggregationResultsNonNullableFields {
    values?: ValueResultsNonNullableFields;
    ranges?: RangeResultsNonNullableFields;
    scalar?: AggregationResultsScalarResultNonNullableFields;
    groupedByValue?: GroupByValueResultsNonNullableFields;
    dateHistogram?: DateHistogramResultsNonNullableFields;
    name: string;
    type: AggregationType$1;
    fieldPath: string;
}
interface AggregationDataNonNullableFields {
    results: AggregationResultsNonNullableFields[];
}
interface SearchInventoryItemsResponseNonNullableFields {
    inventoryItems: InventoryItemNonNullableFields$1[];
    aggregationData?: AggregationDataNonNullableFields;
}
interface BulkDecrementInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkIncrementInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BaseEventMetadata$3 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$5;
}
interface EventMetadata$2 extends BaseEventMetadata$3 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface InventoryItemCreatedEnvelope {
    entity: InventoryItem$1;
    metadata: EventMetadata$2;
}
interface InventoryItemUpdatedEnvelope {
    entity: InventoryItem$1;
    metadata: EventMetadata$2;
}
interface InventoryItemStockStatusUpdatedEnvelope {
    data: InventoryItemStockStatusUpdatedEvent;
    metadata: EventMetadata$2;
}
interface InventoryItemUpdatedWithReasonEnvelope {
    data: InventoryItemUpdatedWithReason;
    metadata: EventMetadata$2;
}
interface InventoryItemDeletedEnvelope {
    entity: InventoryItem$1;
    metadata: EventMetadata$2;
}
interface BulkCreateInventoryItemsOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface UpdateInventoryItem {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus$1;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$2;
    /**
     * Product.
     * @readonly
     */
    product?: Product$1;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
interface UpdateInventoryItemOptions {
    /** Reason for update. */
    reason?: ReasonType$1;
}
interface BulkUpdateInventoryItemsOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonType$1;
}
interface BulkUpdateInventoryItemsByFilterOptions {
    /** Inventory item to update. */
    inventoryItem: InventoryItem$1;
    /** Free text to match in searchable fields. */
    search?: SearchDetails$1;
}
interface QueryCursorResult$3 {
    cursors: Cursors$3;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface InventoryItemsQueryResult extends QueryCursorResult$3 {
    items: InventoryItem$1[];
    query: InventoryItemsQueryBuilder;
    next: () => Promise<InventoryItemsQueryResult>;
    prev: () => Promise<InventoryItemsQueryResult>;
}
interface InventoryItemsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'preorderInfo.enabled', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'preorderInfo.enabled', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: 'quantity' | '_createdDate' | '_updatedDate', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: 'quantity' | '_createdDate' | '_updatedDate', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: 'quantity' | '_createdDate' | '_updatedDate', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: 'quantity' | '_createdDate' | '_updatedDate', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'variantId' | 'locationId' | 'productId', value: string) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'preorderInfo.enabled', value: any[]) => InventoryItemsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'preorderInfo.enabled', value: any) => InventoryItemsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'preorderInfo.enabled', value: boolean) => InventoryItemsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'inStock' | 'quantity' | '_createdDate' | '_updatedDate' | 'preorderInfo.enabled'>) => InventoryItemsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'inStock' | 'quantity' | '_createdDate' | '_updatedDate' | 'preorderInfo.enabled'>) => InventoryItemsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => InventoryItemsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => InventoryItemsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<InventoryItemsQueryResult>;
}
interface SearchInventoryItemsOptions {
    /** Search options. */
    search?: CursorSearch$1;
}
interface BulkDecrementInventoryItemsOptions {
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType$1;
}
interface BulkIncrementInventoryItemsOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType$1;
}
interface BulkDecrementInventoryItemsByVariantAndLocationOptions {
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType$1;
}
interface BulkIncrementInventoryItemsByVariantAndLocationOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType$1;
}

declare function createInventoryItem$1(httpClient: HttpClient): CreateInventoryItemSignature;
interface CreateInventoryItemSignature {
    /**
     * Creates an inventory item.
     * The combination of `variantId` and `locationId` is unique.
     * @param - Inventory item to create.
     * @returns Created inventory item.
     */
    (inventoryItem: InventoryItem$1): Promise<InventoryItem$1 & InventoryItemNonNullableFields$1>;
}
declare function bulkCreateInventoryItems$1(httpClient: HttpClient): BulkCreateInventoryItemsSignature;
interface BulkCreateInventoryItemsSignature {
    /**
     * Creates multiple inventory items.
     * @param - Inventory items to create.
     */
    (inventoryItems: InventoryItem$1[], options?: BulkCreateInventoryItemsOptions | undefined): Promise<BulkCreateInventoryItemsResponse & BulkCreateInventoryItemsResponseNonNullableFields>;
}
declare function getInventoryItem$1(httpClient: HttpClient): GetInventoryItemSignature;
interface GetInventoryItemSignature {
    /**
     * Retrieves an inventory item.
     * @param - Inventory item ID.
     * @returns Inventory item.
     */
    (inventoryItemId: string): Promise<InventoryItem$1 & InventoryItemNonNullableFields$1>;
}
declare function updateInventoryItem$1(httpClient: HttpClient): UpdateInventoryItemSignature;
interface UpdateInventoryItemSignature {
    /**
     * Updates an inventory item.
     *
     *
     * Each time the inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Inventory item ID.
     * @returns Updated inventory item.
     */
    (_id: string | null, inventoryItem: UpdateInventoryItem, options?: UpdateInventoryItemOptions | undefined): Promise<InventoryItem$1 & InventoryItemNonNullableFields$1>;
}
declare function bulkUpdateInventoryItems$1(httpClient: HttpClient): BulkUpdateInventoryItemsSignature;
interface BulkUpdateInventoryItemsSignature {
    /**
     * Updates multiple inventory items.
     *
     * Each time an inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Inventory items to update.
     */
    (inventoryItems: MaskedInventoryItem[], options?: BulkUpdateInventoryItemsOptions | undefined): Promise<BulkUpdateInventoryItemsResponse$1 & BulkUpdateInventoryItemsResponseNonNullableFields>;
}
declare function bulkUpdateInventoryItemsByFilter$1(httpClient: HttpClient): BulkUpdateInventoryItemsByFilterSignature;
interface BulkUpdateInventoryItemsByFilterSignature {
    /**
     * Updates multiple inventory items, given the provided filter.
     *
     * Each time an inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkUpdateInventoryItemsByFilterOptions | undefined): Promise<BulkUpdateInventoryItemsByFilterResponse & BulkUpdateInventoryItemsByFilterResponseNonNullableFields>;
}
declare function deleteInventoryItem$1(httpClient: HttpClient): DeleteInventoryItemSignature;
interface DeleteInventoryItemSignature {
    /**
     * Deletes an inventory item.
     * @param - Inventory item ID.
     */
    (inventoryItemId: string): Promise<void>;
}
declare function bulkDeleteInventoryItems$1(httpClient: HttpClient): BulkDeleteInventoryItemsSignature;
interface BulkDeleteInventoryItemsSignature {
    /**
     * Deletes multiple inventory items.
     * @param - IDs of inventory items to delete.
     */
    (inventoryItemIds: string[]): Promise<BulkDeleteInventoryItemsResponse & BulkDeleteInventoryItemsResponseNonNullableFields>;
}
declare function queryInventoryItems$1(httpClient: HttpClient): QueryInventoryItemsSignature;
interface QueryInventoryItemsSignature {
    /**
     * Retrieves a list of up to 1,000 inventory items, given the provided filtering, sorting, and cursor paging.
     *
     * For field support for filters and sorting,
     * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (): InventoryItemsQueryBuilder;
}
declare function searchInventoryItems$1(httpClient: HttpClient): SearchInventoryItemsSignature;
interface SearchInventoryItemsSignature {
    /**
     * Retrieves a list of inventory items, given the provided filtering, sorting, and cursor paging.
     *
     *
     * Search Inventory Items runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: SearchInventoryItemsOptions | undefined): Promise<SearchInventoryItemsResponse & SearchInventoryItemsResponseNonNullableFields>;
}
declare function bulkDecrementInventoryItems$1(httpClient: HttpClient): BulkDecrementInventoryItemsSignature;
interface BulkDecrementInventoryItemsSignature {
    /**
     * Decrements quantities of multiple inventory items.
     *
     * > **Notes:**:
     * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
     * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
     * > + Pass `restrictInventory: false` to allow for negative quantities.
     * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
     * @param - Inventory item IDs and decrement data.
     */
    (decrementData: DecrementDataById[], options?: BulkDecrementInventoryItemsOptions | undefined): Promise<BulkDecrementInventoryItemsResponse & BulkDecrementInventoryItemsResponseNonNullableFields>;
}
declare function bulkIncrementInventoryItems$1(httpClient: HttpClient): BulkIncrementInventoryItemsSignature;
interface BulkIncrementInventoryItemsSignature {
    /**
     * Increments quantities of multiple inventory items.
     *
     * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
     * @param - Inventory item IDs and increment data.
     */
    (incrementData: IncrementDataById[], options?: BulkIncrementInventoryItemsOptions | undefined): Promise<BulkIncrementInventoryItemsResponse & BulkIncrementInventoryItemsResponseNonNullableFields>;
}
declare function bulkDecrementInventoryItemsByVariantAndLocation$1(httpClient: HttpClient): BulkDecrementInventoryItemsByVariantAndLocationSignature;
interface BulkDecrementInventoryItemsByVariantAndLocationSignature {
    /**
     * Decrements quantities of multiple inventory items by variant and location.
     *
     * > **Notes:**:
     * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
     * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
     * > + Pass `restrictInventory: false` to allow for negative quantities.
     * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
     * @param - Variant and location IDs, as well as decrement data.
     */
    (decrementData: DecrementDataByVariantAndLocation[], options?: BulkDecrementInventoryItemsByVariantAndLocationOptions | undefined): Promise<BulkDecrementInventoryItemsByVariantAndLocationResponse & BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields>;
}
declare function bulkIncrementInventoryItemsByVariantAndLocation$1(httpClient: HttpClient): BulkIncrementInventoryItemsByVariantAndLocationSignature;
interface BulkIncrementInventoryItemsByVariantAndLocationSignature {
    /**
     * Increments quantities of multiple inventory items by variant and location.
     *
     * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
     * @param - Variant and location IDs, as well as increment data.
     */
    (incrementData: IncrementDataByVariantAndLocation[], options?: BulkIncrementInventoryItemsByVariantAndLocationOptions | undefined): Promise<BulkIncrementInventoryItemsByVariantAndLocationResponse & BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields>;
}
declare const onInventoryItemCreated$1: EventDefinition<InventoryItemCreatedEnvelope, "wix.stores.catalog.v3.inventory_item_created">;
declare const onInventoryItemUpdated$1: EventDefinition<InventoryItemUpdatedEnvelope, "wix.stores.catalog.v3.inventory_item_updated">;
declare const onInventoryItemStockStatusUpdated$1: EventDefinition<InventoryItemStockStatusUpdatedEnvelope, "wix.stores.catalog.v3.inventory_item_stock_status_updated">;
declare const onInventoryItemUpdatedWithReason$1: EventDefinition<InventoryItemUpdatedWithReasonEnvelope, "wix.stores.catalog.v3.inventory_item_updated_with_reason">;
declare const onInventoryItemDeleted$1: EventDefinition<InventoryItemDeletedEnvelope, "wix.stores.catalog.v3.inventory_item_deleted">;

declare function createEventModule$3<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createInventoryItem: MaybeContext<BuildRESTFunction<typeof createInventoryItem$1> & typeof createInventoryItem$1>;
declare const bulkCreateInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkCreateInventoryItems$1> & typeof bulkCreateInventoryItems$1>;
declare const getInventoryItem: MaybeContext<BuildRESTFunction<typeof getInventoryItem$1> & typeof getInventoryItem$1>;
declare const updateInventoryItem: MaybeContext<BuildRESTFunction<typeof updateInventoryItem$1> & typeof updateInventoryItem$1>;
declare const bulkUpdateInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkUpdateInventoryItems$1> & typeof bulkUpdateInventoryItems$1>;
declare const bulkUpdateInventoryItemsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateInventoryItemsByFilter$1> & typeof bulkUpdateInventoryItemsByFilter$1>;
declare const deleteInventoryItem: MaybeContext<BuildRESTFunction<typeof deleteInventoryItem$1> & typeof deleteInventoryItem$1>;
declare const bulkDeleteInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkDeleteInventoryItems$1> & typeof bulkDeleteInventoryItems$1>;
declare const queryInventoryItems: MaybeContext<BuildRESTFunction<typeof queryInventoryItems$1> & typeof queryInventoryItems$1>;
declare const searchInventoryItems: MaybeContext<BuildRESTFunction<typeof searchInventoryItems$1> & typeof searchInventoryItems$1>;
declare const bulkDecrementInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkDecrementInventoryItems$1> & typeof bulkDecrementInventoryItems$1>;
declare const bulkIncrementInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkIncrementInventoryItems$1> & typeof bulkIncrementInventoryItems$1>;
declare const bulkDecrementInventoryItemsByVariantAndLocation: MaybeContext<BuildRESTFunction<typeof bulkDecrementInventoryItemsByVariantAndLocation$1> & typeof bulkDecrementInventoryItemsByVariantAndLocation$1>;
declare const bulkIncrementInventoryItemsByVariantAndLocation: MaybeContext<BuildRESTFunction<typeof bulkIncrementInventoryItemsByVariantAndLocation$1> & typeof bulkIncrementInventoryItemsByVariantAndLocation$1>;

type _publicOnInventoryItemCreatedType = typeof onInventoryItemCreated$1;
/**
 * Triggered when an inventory item is created.
 */
declare const onInventoryItemCreated: ReturnType<typeof createEventModule$3<_publicOnInventoryItemCreatedType>>;

type _publicOnInventoryItemUpdatedType = typeof onInventoryItemUpdated$1;
/**
 * Triggered when an inventory item is updated.
 */
declare const onInventoryItemUpdated: ReturnType<typeof createEventModule$3<_publicOnInventoryItemUpdatedType>>;

type _publicOnInventoryItemStockStatusUpdatedType = typeof onInventoryItemStockStatusUpdated$1;
/**
 * Triggered when an inventory item's stock is updated.
 */
declare const onInventoryItemStockStatusUpdated: ReturnType<typeof createEventModule$3<_publicOnInventoryItemStockStatusUpdatedType>>;

type _publicOnInventoryItemUpdatedWithReasonType = typeof onInventoryItemUpdatedWithReason$1;
/**
 * Triggered when an inventory item is updated.
 */
declare const onInventoryItemUpdatedWithReason: ReturnType<typeof createEventModule$3<_publicOnInventoryItemUpdatedWithReasonType>>;

type _publicOnInventoryItemDeletedType = typeof onInventoryItemDeleted$1;
/**
 * Triggered when an inventory item is deleted.
 */
declare const onInventoryItemDeleted: ReturnType<typeof createEventModule$3<_publicOnInventoryItemDeletedType>>;

type index_d$6_AdjustInventoryAction = AdjustInventoryAction;
type index_d$6_AdjustInventoryActionActionOneOf = AdjustInventoryActionActionOneOf;
type index_d$6_BulkCreateInventoryItemsOptions = BulkCreateInventoryItemsOptions;
type index_d$6_BulkCreateInventoryItemsRequest = BulkCreateInventoryItemsRequest;
type index_d$6_BulkCreateInventoryItemsResponse = BulkCreateInventoryItemsResponse;
type index_d$6_BulkCreateInventoryItemsResponseNonNullableFields = BulkCreateInventoryItemsResponseNonNullableFields;
type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationOptions = BulkDecrementInventoryItemsByVariantAndLocationOptions;
type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationRequest = BulkDecrementInventoryItemsByVariantAndLocationRequest;
type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationResponse = BulkDecrementInventoryItemsByVariantAndLocationResponse;
type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields = BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields;
type index_d$6_BulkDecrementInventoryItemsOptions = BulkDecrementInventoryItemsOptions;
type index_d$6_BulkDecrementInventoryItemsRequest = BulkDecrementInventoryItemsRequest;
type index_d$6_BulkDecrementInventoryItemsResponse = BulkDecrementInventoryItemsResponse;
type index_d$6_BulkDecrementInventoryItemsResponseNonNullableFields = BulkDecrementInventoryItemsResponseNonNullableFields;
type index_d$6_BulkDeleteInventoryItemsRequest = BulkDeleteInventoryItemsRequest;
type index_d$6_BulkDeleteInventoryItemsResponse = BulkDeleteInventoryItemsResponse;
type index_d$6_BulkDeleteInventoryItemsResponseNonNullableFields = BulkDeleteInventoryItemsResponseNonNullableFields;
type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationOptions = BulkIncrementInventoryItemsByVariantAndLocationOptions;
type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationRequest = BulkIncrementInventoryItemsByVariantAndLocationRequest;
type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationResponse = BulkIncrementInventoryItemsByVariantAndLocationResponse;
type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields = BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields;
type index_d$6_BulkIncrementInventoryItemsOptions = BulkIncrementInventoryItemsOptions;
type index_d$6_BulkIncrementInventoryItemsRequest = BulkIncrementInventoryItemsRequest;
type index_d$6_BulkIncrementInventoryItemsResponse = BulkIncrementInventoryItemsResponse;
type index_d$6_BulkIncrementInventoryItemsResponseNonNullableFields = BulkIncrementInventoryItemsResponseNonNullableFields;
type index_d$6_BulkSetInventoryItemsForProductsInLocationRequest = BulkSetInventoryItemsForProductsInLocationRequest;
type index_d$6_BulkSetInventoryItemsForProductsInLocationResponse = BulkSetInventoryItemsForProductsInLocationResponse;
type index_d$6_BulkSetOrAdjustInventoryItemsByFilterRequest = BulkSetOrAdjustInventoryItemsByFilterRequest;
type index_d$6_BulkSetOrAdjustInventoryItemsByFilterResponse = BulkSetOrAdjustInventoryItemsByFilterResponse;
type index_d$6_BulkUpdateInventoryItemsByFilterOptions = BulkUpdateInventoryItemsByFilterOptions;
type index_d$6_BulkUpdateInventoryItemsByFilterRequest = BulkUpdateInventoryItemsByFilterRequest;
type index_d$6_BulkUpdateInventoryItemsByFilterResponse = BulkUpdateInventoryItemsByFilterResponse;
type index_d$6_BulkUpdateInventoryItemsByFilterResponseNonNullableFields = BulkUpdateInventoryItemsByFilterResponseNonNullableFields;
type index_d$6_BulkUpdateInventoryItemsOptions = BulkUpdateInventoryItemsOptions;
type index_d$6_BulkUpdateInventoryItemsResponseNonNullableFields = BulkUpdateInventoryItemsResponseNonNullableFields;
type index_d$6_CreateInventoryItemRequest = CreateInventoryItemRequest;
type index_d$6_CreateInventoryItemResponse = CreateInventoryItemResponse;
type index_d$6_CreateInventoryItemResponseNonNullableFields = CreateInventoryItemResponseNonNullableFields;
type index_d$6_DecrementDataById = DecrementDataById;
type index_d$6_DecrementDataByVariantAndLocation = DecrementDataByVariantAndLocation;
type index_d$6_DeleteInventoryItemRequest = DeleteInventoryItemRequest;
type index_d$6_DeleteInventoryItemResponse = DeleteInventoryItemResponse;
type index_d$6_GetInventoryItemRequest = GetInventoryItemRequest;
type index_d$6_GetInventoryItemResponse = GetInventoryItemResponse;
type index_d$6_GetInventoryItemResponseNonNullableFields = GetInventoryItemResponseNonNullableFields;
type index_d$6_IncrementDataById = IncrementDataById;
type index_d$6_IncrementDataByVariantAndLocation = IncrementDataByVariantAndLocation;
type index_d$6_InventoryCursorPaging = InventoryCursorPaging;
type index_d$6_InventoryItemCreatedEnvelope = InventoryItemCreatedEnvelope;
type index_d$6_InventoryItemDeletedEnvelope = InventoryItemDeletedEnvelope;
type index_d$6_InventoryItemStockStatusUpdatedEnvelope = InventoryItemStockStatusUpdatedEnvelope;
type index_d$6_InventoryItemStockStatusUpdatedEvent = InventoryItemStockStatusUpdatedEvent;
type index_d$6_InventoryItemUpdatedEnvelope = InventoryItemUpdatedEnvelope;
type index_d$6_InventoryItemUpdatedWithReason = InventoryItemUpdatedWithReason;
type index_d$6_InventoryItemUpdatedWithReasonEnvelope = InventoryItemUpdatedWithReasonEnvelope;
type index_d$6_InventoryItemsQueryBuilder = InventoryItemsQueryBuilder;
type index_d$6_InventoryItemsQueryResult = InventoryItemsQueryResult;
type index_d$6_InventoryPaging = InventoryPaging;
type index_d$6_InventoryQuery = InventoryQuery;
type index_d$6_InventoryQueryPagingMethodOneOf = InventoryQueryPagingMethodOneOf;
type index_d$6_MaskedInventoryItem = MaskedInventoryItem;
type index_d$6_PlatformPagingMetadataV2 = PlatformPagingMetadataV2;
type index_d$6_ProductInventoryItems = ProductInventoryItems;
type index_d$6_QueryInventoryItemsRequest = QueryInventoryItemsRequest;
type index_d$6_QueryInventoryItemsResponse = QueryInventoryItemsResponse;
type index_d$6_QueryInventoryItemsResponseNonNullableFields = QueryInventoryItemsResponseNonNullableFields;
type index_d$6_SearchInventoryItemsOptions = SearchInventoryItemsOptions;
type index_d$6_SearchInventoryItemsRequest = SearchInventoryItemsRequest;
type index_d$6_SearchInventoryItemsResponse = SearchInventoryItemsResponse;
type index_d$6_SearchInventoryItemsResponseNonNullableFields = SearchInventoryItemsResponseNonNullableFields;
type index_d$6_SearchInventoryItemsWithOffsetRequest = SearchInventoryItemsWithOffsetRequest;
type index_d$6_SearchInventoryItemsWithOffsetResponse = SearchInventoryItemsWithOffsetResponse;
type index_d$6_UpdateInventoryItem = UpdateInventoryItem;
type index_d$6_UpdateInventoryItemOptions = UpdateInventoryItemOptions;
type index_d$6_UpdateInventoryItemRequest = UpdateInventoryItemRequest;
type index_d$6_UpdateInventoryItemResponse = UpdateInventoryItemResponse;
type index_d$6_UpdateInventoryItemResponseNonNullableFields = UpdateInventoryItemResponseNonNullableFields;
type index_d$6_V3BulkInventoryItemResult = V3BulkInventoryItemResult;
type index_d$6__publicOnInventoryItemCreatedType = _publicOnInventoryItemCreatedType;
type index_d$6__publicOnInventoryItemDeletedType = _publicOnInventoryItemDeletedType;
type index_d$6__publicOnInventoryItemStockStatusUpdatedType = _publicOnInventoryItemStockStatusUpdatedType;
type index_d$6__publicOnInventoryItemUpdatedType = _publicOnInventoryItemUpdatedType;
type index_d$6__publicOnInventoryItemUpdatedWithReasonType = _publicOnInventoryItemUpdatedWithReasonType;
declare const index_d$6_bulkCreateInventoryItems: typeof bulkCreateInventoryItems;
declare const index_d$6_bulkDecrementInventoryItems: typeof bulkDecrementInventoryItems;
declare const index_d$6_bulkDecrementInventoryItemsByVariantAndLocation: typeof bulkDecrementInventoryItemsByVariantAndLocation;
declare const index_d$6_bulkDeleteInventoryItems: typeof bulkDeleteInventoryItems;
declare const index_d$6_bulkIncrementInventoryItems: typeof bulkIncrementInventoryItems;
declare const index_d$6_bulkIncrementInventoryItemsByVariantAndLocation: typeof bulkIncrementInventoryItemsByVariantAndLocation;
declare const index_d$6_bulkUpdateInventoryItems: typeof bulkUpdateInventoryItems;
declare const index_d$6_bulkUpdateInventoryItemsByFilter: typeof bulkUpdateInventoryItemsByFilter;
declare const index_d$6_createInventoryItem: typeof createInventoryItem;
declare const index_d$6_deleteInventoryItem: typeof deleteInventoryItem;
declare const index_d$6_getInventoryItem: typeof getInventoryItem;
declare const index_d$6_onInventoryItemCreated: typeof onInventoryItemCreated;
declare const index_d$6_onInventoryItemDeleted: typeof onInventoryItemDeleted;
declare const index_d$6_onInventoryItemStockStatusUpdated: typeof onInventoryItemStockStatusUpdated;
declare const index_d$6_onInventoryItemUpdated: typeof onInventoryItemUpdated;
declare const index_d$6_onInventoryItemUpdatedWithReason: typeof onInventoryItemUpdatedWithReason;
declare const index_d$6_queryInventoryItems: typeof queryInventoryItems;
declare const index_d$6_searchInventoryItems: typeof searchInventoryItems;
declare const index_d$6_updateInventoryItem: typeof updateInventoryItem;
declare namespace index_d$6 {
  export { type ActionEvent$3 as ActionEvent, type index_d$6_AdjustInventoryAction as AdjustInventoryAction, type index_d$6_AdjustInventoryActionActionOneOf as AdjustInventoryActionActionOneOf, type Aggregation$1 as Aggregation, type AggregationData$1 as AggregationData, type AggregationKindOneOf$1 as AggregationKindOneOf, type AggregationResults$1 as AggregationResults, type AggregationResultsResultOneOf$1 as AggregationResultsResultOneOf, type AggregationResultsScalarResult$1 as AggregationResultsScalarResult, AggregationType$1 as AggregationType, type App$3 as App, type ApplicationError$2 as ApplicationError, AvailabilityStatus$1 as AvailabilityStatus, type BaseEventMetadata$3 as BaseEventMetadata, type BulkActionMetadata$2 as BulkActionMetadata, type index_d$6_BulkCreateInventoryItemsOptions as BulkCreateInventoryItemsOptions, type index_d$6_BulkCreateInventoryItemsRequest as BulkCreateInventoryItemsRequest, type index_d$6_BulkCreateInventoryItemsResponse as BulkCreateInventoryItemsResponse, type index_d$6_BulkCreateInventoryItemsResponseNonNullableFields as BulkCreateInventoryItemsResponseNonNullableFields, type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationOptions as BulkDecrementInventoryItemsByVariantAndLocationOptions, type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationRequest as BulkDecrementInventoryItemsByVariantAndLocationRequest, type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationResponse as BulkDecrementInventoryItemsByVariantAndLocationResponse, type index_d$6_BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields as BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields, type index_d$6_BulkDecrementInventoryItemsOptions as BulkDecrementInventoryItemsOptions, type index_d$6_BulkDecrementInventoryItemsRequest as BulkDecrementInventoryItemsRequest, type index_d$6_BulkDecrementInventoryItemsResponse as BulkDecrementInventoryItemsResponse, type index_d$6_BulkDecrementInventoryItemsResponseNonNullableFields as BulkDecrementInventoryItemsResponseNonNullableFields, type index_d$6_BulkDeleteInventoryItemsRequest as BulkDeleteInventoryItemsRequest, type index_d$6_BulkDeleteInventoryItemsResponse as BulkDeleteInventoryItemsResponse, type index_d$6_BulkDeleteInventoryItemsResponseNonNullableFields as BulkDeleteInventoryItemsResponseNonNullableFields, type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationOptions as BulkIncrementInventoryItemsByVariantAndLocationOptions, type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationRequest as BulkIncrementInventoryItemsByVariantAndLocationRequest, type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationResponse as BulkIncrementInventoryItemsByVariantAndLocationResponse, type index_d$6_BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields as BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields, type index_d$6_BulkIncrementInventoryItemsOptions as BulkIncrementInventoryItemsOptions, type index_d$6_BulkIncrementInventoryItemsRequest as BulkIncrementInventoryItemsRequest, type index_d$6_BulkIncrementInventoryItemsResponse as BulkIncrementInventoryItemsResponse, type index_d$6_BulkIncrementInventoryItemsResponseNonNullableFields as BulkIncrementInventoryItemsResponseNonNullableFields, type BulkInventoryItemAction$1 as BulkInventoryItemAction, type BulkInventoryItemResult$1 as BulkInventoryItemResult, type index_d$6_BulkSetInventoryItemsForProductsInLocationRequest as BulkSetInventoryItemsForProductsInLocationRequest, type index_d$6_BulkSetInventoryItemsForProductsInLocationResponse as BulkSetInventoryItemsForProductsInLocationResponse, type index_d$6_BulkSetOrAdjustInventoryItemsByFilterRequest as BulkSetOrAdjustInventoryItemsByFilterRequest, type index_d$6_BulkSetOrAdjustInventoryItemsByFilterResponse as BulkSetOrAdjustInventoryItemsByFilterResponse, type index_d$6_BulkUpdateInventoryItemsByFilterOptions as BulkUpdateInventoryItemsByFilterOptions, type index_d$6_BulkUpdateInventoryItemsByFilterRequest as BulkUpdateInventoryItemsByFilterRequest, type index_d$6_BulkUpdateInventoryItemsByFilterResponse as BulkUpdateInventoryItemsByFilterResponse, type index_d$6_BulkUpdateInventoryItemsByFilterResponseNonNullableFields as BulkUpdateInventoryItemsByFilterResponseNonNullableFields, type index_d$6_BulkUpdateInventoryItemsOptions as BulkUpdateInventoryItemsOptions, type BulkUpdateInventoryItemsRequest$1 as BulkUpdateInventoryItemsRequest, type BulkUpdateInventoryItemsResponse$1 as BulkUpdateInventoryItemsResponse, type index_d$6_BulkUpdateInventoryItemsResponseNonNullableFields as BulkUpdateInventoryItemsResponseNonNullableFields, type index_d$6_CreateInventoryItemRequest as CreateInventoryItemRequest, type index_d$6_CreateInventoryItemResponse as CreateInventoryItemResponse, type index_d$6_CreateInventoryItemResponseNonNullableFields as CreateInventoryItemResponseNonNullableFields, type CursorPaging$3 as CursorPaging, type CursorPagingMetadata$3 as CursorPagingMetadata, type CursorSearch$1 as CursorSearch, type CursorSearchPagingMethodOneOf$1 as CursorSearchPagingMethodOneOf, type Cursors$3 as Cursors, type DateHistogramAggregation$1 as DateHistogramAggregation, type DateHistogramResult$1 as DateHistogramResult, type DateHistogramResults$1 as DateHistogramResults, type index_d$6_DecrementDataById as DecrementDataById, type index_d$6_DecrementDataByVariantAndLocation as DecrementDataByVariantAndLocation, type index_d$6_DeleteInventoryItemRequest as DeleteInventoryItemRequest, type index_d$6_DeleteInventoryItemResponse as DeleteInventoryItemResponse, type DomainEvent$3 as DomainEvent, type DomainEventBodyOneOf$3 as DomainEventBodyOneOf, type Empty$4 as Empty, type EntityCreatedEvent$3 as EntityCreatedEvent, type EntityDeletedEvent$3 as EntityDeletedEvent, type EntityUpdatedEvent$3 as EntityUpdatedEvent, type EventMetadata$2 as EventMetadata, type ExtendedFields$1 as ExtendedFields, type File$3 as File, type index_d$6_GetInventoryItemRequest as GetInventoryItemRequest, type index_d$6_GetInventoryItemResponse as GetInventoryItemResponse, type index_d$6_GetInventoryItemResponseNonNullableFields as GetInventoryItemResponseNonNullableFields, type GroupByAggregation$1 as GroupByAggregation, type GroupByAggregationKindOneOf$1 as GroupByAggregationKindOneOf, type GroupByValueResults$1 as GroupByValueResults, type IdentificationData$5 as IdentificationData, type IdentificationDataIdOneOf$5 as IdentificationDataIdOneOf, type IncludeMissingValuesOptions$1 as IncludeMissingValuesOptions, type index_d$6_IncrementDataById as IncrementDataById, type index_d$6_IncrementDataByVariantAndLocation as IncrementDataByVariantAndLocation, Interval$1 as Interval, type InvalidateCache$3 as InvalidateCache, type InvalidateCacheGetByOneOf$3 as InvalidateCacheGetByOneOf, type index_d$6_InventoryCursorPaging as InventoryCursorPaging, type InventoryItem$1 as InventoryItem, type index_d$6_InventoryItemCreatedEnvelope as InventoryItemCreatedEnvelope, type index_d$6_InventoryItemDeletedEnvelope as InventoryItemDeletedEnvelope, type InventoryItemNonNullableFields$1 as InventoryItemNonNullableFields, type index_d$6_InventoryItemStockStatusUpdatedEnvelope as InventoryItemStockStatusUpdatedEnvelope, type index_d$6_InventoryItemStockStatusUpdatedEvent as InventoryItemStockStatusUpdatedEvent, type InventoryItemTrackingMethodOneOf$1 as InventoryItemTrackingMethodOneOf, type index_d$6_InventoryItemUpdatedEnvelope as InventoryItemUpdatedEnvelope, type index_d$6_InventoryItemUpdatedWithReason as InventoryItemUpdatedWithReason, type index_d$6_InventoryItemUpdatedWithReasonEnvelope as InventoryItemUpdatedWithReasonEnvelope, type index_d$6_InventoryItemsQueryBuilder as InventoryItemsQueryBuilder, type index_d$6_InventoryItemsQueryResult as InventoryItemsQueryResult, type index_d$6_InventoryPaging as InventoryPaging, type index_d$6_InventoryQuery as InventoryQuery, type index_d$6_InventoryQueryPagingMethodOneOf as InventoryQueryPagingMethodOneOf, type ItemMetadata$2 as ItemMetadata, type index_d$6_MaskedInventoryItem as MaskedInventoryItem, type MessageEnvelope$5 as MessageEnvelope, MissingValues$1 as MissingValues, Mode$1 as Mode, type NestedAggregation$1 as NestedAggregation, type NestedAggregationItem$1 as NestedAggregationItem, type NestedAggregationItemKindOneOf$1 as NestedAggregationItemKindOneOf, type NestedAggregationResults$1 as NestedAggregationResults, type NestedAggregationResultsResultOneOf$1 as NestedAggregationResultsResultOneOf, NestedAggregationType$1 as NestedAggregationType, type NestedResultValue$1 as NestedResultValue, type NestedResultValueResultOneOf$1 as NestedResultValueResultOneOf, type NestedResults$1 as NestedResults, type NestedValueAggregationResult$1 as NestedValueAggregationResult, type Page$3 as Page, type PagingMetadata$3 as PagingMetadata, type PlatformOffsetSearch$1 as PlatformOffsetSearch, type PlatformOffsetSearchPagingMethodOneOf$1 as PlatformOffsetSearchPagingMethodOneOf, type PlatformPaging$1 as PlatformPaging, type index_d$6_PlatformPagingMetadataV2 as PlatformPagingMetadataV2, type PreorderInfo$2 as PreorderInfo, type Product$1 as Product, type index_d$6_ProductInventoryItems as ProductInventoryItems, type index_d$6_QueryInventoryItemsRequest as QueryInventoryItemsRequest, type index_d$6_QueryInventoryItemsResponse as QueryInventoryItemsResponse, type index_d$6_QueryInventoryItemsResponseNonNullableFields as QueryInventoryItemsResponseNonNullableFields, type RangeAggregation$1 as RangeAggregation, type RangeAggregationResult$1 as RangeAggregationResult, type RangeBucket$1 as RangeBucket, type RangeResult$1 as RangeResult, type RangeResults$1 as RangeResults, ReasonType$1 as ReasonType, type RestoreInfo$3 as RestoreInfo, type Results$1 as Results, type ScalarAggregation$1 as ScalarAggregation, type ScalarResult$1 as ScalarResult, ScalarType$1 as ScalarType, type SearchDetails$1 as SearchDetails, type index_d$6_SearchInventoryItemsOptions as SearchInventoryItemsOptions, type index_d$6_SearchInventoryItemsRequest as SearchInventoryItemsRequest, type index_d$6_SearchInventoryItemsResponse as SearchInventoryItemsResponse, type index_d$6_SearchInventoryItemsResponseNonNullableFields as SearchInventoryItemsResponseNonNullableFields, type index_d$6_SearchInventoryItemsWithOffsetRequest as SearchInventoryItemsWithOffsetRequest, type index_d$6_SearchInventoryItemsWithOffsetResponse as SearchInventoryItemsWithOffsetResponse, SortDirection$1 as SortDirection, SortOrder$3 as SortOrder, SortType$1 as SortType, type Sorting$3 as Sorting, type URI$3 as URI, type index_d$6_UpdateInventoryItem as UpdateInventoryItem, type index_d$6_UpdateInventoryItemOptions as UpdateInventoryItemOptions, type index_d$6_UpdateInventoryItemRequest as UpdateInventoryItemRequest, type index_d$6_UpdateInventoryItemResponse as UpdateInventoryItemResponse, type index_d$6_UpdateInventoryItemResponseNonNullableFields as UpdateInventoryItemResponseNonNullableFields, type index_d$6_V3BulkInventoryItemResult as V3BulkInventoryItemResult, type ValueAggregation$1 as ValueAggregation, type ValueAggregationOptionsOneOf$1 as ValueAggregationOptionsOneOf, type ValueAggregationResult$1 as ValueAggregationResult, type ValueResult$1 as ValueResult, type ValueResults$1 as ValueResults, WebhookIdentityType$5 as WebhookIdentityType, type index_d$6__publicOnInventoryItemCreatedType as _publicOnInventoryItemCreatedType, type index_d$6__publicOnInventoryItemDeletedType as _publicOnInventoryItemDeletedType, type index_d$6__publicOnInventoryItemStockStatusUpdatedType as _publicOnInventoryItemStockStatusUpdatedType, type index_d$6__publicOnInventoryItemUpdatedType as _publicOnInventoryItemUpdatedType, type index_d$6__publicOnInventoryItemUpdatedWithReasonType as _publicOnInventoryItemUpdatedWithReasonType, index_d$6_bulkCreateInventoryItems as bulkCreateInventoryItems, index_d$6_bulkDecrementInventoryItems as bulkDecrementInventoryItems, index_d$6_bulkDecrementInventoryItemsByVariantAndLocation as bulkDecrementInventoryItemsByVariantAndLocation, index_d$6_bulkDeleteInventoryItems as bulkDeleteInventoryItems, index_d$6_bulkIncrementInventoryItems as bulkIncrementInventoryItems, index_d$6_bulkIncrementInventoryItemsByVariantAndLocation as bulkIncrementInventoryItemsByVariantAndLocation, index_d$6_bulkUpdateInventoryItems as bulkUpdateInventoryItems, index_d$6_bulkUpdateInventoryItemsByFilter as bulkUpdateInventoryItemsByFilter, index_d$6_createInventoryItem as createInventoryItem, index_d$6_deleteInventoryItem as deleteInventoryItem, index_d$6_getInventoryItem as getInventoryItem, index_d$6_onInventoryItemCreated as onInventoryItemCreated, index_d$6_onInventoryItemDeleted as onInventoryItemDeleted, index_d$6_onInventoryItemStockStatusUpdated as onInventoryItemStockStatusUpdated, index_d$6_onInventoryItemUpdated as onInventoryItemUpdated, index_d$6_onInventoryItemUpdatedWithReason as onInventoryItemUpdatedWithReason, onInventoryItemCreated$1 as publicOnInventoryItemCreated, onInventoryItemDeleted$1 as publicOnInventoryItemDeleted, onInventoryItemStockStatusUpdated$1 as publicOnInventoryItemStockStatusUpdated, onInventoryItemUpdated$1 as publicOnInventoryItemUpdated, onInventoryItemUpdatedWithReason$1 as publicOnInventoryItemUpdatedWithReason, index_d$6_queryInventoryItems as queryInventoryItems, index_d$6_searchInventoryItems as searchInventoryItems, index_d$6_updateInventoryItem as updateInventoryItem };
}

interface V3Product extends V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Product name. Translatable. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: string;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon$1;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product base price range - minimum and maximum prices of all product variants.
     * @readonly
     */
    basePriceRange?: PriceRange;
    /**
     * Product sale price range - minimum and maximum sale prices of all product variants.
     * @readonly
     */
    salePriceRange?: PriceRange;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /** Product variants. */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
/** @oneof */
interface V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** Data for a map node. */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType;
    /** Node ID. */
    _id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** Data for a map node. */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
}
declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION"
}
interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: Type;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
interface Border {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface Colors {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
interface Styles {
    /** Border attributes. */
    border?: Border;
    /** Color attributes. */
    colors?: Colors;
}
interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyle;
    /** Divider width. */
    width?: Width;
    /** Divider alignment. */
    alignment?: Alignment;
}
declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
declare enum Alignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
}
interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface V1Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image {
    /** Image file details. */
    media?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
}
interface Video {
    /** Video file details. */
    media?: V1Media;
    /** Video thumbnail file details. */
    thumbnail?: V1Media;
}
interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
}
interface GalleryOptions {
    /** Gallery layout. */
    layout?: Layout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
interface Layout {
    /** Gallery layout type. */
    type?: LayoutType;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
}
interface GIF {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: Source;
}
/** @oneof */
interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType;
}
declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRole;
    /** Sets who can vote. */
    vote?: VoteRole;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option {
    /** Option ID. */
    _id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media;
}
interface PollSettings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
interface Background extends BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType;
}
/** @oneof */
interface BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll {
    /** Poll ID. */
    _id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings;
}
interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** The type of decoration to apply. */
    type?: DecorationType;
}
/** @oneof */
interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
}
declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData {
    /** Link details. */
    link?: Link;
}
interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    _id?: string | null;
}
interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontType;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType {
    PX = "PX",
    EM = "EM"
}
interface SpoilerData {
    /** Spoiler ID. */
    _id?: string | null;
}
interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppType;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: V1Media;
    /** Video thumbnail details. */
    thumbnail?: V1Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface BorderColors {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
declare enum NullValue {
    /** Null value. */
    NULL_VALUE = "NULL_VALUE"
}
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
interface ListValue {
    /** Repeated field of dynamically typed values. */
    values?: any[];
}
interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: V1Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData {
    textStyle?: TextStyle;
}
interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface Media {
    /**
     * Main media (image, video, etc.) associated with this product.
     * @readonly
     */
    main?: ProductMedia;
    /**
     * All media items.
     * > **Note:** Returned only when you pass `"MEDIA_ITEMS_INFO"` to the `fields` array in Products API requests.
     */
    itemsInfo?: MediaItemsInfo;
}
interface ProductMedia extends ProductMediaSetByOneOf, ProductMediaMediaOneOf {
    /** ID of existing media from Wix Media Manager. */
    _id?: string;
    /** Media URL. */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: MediaType;
    /**
     * Media thumbnail.
     * > **Note:** Returned only when you pass `"THUMBNAIL"` to the `fields` array in Products API requests.
     */
    thumbnail?: Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     */
    uploadId?: string;
}
/** @oneof */
interface ProductMediaSetByOneOf {
    /** ID of existing media from Wix Media Manager. */
    _id?: string;
    /** Media URL. */
    url?: string;
}
/** @oneof */
interface ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
}
interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
declare enum MediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    IMAGE = "IMAGE",
    VIDEO = "VIDEO"
}
interface Thumbnail {
    /** Thumbnail url. */
    url?: string;
    /** Thumbnail height. */
    height?: number;
    /** Thumbnail width. */
    width?: number;
    /** Thumbnail alt text. */
    altText?: string | null;
}
interface MediaItemsInfo {
    /** All media items (images, videos etc) associated with this product. */
    items?: ProductMedia[];
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{'key':'value'}` pair object where each SEO tag property (`'name'`, `'content'`, `'rel'`, `'href'`) contains a value.
     * For example: `{'name': 'description', 'content': 'the description itself'}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{height: 300, width: 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
interface ConnectedOption extends ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
    /** ID of a customization with `customizationType: PRODUCT_OPTION`. */
    _id?: string | null;
    /** Option name. */
    name?: string | null;
    /** Option render type. */
    optionRenderType?: ProductOptionRenderType;
}
/** @oneof */
interface ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
}
declare enum ProductOptionRenderType {
    UNKNOWN_OPTION_RENDER_TYPE = "UNKNOWN_OPTION_RENDER_TYPE",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface ChoicesSettings {
    /** List of available choices for the option. */
    choices?: ConnectedOptionChoice[];
}
interface ConnectedOptionChoice extends ConnectedOptionChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** The id of the choice. */
    choiceId?: string | null;
    /**
     * Product media overrides. When not empty only these images will be shown when such choices selected by customer. Otherwise all images of product.
     * When several choices from different options selected only media filter present in `media_overrides` of ALL choices will be shown.
     * For example if Color:red has images 1,2,3 and Material:Silk has images 2,3,5 then only images 2,3 will be shown when both of them selected.
     */
    linkedMedia?: ProductMedia[];
    /** The type of this choice. */
    choiceType?: ChoiceType;
    /** Choice name. */
    name?: string | null;
    /**
     * A flag that indicates if at least one variant with this choice is in stock in the default store's location.
     * For example, a product with 'Color' and 'Size' options with variants: [Blue, Small] which is out of stock and [Red Large] which is in stock. For choice 'Blue' ths flag will be 'false' and for 'Red' the flag will be true
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether at least one variant with this choice is visible.
     *
     * Default: `false`
     * @readonly
     */
    visible?: boolean;
}
/** @oneof */
interface ConnectedOptionChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    CHOICE_TEXT = "CHOICE_TEXT",
    ONE_COLOR = "ONE_COLOR",
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    IMAGE = "IMAGE"
}
interface MultipleColors {
    /** List of color codes. */
    colorCodes?: string[];
}
interface ConnectedModifier extends ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
    /** ID of a customization with `customizationType: MODIFIER`. */
    _id?: string | null;
    /** Modifier title. */
    name?: string | null;
    /** Modifier render type. */
    modifierRenderType?: ModifierRenderType;
    /** Whether customer input is required for this modifier. */
    mandatory?: boolean;
}
/** @oneof */
interface ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
}
declare enum ModifierRenderType {
    UNKNOWN_MODIFIER_RENDER_TYPE = "UNKNOWN_MODIFIER_RENDER_TYPE",
    FREE_TEXT = "FREE_TEXT",
    TEXT_CHOICES = "TEXT_CHOICES",
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
interface FreeTextSettings {
    /** Minimum number of characters. */
    minCharCount?: number;
    /** Maximum number of characters. */
    maxCharCount?: number;
    /** Default amount to be added to the product's price. */
    defaultAddedPrice?: string | null;
    /** Title of the text to be input by the customer. */
    title?: string;
}
interface ModifierChoicesSettings {
    /** List of modifier choices. */
    choices?: ConnectedModifierChoice[];
}
interface ConnectedModifierChoice extends ConnectedModifierChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** Choice ID. */
    choiceId?: string | null;
    /** Product media. */
    linkedMedia?: ProductMedia[];
    /** Choice type. */
    choiceType?: ChoiceType;
    /**
     * Modifier key. Used for eCommerce integration.
     * @readonly
     */
    key?: string;
    /** Choice name. */
    name?: string | null;
    /** Added price. */
    addedPrice?: string | null;
}
/** @oneof */
interface ConnectedModifierChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
interface Brand {
    /** Brand ID. */
    _id?: string | null;
    /** Brand name. */
    name?: string | null;
}
interface InfoSection {
    /** Info section ID. */
    _id?: string | null;
    /**
     * Info section unique name.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @readonly
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     * > **Note:** Returned only when you pass `"INFO_SECTION_DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"INFO_SECTION_PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
}
interface Ribbon$1 {
    /** Ribbon ID. */
    _id?: string | null;
    /** Ribbon name. */
    name?: string | null;
}
interface ProductCategoriesInfo {
    /**
     * A list of categories related to product.
     * @readonly
     */
    categories?: ProductCategory[];
}
interface ProductCategory {
    /** Category ID. */
    _id?: string;
    /** Index location of the product within the category, which can be utilized for sorting products in a specific category. For detailed instructions on how to set this up, refer to the [Add and arrange products in category](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/sample-use-cases-and-flows#add-and-arrange-products-in-category) sample flow. */
    index?: number | null;
}
interface ProductCategoryIdsInfo {
    /**
     * A list of category ids related to product.
     * @readonly
     */
    categoryIds?: string[];
}
interface PriceRange {
    /** Minimum value. */
    minValue?: FixedMonetaryAmount;
    /** Maximum value. */
    maxValue?: FixedMonetaryAmount;
}
interface FixedMonetaryAmount {
    /** Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount. */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    formattedAmount?: string | null;
}
interface Inventory {
    /**
     * Current availability status.
     *
     * + `IN_STOCK`: All variants are in stock and available for purchase
     * + `OUT_OF_STOCK`: All variants are out of stock
     * + `PARTIALLY_OUT_OF_STOCK`: Some variants are out of stock and some are in stock and available for purchase
     * @readonly
     */
    availabilityStatus?: InventoryAvailabilityStatus;
    /**
     * Current preorder status/
     *
     * + `ENABLED`: All variants are enabled for preorder
     * + `DISABLED`: All variants are disabled for preorder
     * + `PARTIALLY_ENABLED`: Some variants are disabled and some are enabled for preorder
     * @readonly
     */
    preorderStatus?: PreorderStatus;
    /**
     * Supported values:
     * + `ALL_VARIANTS`: All the product variants are available for preorder.
     * + `NO_VARIANTS`: None of the product variants are available for preorder.
     * + `SOME_VARIANTS`: Some of the product variants are available for preorder.
     * @readonly
     */
    preorderAvailability?: ProductPreorderAvailability;
}
declare enum InventoryAvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
declare enum PreorderStatus {
    UNKNOWN_PREORDER_STATUS = "UNKNOWN_PREORDER_STATUS",
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    PARTIALLY_ENABLED = "PARTIALLY_ENABLED"
}
declare enum ProductPreorderAvailability {
    UNKNOWN_PREORDER_AVAILABILITY_STATUS = "UNKNOWN_PREORDER_AVAILABILITY_STATUS",
    ALL_VARIANTS = "ALL_VARIANTS",
    NO_VARIANTS = "NO_VARIANTS",
    SOME_VARIANTS = "SOME_VARIANTS"
}
declare enum ProductType {
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL"
}
interface PhysicalProperties {
    /** Price per unit settings. */
    pricePerUnit?: PricePerUnitSettings;
    /** Fulfiller ID. */
    fulfillerId?: string | null;
    /**
     * Product shipping weight range - minimum and maximum weights of all the variants.
     * @readonly
     */
    shippingWeightRange?: WeightRange;
    /**
     * Product price per unit range. The minimum and maximum price per unit of all the variants.
     * @readonly
     */
    pricePerUnitRange?: PricePerUnitRange;
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfo;
}
interface PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     */
    measurementUnit?: MeasurementUnit;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
interface WeightRange {
    /** Minimum weight across all variants associated with this product. */
    minValue?: number;
    /** Maximum weight across all variants associated with this product. */
    maxValue?: number;
}
interface PricePerUnitRange {
    /** Minimum price per unit across all variants. */
    minValue?: PricePerUnitRangePricePerUnit;
    /** Maximum price per unit across all variants. */
    maxValue?: PricePerUnitRangePricePerUnit;
}
interface PricePerUnitRangePricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account pricePerUnit settings of product and variants and sale price of variants.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit info in the format of variant specific data / product setting, for example €4.00 / 1 Kg.
     * > **Note:** This field is returned by the API only when you pass `fields: "CURRENCY"` in a request.
     * @readonly
     */
    description?: string | null;
}
interface WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnit;
}
declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
interface BreadcrumbsInfo {
    /**
     * Breadcrumbs.
     * @readonly
     */
    breadcrumbs?: BreadCrumb[];
}
interface BreadCrumb {
    /** Category ID. */
    categoryId?: string;
    /** Category name. */
    categoryName?: string;
    /** Category slug. */
    categorySlug?: string;
}
interface VariantsInfo {
    /** List of related variants. */
    variants?: Variant[];
}
interface Variant extends VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /** Variant ID. */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /**
     * List of choices.
     * In case this list is empty, this is the default variant of an unmanaged product.
     */
    choices?: OptionChoice[];
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.salePrice`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: InventoryStatus;
}
/** @oneof */
interface VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface OptionChoice {
    /** Option and choice IDs. */
    optionChoiceIds?: OptionChoiceIds;
    /**
     * Option and choice names.
     * > **Note:** Returned only when you pass `"VARIANT_OPTION_CHOICE_NAMES"` to the `fields` array in Products API requests.
     */
    optionChoiceNames?: OptionChoiceNames;
}
interface OptionChoiceIds {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
interface OptionChoiceNames {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType;
}
interface PriceInfo {
    /** Variant price. Must be greater or equal to 0. */
    basePrice?: FixedMonetaryAmount;
    /** Variant sale price. If not provided, sale price will be equal to `basePrice`. When provided, value must be greater or equal to 0, and less than or equal to `basePrice`. */
    salePrice?: FixedMonetaryAmount;
}
interface RevenueDetails {
    /** Item cost. */
    cost?: FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
interface VariantPhysicalProperties {
    /** Variant shipping weight. */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     */
    pricePerUnit?: PricePerUnit;
}
interface PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     */
    settings?: PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
interface VariantDigitalProperties {
    /** Digital file which will be downloaded by customer after successful purchase. */
    digitalFile?: SecuredMedia;
}
interface SecuredMedia {
    /** Media ID in media manager. */
    _id?: string;
    /**
     * Original file name.
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @readonly
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: FileType;
}
declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
interface SubscriptionPricesInfo {
    /** Subscription prices. */
    subscriptionPrices?: SubscriptionPrice[];
}
interface SubscriptionPrice {
    /**
     * Subscription ID.
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.salePrice`
     * @readonly
     */
    price?: FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: SubscriptionPricePerUnit;
}
interface SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
interface InventoryStatus {
    /** Whether the variant is in stock. */
    inStock?: boolean;
    /** Whether preorder is enabled for this variant. */
    preorderEnabled?: boolean;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface SubscriptionDetails {
    /** Subscriptions. */
    subscriptions?: Subscription[];
    /**
     * Whether to allow one-time purchases in addition to subscription-based purchases.
     *
     * Default: `false`
     */
    allowOneTimePurchases?: boolean | null;
}
interface Subscription extends SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
    /** Subscription ID. */
    _id?: string | null;
    /** Subscription title. */
    title?: string;
    /** Subscription description. */
    description?: string | null;
    /**
     * Whether the subscription is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Frequency of recurring payment.
     * For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     */
    frequency?: SubscriptionFrequency$1;
    /** Interval of recurring payment. Default: `1`. For example, if `frequency: MONTH`, `billingCycles: 3` and `interval: 2`; payment will be made every 2 months for a total of 6 months. */
    interval?: number | null;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `amount: 20`, `type: AMOUNT`.
     */
    discount?: SubscriptionDiscount;
}
/** @oneof */
interface SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface SubscriptionDiscount extends SubscriptionDiscountDiscountOneOf {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
    /** Discount type. */
    type?: DiscountType$1;
}
/** @oneof */
interface SubscriptionDiscountDiscountOneOf {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
}
declare enum DiscountType$1 {
    UNKNOWN_DISCOUNT = "UNKNOWN_DISCOUNT",
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface VariantSummary {
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantCount?: number;
}
interface MinVariantPriceInfo {
    /**
     * Variant price. Must be greater or equal to 0.
     * @readonly
     */
    basePrice?: FixedMonetaryAmount;
    /**
     * Variant sale price. If not provided, sale price will be equal to `basePrice`. When provided, value must be greater or equal to 0, and less than or equal to `basePrice`.
     * @readonly
     */
    salePrice?: FixedMonetaryAmount;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.salePrice`
     * @readonly
     */
    minSubscriptionPrice?: FixedMonetaryAmount;
    /**
     * Subscription price per unit calculated value of price per unit.
     * Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     */
    minSubscriptionPricePerUnit?: string | null;
    /**
     * Variant price per unit.
     * @readonly
     */
    pricePerUnitData?: PricePerUnit;
    /**
     * Variant SKU (stock keeping unit).
     * @readonly
     */
    sku?: string | null;
    /**
     * Variant shipping weight.
     * @readonly
     */
    weight?: number | null;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    revenueDetails?: RevenueDetails;
}
interface UpdateDocumentsEvent extends UpdateDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: DocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update documents matching filter */
    updateByFilter?: UpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: UpdateExistingOperation;
    /** application which owns documents */
    appDefId?: string | null;
    /** type of the documents */
    documentType?: string | null;
    /** language of the documents */
    language?: string | null;
    /** site documents belong to */
    msId?: string | null;
}
/** @oneof */
interface UpdateDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: DocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update documents matching filter */
    updateByFilter?: UpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: UpdateExistingOperation;
}
interface DocumentUpdateOperation {
    /** documents to index or update */
    documents?: IndexDocument[];
}
interface IndexDocument {
    /** data bag with non-searchable fields (url, image) */
    payload?: DocumentPayload;
    /** what type of users should documents be visible to */
    exposure?: Enum;
    /** document with mandatory fields (id, title, description) and with fields specific to the type of the document */
    document?: Record<string, any> | null;
    /** what member groups is the document exposed to. Used only with GROUP_PROTECTED exposure */
    permittedMemberGroups?: string[];
    /** if true SEO is disabled for this document */
    seoHidden?: boolean | null;
    /** if true the page is a lightbox popup */
    isPopup?: boolean | null;
}
interface DocumentPayload {
    /** url of the page representing the document */
    url?: string | null;
    /** image which represents the document */
    documentImage?: DocumentImage;
}
interface DocumentImage {
    /** the name of the image */
    name?: string;
    /** the width of the image */
    width?: number;
    /** the height of the image */
    height?: number;
}
declare enum Enum {
    /** Default value. Means that permission not set */
    UNKNOWN = "UNKNOWN",
    /** Protected exposure. Exposed to members and owners */
    PROTECTED = "PROTECTED",
    /** Private exposure. Exposed to owners */
    PRIVATE = "PRIVATE",
    /** Public exposure. Visible to everyone */
    PUBLIC = "PUBLIC",
    /** Used for partial updates, to state that exposure is not changing */
    UNCHANGED = "UNCHANGED",
    /** Protected to members of permitted groups and owners */
    GROUP_PROTECTED = "GROUP_PROTECTED"
}
interface DeleteByIdsOperation {
    /** ids of the documents to delete */
    documentIds?: string[];
}
interface DeleteByFilterOperation {
    /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
    filter?: Record<string, any> | null;
}
interface UpdateByFilterOperation {
    /** documents matching this filter will be updated */
    filter?: Record<string, any> | null;
    /** partial document to apply */
    document?: IndexDocument;
}
interface UpdateExistingOperation {
    /** documents to update */
    documents?: IndexDocument[];
}
interface DomainEvent$2 extends DomainEventBodyOneOf$2 {
    createdEvent?: EntityCreatedEvent$2;
    updatedEvent?: EntityUpdatedEvent$2;
    deletedEvent?: EntityDeletedEvent$2;
    actionEvent?: ActionEvent$2;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$2 {
    createdEvent?: EntityCreatedEvent$2;
    updatedEvent?: EntityUpdatedEvent$2;
    deletedEvent?: EntityDeletedEvent$2;
    actionEvent?: ActionEvent$2;
}
interface EntityCreatedEvent$2 {
    entity?: string;
}
interface RestoreInfo$2 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$2 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$2 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$2 {
    body?: string;
}
interface Empty$3 {
}
interface SearchIndexingNotification {
    /** new state of indexing for the site specified in ms_id */
    indexState?: State$1;
    /** type of the document the notification is targeted for. Applies to all types if not provided */
    documentType?: string | null;
    /** languaInternalDocumentUpdateByFilterOperationge the notification is targeted for. Applies to all languages if not provided */
    language?: string | null;
    /** site for which notification is targeted */
    msId?: string | null;
}
declare enum State$1 {
    /** default state */
    Unknown = "Unknown",
    /** metasite does not require site search indexing */
    Off = "Off",
    /** metasite requires site search indexing */
    On = "On"
}
interface MessageEnvelope$4 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$4;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$4 extends IdentificationDataIdOneOf$4 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$4;
}
/** @oneof */
interface IdentificationDataIdOneOf$4 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$4 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CreateProductRequest {
    /**
     * Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: V3Product;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
declare enum SingleEntityOpsRequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANTS_INFO = "VARIANTS_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    MIN_VARIANT_PRICE_INFO = "MIN_VARIANT_PRICE_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL",
    DIRECT_CATEGORY_IDS = "DIRECT_CATEGORY_IDS"
}
interface CreateProductResponse {
    /** Created product. */
    product?: V3Product;
}
interface VariantsNotAlignedWithProduct {
    /** Variants not aligned with product */
    variants?: VariantNotAlignedWithProduct[];
}
interface VariantNotAlignedWithProduct {
    /** variant id */
    variantId?: string;
    /** what's wrong with this specific variant */
    errorDescription?: string;
}
interface CreateProductWithInventoryRequest {
    /**
     * Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: ProductWithInventory;
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface ProductWithInventory extends ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /** Product name. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     */
    options?: ConnectedOption[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon$1;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the Wix Dev Center before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface V3VariantsInfo {
    /**
     * List of related variants.
     * Partial update of variants is not supported so on update you must pass all data for all of them.
     * If you want to update existing variant you must provide `id`, otherwise new variant with different id will be created which might break some integrations that rely on variant ids.
     */
    variants?: VariantWithInventory[];
}
interface VariantWithInventory extends VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /** Variant ID. */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /** Inventory item of the variant on the default location. */
    inventoryItem?: InventoryItemComposite;
    /** List of choices. */
    choices?: OptionChoiceReferences[];
}
/** @oneof */
interface VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface InventoryItemComposite extends InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Inventory item revision.
     * @readonly
     */
    revision?: string | null;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$1;
}
/** @oneof */
interface InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
interface PreorderInfo$1 {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface OptionChoiceReferences {
    /** Option and choice IDs. */
    optionChoiceIds?: V3OptionChoiceIds;
    /** Option and choice names. */
    optionChoiceNames?: V3OptionChoiceNames;
}
interface V3OptionChoiceIds {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
interface V3OptionChoiceNames {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType;
}
interface CreateProductWithInventoryResponse {
    /** Created product. */
    product?: V3Product;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkInventoryItemResults {
    /** Inventories modified by bulk action. */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
    /** Error details in case of failed action. */
    error?: ApplicationError$1;
}
interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: CommonItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
interface CommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/** Inventory Item. */
interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$1;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    IN_STOCK = "IN_STOCK",
    /**
     * Whether the variant is available for preorder. InventoryItem will be available only when all below conditions are met:
     * 1. the variant is out of stock
     * 2. preorder is enabled on inventory item level (preorder_setting.enabled is true)
     * 3. preorder limit wasn't reached (preorder_setting.limit)
     */
    PREORDER = "PREORDER"
}
interface Product {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
}
interface CommonBulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface UpdateProductRequest {
    /** Product to update. */
    product: V3Product;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateProductResponse {
    /** Updated product. */
    product?: V3Product;
}
interface UnsupportedFieldMasks {
    /** Field masks provided in request but not supported */
    fieldMasks?: string[];
}
interface UpdateProductWithInventoryRequest {
    /** Product to update. */
    product: ProductWithInventory;
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateProductWithInventoryResponse {
    /** Updated product. */
    product?: V3Product;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkCreateProductsRequest {
    /** List of products to create. */
    products: V3Product[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
declare enum RequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANTS_INFO = "VARIANTS_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    MIN_VARIANT_PRICE_INFO = "MIN_VARIANT_PRICE_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL",
    DIRECT_CATEGORY_IDS = "DIRECT_CATEGORY_IDS"
}
interface BulkCreateProductsResponse {
    /** Products created by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface CatalogV3BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: WixCommonItemMetadata;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
interface WixCommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface BulkCreateProductsWithInventoryRequest {
    /** List of products to create with inventory. */
    products: ProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkCreateProductsWithInventoryResponse {
    /** Products created by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface BulkProductResults {
    /** Products modified by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkUpdateProductsRequest {
    /** List of products to update. */
    products: V3MaskedProduct[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface V3MaskedProduct {
    /** Product to update. */
    product?: V3Product;
}
interface BulkUpdateProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkUpdateProductsWithInventoryRequest {
    /** List of products to update. */
    products: MaskedProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface MaskedProductWithInventory {
    /** Product to update. */
    product?: ProductWithInventory;
}
interface BulkUpdateProductsWithInventoryResponse {
    /** Products updated by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
interface V3BulkUpdateProductsByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface WixCommonSearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: CommonSearchDetailsMode;
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum CommonSearchDetailsMode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
interface V3BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3UpdateExtendedFieldsRequest {
    /** Product ID. */
    productId: string;
    /** App namespace. */
    namespace: string;
    /** Data to update. */
    namespaceData: Record<string, any> | null;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface V3UpdateExtendedFieldsResponse {
    /** Updated product. */
    product?: V3Product;
}
interface V3DeleteProductRequest {
    /** Product ID. */
    productId: string;
}
interface V3DeleteProductResponse {
}
interface V3BulkDeleteProductsRequest {
    /** IDs of products to delete. */
    productIds: string[];
}
interface V3BulkDeleteProductsResponse {
    /** Products deleted by bulk action. */
    results?: BulkDeleteProductsResponseBulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkDeleteProductsResponseBulkProductResult {
    /** Bulk action metadata for products. */
    itemMetadata?: WixCommonItemMetadata;
}
interface V3BulkDeleteProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3GetProductRequest {
    /** Product ID. */
    productId: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface V3GetProductResponse {
    /** Product. */
    product?: V3Product;
}
interface V3GetProductBySlugRequest {
    /** Product slug. */
    slug: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface V3GetProductBySlugResponse {
    /** Product. */
    product?: V3Product;
}
interface V3SearchProductsRequest {
    /** Search options. */
    search?: CommonCursorSearch;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface CommonCursorSearch extends CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: WixCommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: WixCommonAggregation[];
    /** Free text to match in searchable fields */
    search?: WixCommonSearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     */
    timeZone?: string | null;
}
/** @oneof */
interface CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging;
}
interface WixCommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: WixCommonSortOrder;
    /**
     * When `field_name` is a property of repeated field that is marked as `MATCH_ITEMS` and sort should be done by
     * a specific element from a collection, filter can/should be provided to ensure correct sort value is picked.
     *
     * If multiple filters are provided, they are combined with AND operator.
     *
     * Example:
     * Given we have document like {"id": "1", "nestedField": [{"price": 10, "region": "EU"}, {"price": 20, "region": "US"}]}
     * and `nestedField` is marked as `MATCH_ITEMS`, to ensure that sorting is done by correct region, filter should be
     * { fieldName: "nestedField.price", "select_items_by": [{"nestedField.region": "US"}] }
     */
    selectItemsBy?: Record<string, any>[] | null;
}
declare enum WixCommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface WixCommonAggregation extends WixCommonAggregationKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: WixCommonAggregationType;
    /** Field to aggregate by, use dot notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface WixCommonAggregationKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation;
}
interface AggregationRangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum AggregationValueAggregationSortType {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
declare enum AggregationValueAggregationSortDirection {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
declare enum AggregationValueAggregationMissingValues {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
interface AggregationValueAggregationIncludeMissingValuesOptions {
    /** Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum WixCommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX",
    /** Sum of values */
    SUM = "SUM",
    /** Average of values */
    AVG = "AVG"
}
interface CommonAggregationValueAggregation extends CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: AggregationValueAggregationSortType;
    /** Should sort in ascending or descending order */
    sortDirection?: AggregationValueAggregationSortDirection;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: AggregationValueAggregationMissingValues;
}
/** @oneof */
interface CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
}
declare enum AggregationNestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface CommonAggregationRangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds */
    buckets?: AggregationRangeAggregationRangeBucket[];
}
interface CommonAggregationScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: WixCommonScalarType;
}
interface CommonAggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: AggregationDateHistogramAggregationInterval;
}
declare enum AggregationDateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface AggregationNestedAggregationNestedAggregationItem extends AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationNestedAggregationNestedAggregationType;
    /** Field to aggregate by, use dont notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
}
declare enum WixCommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface CommonAggregationNestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one */
    nestedAggregations?: AggregationNestedAggregationNestedAggregationItem[];
}
interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface V3SearchProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: CommonAggregationData;
}
interface CommonCursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: CommonCursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface CommonAggregationData {
    /** key = aggregation name (as derived from search request) */
    results?: AggregationDataAggregationResults[];
}
interface ValueResultsValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeResultsRangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface AggregationResultsNestedAggregationResults extends AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** User-defined name of aggregation, matches the one provided in request */
    name?: string;
    /** Type of aggregation that matches result */
    type?: WixCommonAggregationType;
    /** Field to aggregate by, matches the one provided in request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
}
interface AggregationResultsValueResults {
    /** List of value aggregations */
    results?: ValueResultsValueAggregationResult[];
}
interface AggregationResultsRangeResults {
    /** List of ranges returned in same order as requested */
    results?: RangeResultsRangeAggregationResult[];
}
interface AggregationDataAggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: WixCommonScalarType;
    /** Value of the scalar aggregation */
    value?: number;
}
interface GroupByValueResultsNestedValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Nested aggregations */
    nestedResults?: AggregationResultsNestedAggregationResults;
}
interface NestedResultsValueResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface NestedResultsRangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface NestedResultsScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultsNestedResultValue extends NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: NestedResultsValueResult;
    /** Range aggregation result */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult;
}
/** @oneof */
interface NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: NestedResultsValueResult;
    /** Range aggregation result */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult;
}
interface NestedResultsResults {
    /** List of nested aggregations */
    results?: Record<string, NestedResultsNestedResultValue>;
}
interface DateHistogramResultsDateHistogramResult {
    /** Date in ISO 8601 format */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface AggregationResultsGroupByValueResults {
    /** List of value aggregations */
    results?: GroupByValueResultsNestedValueAggregationResult[];
}
interface AggregationResultsDateHistogramResults {
    /** List of date histogram aggregations */
    results?: DateHistogramResultsDateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface AggregationResultsNestedResults {
    /** List of nested aggregations */
    results?: NestedResultsResults[];
}
interface AggregationDataAggregationResults extends AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults;
    /** User-defined name of aggregation as derived from search request */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: WixCommonAggregationType;
    /** Field to aggregate by as derived from search request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults;
}
interface V3QueryProductsRequest {
    /** Query options. */
    query?: CommonCursorQuery;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface CommonCursorQuery extends CommonCursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: WixCommonSorting[];
}
/** @oneof */
interface CommonCursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
}
interface V3QueryProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
}
interface V3CountProductsRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
interface V3CountProductsResponse {
    /** Total number of products. */
    count?: number;
}
interface BulkUpdateProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Variant to update. */
    variant: Variant;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkUpdateProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkAdjustProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Base price adjustment. */
    basePrice?: V3AdjustValue;
    /** Sale price adjustment. */
    salePrice?: V3AdjustValue;
    /** Cost adjustment. */
    cost?: V3AdjustValue;
    /**
     * Set variant sale price from base price by applying provided discount to it.
     * For example variant base price 100$, variant sale price 95$, requested `salePriceFromBasePrice.percentage` is 10, then old sale price ignored and new sale price set to 90 (100$ - 10%).
     */
    salePriceFromBasePrice?: V3UnsignedAdjustValue;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `¥3.5555` will be saved as `¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3AdjustValue extends V3AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
/** @oneof */
interface V3AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
interface V3UnsignedAdjustValue extends V3UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
/** @oneof */
interface V3UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
declare enum BulkAdjustProductVariantsByFilterRequestRoundingStrategy {
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
interface BulkAdjustProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of the info sections to add. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkAddInfoSectionsToProductsRequest {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision[];
    /** List of IDs of info sections to add. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface V3ProductIdWithRevision {
    /** Product ID. */
    productId?: string;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     */
    revision?: string;
}
interface V3BulkAddInfoSectionsToProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of info sections to remove. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface V3BulkRemoveInfoSectionsFromProductsRequest {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision[];
    /** List of IDs of info sections to remove. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface V3BulkRemoveInfoSectionsFromProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
interface BulkAddProductsToCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories to which products will be added. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkAddProductsToCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkRemoveProductsFromCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories from which products will be removed. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkRemoveProductsFromCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface InvalidateCache$2 extends InvalidateCacheGetByOneOf$2 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$2;
    /** Invalidate by page id */
    page?: Page$2;
    /** Invalidate by URI path */
    uri?: URI$2;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$2;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf$2 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$2;
    /** Invalidate by page id */
    page?: Page$2;
    /** Invalidate by URI path */
    uri?: URI$2;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$2;
}
interface App$2 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page$2 {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI$2 {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File$2 {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface DoNotCallCreateProductRequest {
    /** Product to be created */
    product?: V3Product;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface DoNotCallCreateProductResponse {
    /** The created Product */
    product?: V3Product;
}
interface GetProductRequest {
    /** Id of the Product to retrieve */
    productId?: string;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface GetProductResponse {
    /** The retrieved Product */
    product?: V3Product;
}
interface GetProductBySlugRequest {
    /** Product slug. A permanent, friendly URL name unique per store. */
    slug?: string;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface GetProductBySlugResponse {
    /** The retrieved Product */
    product?: V3Product;
}
interface DoNotCallUpdateProductRequest {
    /** Product to be updated, may be partial */
    product?: V3Product;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface DoNotCallUpdateProductResponse {
    /** The updated Product */
    product?: V3Product;
}
interface DeleteProductRequest {
    /** Id of the Product to delete */
    productId?: string;
}
interface DeleteProductResponse {
}
interface SearchProductsRequest {
    /**
     * WQL expression. Please pay attention that unlike other arrays when you want to filter by `inventory` or `variants` instead of standard array operators you must use `$matchItems` (for usage see examples).
     * It means that product will be returned only if one or more items satisfy all filters specified in $matchItems.
     * For example, if you have 2 variants: one visible with price 10 and another one not visible with price 20, when inside $matchItems you specify `visible:true` and `price > 15` nothing will be returned because there are no variants which satisfy both conditions.
     * You still can use `$isEmpty` and `$exists` operators for fields listed above.
     * See examples to understand supported capabilities.
     */
    search?: CursorSearch;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[];
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$2;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$2[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$2;
}
interface Sorting$2 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$2;
}
declare enum SortOrder$2 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationType;
    /** Field to aggregate by, use dot notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum SortType {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
declare enum SortDirection {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
declare enum MissingValues {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
interface IncludeMissingValuesOptions {
    /** Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum ScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX",
    /** Sum of values */
    SUM = "SUM",
    /** Average of values */
    AVG = "AVG"
}
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: SortType;
    /** Should sort in ascending or descending order */
    sortDirection?: SortDirection;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: MissingValues;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface RangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: ScalarType;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: Interval;
}
declare enum Interval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: NestedAggregationType;
    /** Field to aggregate by, use dont notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface NestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one */
    nestedAggregations?: NestedAggregationItem[];
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: Mode;
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
interface CursorPaging$2 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchProductsResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata$2;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface CursorPagingMetadata$2 {
    /** Number of product variants returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$2;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$2 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface AggregationData {
    /** key = aggregation name (as derived from search request) */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** User-defined name of aggregation, matches the one provided in request */
    name?: string;
    /** Type of aggregation that matches result */
    type?: AggregationType;
    /** Field to aggregate by, matches the one provided in request */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /** List of value aggregations */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /** List of ranges returned in same order as requested */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: ScalarType;
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Nested aggregations */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /** Date in ISO 8601 format */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface GroupByValueResults {
    /** List of value aggregations */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /** List of date histogram aggregations */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /** List of nested aggregations */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
    /** User-defined name of aggregation as derived from search request */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: AggregationType;
    /** Field to aggregate by as derived from search request */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
}
interface SearchRelatedProductsRequest {
    /** Search parameters. */
    searchRelated?: SearchRelated;
}
interface SearchRelated {
    /** A list of entity IDs to search related entities for */
    relatedToIds?: string[];
    /** Search details */
    search?: SearchRelatedDetails;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: Sorting$2[];
    /** Number of related documents to return */
    limit?: number | null;
}
interface SearchRelatedDetails {
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
}
interface SearchRelatedProductsResponse {
    /** The IDs of related Products that satisfy the request. */
    productIds?: string[];
}
interface EventuallyConsistentQueryProductsRequest {
    /**
     * WQL expression. Please pay attention that unlike other arrays when you want to filter by `inventory`, `options` or `variants` instead of standard array operators you must use `$matchItems` (for usage see examples).
     * It means that product will be returned only if one or more items satisfy all filters specified in $matchItems.
     * For example, if you have 2 variants: one visible with price 10 and another one not visible with price 20, when inside $matchItems you specify `visible:true` and `price > 15` nothing will be returned because there are no variants which satisfy both conditions.
     * You still can use `$isEmpty` and `$exists` operators for fields listed above.
     * See examples to understand supported capabilities.
     */
    query?: CursorQuery$2;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[];
}
interface CursorQuery$2 extends CursorQueryPagingMethodOneOf$2 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$2;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$2[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$2 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$2;
}
interface EventuallyConsistentQueryProductsResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata$2;
}
interface QueryProductsRequest {
    /** WQL expression */
    query?: CursorQuery$2;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[];
}
interface QueryProductsResponse {
    /** The retrieved Products */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$2;
}
interface DeprecatedSearchProductsWithOffsetRequest {
    /** Filter and sort with limit/offset based paging */
    search?: PlatformOffsetSearch;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[];
}
interface PlatformOffsetSearch extends PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: CommonAggregation[];
    /** free text to match in searchable fields */
    search?: CommonSearchDetails;
}
/** @oneof */
interface PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
}
interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CommonAggregation extends CommonAggregationKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** Nested aggregation. */
    nested?: AggregationNestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: CommonAggregationType;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
interface CommonAggregationKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** Nested aggregation. */
    nested?: AggregationNestedAggregation;
}
interface RangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum ValueAggregationSortType {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
declare enum ValueAggregationSortDirection {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
declare enum ValueAggregationMissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
interface ValueAggregationIncludeMissingValuesOptions {
    /** Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum CommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX",
    /** Sum of values. */
    SUM = "SUM",
    /** Average of values. */
    AVG = "AVG"
}
interface AggregationValueAggregation extends AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: ValueAggregationSortType;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: ValueAggregationSortDirection;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: ValueAggregationMissingValues;
}
/** @oneof */
interface AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
}
declare enum NestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface AggregationRangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds. */
    buckets?: RangeAggregationRangeBucket[];
}
interface AggregationScalarAggregation {
    /** Define the operator for the scalar aggregation. */
    type?: CommonScalarType;
}
interface AggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: DateHistogramAggregationInterval;
}
declare enum DateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface NestedAggregationNestedAggregationItem extends NestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationNestedAggregationType;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
}
declare enum CommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface AggregationNestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one. */
    nestedAggregations?: NestedAggregationNestedAggregationItem[];
}
interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Field to aggregate by. */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
}
interface CommonSearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: SearchDetailsMode;
    /** Search term or expression. */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path. */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
declare enum SearchDetailsMode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface DeprecatedSearchProductsWithOffsetResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadata$2;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface PagingMetadata$2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface RetrieveVariantsRequest {
    /** Ids of the product and variants to retrieve */
    productVariantIds?: ProductVariantIds[];
    /**
     * Pointer to the next page in the list of results.
     * Pass the relevant cursor token from the `pagingMetadata` in the previous call's response.
     * Not relevant for the first request.
     */
    cursorPaging?: VariantsCursorPaging;
    /** Fields to include in the response. */
    fields?: VariantsOpsRequestedFields[];
}
interface ProductVariantIds {
    /** Product id of the requested variants. */
    productId?: string;
    /** A list of variant ids. */
    variantIds?: string[];
}
interface VariantsCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
declare enum VariantsOpsRequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    CURRENCY = "CURRENCY",
    /** You can request merchant data only if you have `WIX_STORES.PRODUCT_MERCHANT_DATA_READ` permission. */
    MERCHANT_DATA = "MERCHANT_DATA",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    THUMBNAIL = "THUMBNAIL"
}
interface RetrieveVariantsResponse {
    /** The retrieved Products and Variants */
    productVariants?: ProductVariants[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata$2;
}
interface ProductVariants {
    /** Product id of the requested variants. */
    productId?: string;
    /** A list of variants. */
    variants?: Variant[];
}
interface CountProductsRequest {
    /**
     * A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf)
     * To understand supported filters and limitations see `SearchProducts` method.
     */
    filter?: Record<string, any> | null;
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
interface CountProductsResponse {
    /** The amount of products which apply to the request */
    count?: number;
}
interface DoNotCallBulkCreateProductsRequest {
    /** List of products to be created. */
    products?: V3Product[];
    /** Whether to return the full product entity in the response. */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. Relevant only if `return_entity` true. */
    fields?: RequestedFields$1[];
}
interface DoNotCallBulkCreateProductsResponse {
    /** Products created by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface V3BulkProductResult {
    /** Bulk action metadata for product. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface DoNotCallBulkUpdateProductsRequest {
    /** List of products to be updated. */
    products?: MaskedProduct[];
    /** Whether to return the full product entity in the response. */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. Relevant only if `return_entity` true. */
    fields?: RequestedFields$1[];
}
interface MaskedProduct {
    /** product to be updated, may be partial. */
    product?: V3Product;
}
interface DoNotCallBulkUpdateProductsResponse {
    /** Products updated by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUpdateProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "name": "value1",
     * "categoryIds":{"$in":["categoryId1", "categoryId2"]}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Product with new field values. */
    product?: V3Product;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkDeleteProductsRequest {
    /** IDs of products to be deleted. */
    productIds?: string[];
}
interface BulkDeleteProductsResponse {
    /** Products deleted by bulk action. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: ItemMetadata$1;
}
interface BulkDeleteProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "basePriceRange.minValue": {"$lte": 5.99}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    productId?: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace?: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData?: Record<string, any> | null;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateExtendedFieldsResponse {
    /** The updated Product */
    product?: V3Product;
}
interface BulkAddInfoSectionsToProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "basePriceRange.minValue": {"$lte": 5.99}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Info sections to be added */
    infoSectionIds?: string[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface FulfillerDeleted {
    _id?: string;
}
interface BulkAddInfoSectionsToProductsRequest {
    /** Products to be updated with id and revision. */
    products?: ProductIdWithRevision[];
    /**
     * Products to be updated with id and revision.
     * Info section to be added
     */
    infoSectionIds?: string[];
    /** Whether to return all updated product entities in the response. Default: false */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[];
}
interface ProductIdWithRevision {
    /** ID of product. */
    productId?: string;
    /** The revision of the Product */
    revision?: string;
}
interface BulkAddInfoSectionsToProductsResponse {
    /** Products updated by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "name": "value1",
     * "categoryIds":{"$in":["categoryId1", "categoryId2"]}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Info sections to be removed */
    infoSectionIds?: string[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkRemoveInfoSectionsFromProductsRequest {
    /** Products to be updated with id and revision. */
    products?: ProductIdWithRevision[];
    /** Info section to be removed. */
    infoSectionIds?: string[];
    /** Whether to return all updated product entities in the response. Default: false */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[];
}
interface BulkRemoveInfoSectionsFromProductsResponse {
    /** Products updated by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUpdateVariantsByFilterRequest {
    /** Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains` */
    filter?: Record<string, any> | null;
    /** Variant with new field values. */
    variant?: Variant;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface BulkUpdateVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkAdjustVariantsByFilterRequest {
    /** Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$contains` */
    filter?: Record<string, any> | null;
    /** The amount or percentage to change the variants price by */
    basePrice?: AdjustValue;
    /** The amount or percentage to change the variants sale price by */
    salePrice?: AdjustValue;
    /** The amount or percentage to change the variants cost by */
    cost?: AdjustValue;
    /**
     * Set variant sale price from base price by applying provided discount to it.
     * For example variant base price 100$, variant sale price 95$, requested `sale_price_from_base_price.percentage` is 10, then old sale price ignored and new sale price set to 90 (100$ - 10%)
     */
    salePriceFromBasePrice?: UnsignedAdjustValue;
    /** Defines rounding strategy of new calculated prices. Default: CURRENCY_PRECISION. */
    rounding?: RoundingStrategy;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface AdjustValue extends AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
/** @oneof */
interface AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
interface UnsignedAdjustValue extends UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
/** @oneof */
interface UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
declare enum RoundingStrategy {
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
interface BulkAdjustVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
interface BulkInventoryItemAction {
    /** Inventory items. */
    inventoryItems?: InventoryItem[];
}
interface PricePerUnitSettingsNonNullableFields {
    quantity: number;
    measurementUnit: MeasurementUnit;
}
interface WeightRangeNonNullableFields {
    minValue: number;
    maxValue: number;
}
interface PricePerUnitRangePricePerUnitNonNullableFields {
    value: string;
}
interface PricePerUnitRangeNonNullableFields {
    minValue?: PricePerUnitRangePricePerUnitNonNullableFields;
    maxValue?: PricePerUnitRangePricePerUnitNonNullableFields;
}
interface WeightMeasurementUnitInfoNonNullableFields {
    weightMeasurementUnit: WeightUnit;
}
interface PhysicalPropertiesNonNullableFields {
    pricePerUnit?: PricePerUnitSettingsNonNullableFields;
    shippingWeightRange?: WeightRangeNonNullableFields;
    pricePerUnitRange?: PricePerUnitRangeNonNullableFields;
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfoNonNullableFields;
}
interface PluginContainerDataWidthNonNullableFields {
    size: WidthType;
}
interface PluginContainerDataNonNullableFields {
    width?: PluginContainerDataWidthNonNullableFields;
    alignment: PluginContainerDataAlignment;
}
interface LinkNonNullableFields {
    url: string;
    anchor: string;
    target: Target;
}
interface ButtonDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    type: Type;
    link?: LinkNonNullableFields;
}
interface TextStyleNonNullableFields {
    textAlignment: TextAlignment;
}
interface CodeBlockDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface DividerDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    lineStyle: LineStyle;
    width: Width;
    alignment: Alignment;
}
interface PDFSettingsNonNullableFields {
    viewMode: ViewMode;
}
interface FileDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    pdfSettings?: PDFSettingsNonNullableFields;
}
interface ImageNonNullableFields {
    link?: LinkNonNullableFields;
}
interface ItemNonNullableFields {
    image?: ImageNonNullableFields;
}
interface LayoutNonNullableFields {
    type: LayoutType;
    orientation: Orientation;
}
interface ItemStyleNonNullableFields {
    crop: Crop;
}
interface ThumbnailsNonNullableFields {
    placement: ThumbnailsAlignment;
}
interface GalleryOptionsNonNullableFields {
    layout?: LayoutNonNullableFields;
    item?: ItemStyleNonNullableFields;
    thumbnails?: ThumbnailsNonNullableFields;
}
interface GalleryDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    items: ItemNonNullableFields[];
    options?: GalleryOptionsNonNullableFields;
}
interface GIFDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    height: number;
    width: number;
}
interface HeadingDataNonNullableFields {
    level: number;
    textStyle?: TextStyleNonNullableFields;
}
interface HTMLDataNonNullableFields {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields;
    source: Source;
}
interface ImageDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface LinkPreviewDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface MapSettingsNonNullableFields {
    mapType: MapType;
}
interface MapDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    mapSettings?: MapSettingsNonNullableFields;
}
interface ParagraphDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface PermissionsNonNullableFields {
    view: ViewRole;
    vote: VoteRole;
}
interface PollSettingsNonNullableFields {
    permissions?: PermissionsNonNullableFields;
}
interface PollNonNullableFields {
    settings?: PollSettingsNonNullableFields;
}
interface PollLayoutNonNullableFields {
    type: PollLayoutType;
    direction: PollLayoutDirection;
}
interface PollDataLayoutNonNullableFields {
    poll?: PollLayoutNonNullableFields;
}
interface BackgroundNonNullableFields {
    type: BackgroundType;
}
interface PollDesignNonNullableFields {
    background?: BackgroundNonNullableFields;
}
interface DesignNonNullableFields {
    poll?: PollDesignNonNullableFields;
}
interface PollDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    poll?: PollNonNullableFields;
    layout?: PollDataLayoutNonNullableFields;
    design?: DesignNonNullableFields;
}
interface AnchorDataNonNullableFields {
    anchor: string;
}
interface LinkDataNonNullableFields {
    link?: LinkNonNullableFields;
}
interface MentionDataNonNullableFields {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields {
    unit: FontType;
}
interface DecorationNonNullableFields {
    anchorData?: AnchorDataNonNullableFields;
    linkData?: LinkDataNonNullableFields;
    mentionData?: MentionDataNonNullableFields;
    fontSizeData?: FontSizeDataNonNullableFields;
    type: DecorationType;
}
interface TextDataNonNullableFields {
    text: string;
    decorations: DecorationNonNullableFields[];
}
interface AppEmbedDataNonNullableFields {
    type: AppType;
}
interface VideoDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface EmbedDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface CollapsibleListDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    initialExpandedItems: InitialExpandedItems;
    direction: Direction;
}
interface DimensionsNonNullableFields {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    dimensions?: DimensionsNonNullableFields;
}
interface CellStyleNonNullableFields {
    verticalAlignment: VerticalAlignment;
}
interface TableCellDataNonNullableFields {
    cellStyle?: CellStyleNonNullableFields;
}
interface AudioDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface OrderedListDataNonNullableFields {
    indentation: number;
}
interface BulletedListDataNonNullableFields {
    indentation: number;
}
interface BlockquoteDataNonNullableFields {
    indentation: number;
}
interface CaptionDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface NodeNonNullableFields {
    buttonData?: ButtonDataNonNullableFields;
    codeBlockData?: CodeBlockDataNonNullableFields;
    dividerData?: DividerDataNonNullableFields;
    fileData?: FileDataNonNullableFields;
    galleryData?: GalleryDataNonNullableFields;
    gifData?: GIFDataNonNullableFields;
    headingData?: HeadingDataNonNullableFields;
    htmlData?: HTMLDataNonNullableFields;
    imageData?: ImageDataNonNullableFields;
    linkPreviewData?: LinkPreviewDataNonNullableFields;
    mapData?: MapDataNonNullableFields;
    paragraphData?: ParagraphDataNonNullableFields;
    pollData?: PollDataNonNullableFields;
    textData?: TextDataNonNullableFields;
    appEmbedData?: AppEmbedDataNonNullableFields;
    videoData?: VideoDataNonNullableFields;
    embedData?: EmbedDataNonNullableFields;
    collapsibleListData?: CollapsibleListDataNonNullableFields;
    tableData?: TableDataNonNullableFields;
    tableCellData?: TableCellDataNonNullableFields;
    audioData?: AudioDataNonNullableFields;
    orderedListData?: OrderedListDataNonNullableFields;
    bulletedListData?: BulletedListDataNonNullableFields;
    blockquoteData?: BlockquoteDataNonNullableFields;
    captionData?: CaptionDataNonNullableFields;
    type: NodeType;
    _id: string;
    nodes: NodeNonNullableFields[];
}
interface MetadataNonNullableFields {
    version: number;
}
interface TextNodeStyleNonNullableFields {
    decorations: DecorationNonNullableFields[];
}
interface DocumentStyleNonNullableFields {
    headerOne?: TextNodeStyleNonNullableFields;
    headerTwo?: TextNodeStyleNonNullableFields;
    headerThree?: TextNodeStyleNonNullableFields;
    headerFour?: TextNodeStyleNonNullableFields;
    headerFive?: TextNodeStyleNonNullableFields;
    headerSix?: TextNodeStyleNonNullableFields;
    paragraph?: TextNodeStyleNonNullableFields;
    blockquote?: TextNodeStyleNonNullableFields;
    codeBlock?: TextNodeStyleNonNullableFields;
}
interface RichContentNonNullableFields {
    nodes: NodeNonNullableFields[];
    metadata?: MetadataNonNullableFields;
    documentStyle?: DocumentStyleNonNullableFields;
}
interface ThumbnailNonNullableFields {
    url: string;
    height: number;
    width: number;
}
interface ProductMediaNonNullableFields {
    _id: string;
    url: string;
    image: string;
    video: string;
    mediaType: MediaType;
    thumbnail?: ThumbnailNonNullableFields;
    uploadId: string;
}
interface MediaItemsInfoNonNullableFields {
    items: ProductMediaNonNullableFields[];
}
interface MediaNonNullableFields {
    main?: ProductMediaNonNullableFields;
    itemsInfo?: MediaItemsInfoNonNullableFields;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface MultipleColorsNonNullableFields {
    colorCodes: string[];
}
interface ConnectedOptionChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image: string;
    linkedMedia: ProductMediaNonNullableFields[];
    choiceType: ChoiceType;
    key: string;
    inStock: boolean;
    visible: boolean;
}
interface ChoicesSettingsNonNullableFields {
    choices: ConnectedOptionChoiceNonNullableFields[];
}
interface ConnectedOptionNonNullableFields {
    choicesSettings?: ChoicesSettingsNonNullableFields;
    optionRenderType: ProductOptionRenderType;
    key: string;
}
interface FreeTextSettingsNonNullableFields {
    minCharCount: number;
    maxCharCount: number;
    title: string;
    key: string;
}
interface ConnectedModifierChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image: string;
    linkedMedia: ProductMediaNonNullableFields[];
    choiceType: ChoiceType;
    key: string;
}
interface ModifierChoicesSettingsNonNullableFields {
    choices: ConnectedModifierChoiceNonNullableFields[];
}
interface ConnectedModifierNonNullableFields {
    freeTextSettings?: FreeTextSettingsNonNullableFields;
    choicesSettings?: ModifierChoicesSettingsNonNullableFields;
    modifierRenderType: ModifierRenderType;
    mandatory: boolean;
    key: string;
}
interface InfoSectionNonNullableFields {
    description?: RichContentNonNullableFields;
}
interface ProductCategoryNonNullableFields {
    _id: string;
}
interface ProductCategoriesInfoNonNullableFields {
    categories: ProductCategoryNonNullableFields[];
}
interface ProductCategoryIdsInfoNonNullableFields {
    categoryIds: string[];
}
interface FixedMonetaryAmountNonNullableFields {
    amount: string;
}
interface PriceRangeNonNullableFields {
    minValue?: FixedMonetaryAmountNonNullableFields;
    maxValue?: FixedMonetaryAmountNonNullableFields;
}
interface InventoryNonNullableFields {
    availabilityStatus: InventoryAvailabilityStatus;
    preorderStatus: PreorderStatus;
    preorderAvailability: ProductPreorderAvailability;
}
interface BreadCrumbNonNullableFields {
    categoryId: string;
    categoryName: string;
    categorySlug: string;
}
interface BreadcrumbsInfoNonNullableFields {
    breadcrumbs: BreadCrumbNonNullableFields[];
}
interface PricePerUnitNonNullableFields {
    settings?: PricePerUnitSettingsNonNullableFields;
    value: string;
}
interface VariantPhysicalPropertiesNonNullableFields {
    pricePerUnit?: PricePerUnitNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface VariantDigitalPropertiesNonNullableFields {
    digitalFile?: SecuredMediaNonNullableFields;
}
interface OptionChoiceIdsNonNullableFields {
    optionId: string;
    choiceId: string;
}
interface OptionChoiceNamesNonNullableFields {
    optionName: string;
    choiceName: string;
    renderType: ProductOptionRenderType;
}
interface OptionChoiceNonNullableFields {
    optionChoiceIds?: OptionChoiceIdsNonNullableFields;
    optionChoiceNames?: OptionChoiceNamesNonNullableFields;
}
interface PriceInfoNonNullableFields {
    basePrice?: FixedMonetaryAmountNonNullableFields;
    salePrice?: FixedMonetaryAmountNonNullableFields;
}
interface RevenueDetailsNonNullableFields {
    cost?: FixedMonetaryAmountNonNullableFields;
    profit?: FixedMonetaryAmountNonNullableFields;
    profitMargin: number;
}
interface SubscriptionPricePerUnitNonNullableFields {
    value: string;
}
interface SubscriptionPriceNonNullableFields {
    subscriptionId: string;
    price?: FixedMonetaryAmountNonNullableFields;
    pricePerUnit?: SubscriptionPricePerUnitNonNullableFields;
}
interface SubscriptionPricesInfoNonNullableFields {
    subscriptionPrices: SubscriptionPriceNonNullableFields[];
}
interface InventoryStatusNonNullableFields {
    inStock: boolean;
    preorderEnabled: boolean;
}
interface VariantNonNullableFields {
    physicalProperties?: VariantPhysicalPropertiesNonNullableFields;
    digitalProperties?: VariantDigitalPropertiesNonNullableFields;
    choices: OptionChoiceNonNullableFields[];
    price?: PriceInfoNonNullableFields;
    revenueDetails?: RevenueDetailsNonNullableFields;
    media?: ProductMediaNonNullableFields;
    subscriptionPricesInfo?: SubscriptionPricesInfoNonNullableFields;
    inventoryStatus?: InventoryStatusNonNullableFields;
}
interface VariantsInfoNonNullableFields {
    variants: VariantNonNullableFields[];
}
interface SubscriptionDiscountNonNullableFields {
    amountOff: string;
    percentOff: number;
    type: DiscountType$1;
}
interface SubscriptionNonNullableFields {
    autoRenewal: boolean;
    billingCycles: number;
    title: string;
    frequency: SubscriptionFrequency$1;
    discount?: SubscriptionDiscountNonNullableFields;
}
interface SubscriptionDetailsNonNullableFields {
    subscriptions: SubscriptionNonNullableFields[];
}
interface VariantSummaryNonNullableFields {
    variantCount: number;
}
interface MinVariantPriceInfoNonNullableFields {
    basePrice?: FixedMonetaryAmountNonNullableFields;
    salePrice?: FixedMonetaryAmountNonNullableFields;
    minSubscriptionPrice?: FixedMonetaryAmountNonNullableFields;
    pricePerUnitData?: PricePerUnitNonNullableFields;
    revenueDetails?: RevenueDetailsNonNullableFields;
}
interface V3ProductNonNullableFields {
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    numericId: string;
    url: string;
    description?: RichContentNonNullableFields;
    media?: MediaNonNullableFields;
    seoData?: SeoSchemaNonNullableFields;
    options: ConnectedOptionNonNullableFields[];
    modifiers: ConnectedModifierNonNullableFields[];
    infoSections: InfoSectionNonNullableFields[];
    directCategoriesInfo?: ProductCategoriesInfoNonNullableFields;
    allCategoriesInfo?: ProductCategoriesInfoNonNullableFields;
    directCategoryIdsInfo?: ProductCategoryIdsInfoNonNullableFields;
    basePriceRange?: PriceRangeNonNullableFields;
    salePriceRange?: PriceRangeNonNullableFields;
    costRange?: PriceRangeNonNullableFields;
    inventory?: InventoryNonNullableFields;
    productType: ProductType;
    breadcrumbsInfo?: BreadcrumbsInfoNonNullableFields;
    variantsInfo?: VariantsInfoNonNullableFields;
    subscriptionDetails?: SubscriptionDetailsNonNullableFields;
    flattenOptions: string[];
    flattenModifiers: string[];
    variantSummary?: VariantSummaryNonNullableFields;
    minVariantPriceInfo?: MinVariantPriceInfoNonNullableFields;
}
interface CreateProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface CommonItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface ProductNonNullableFields {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus;
    product?: ProductNonNullableFields;
}
interface BulkInventoryItemResultNonNullableFields {
    itemMetadata?: CommonItemMetadataNonNullableFields;
    item?: InventoryItemNonNullableFields;
}
interface CommonBulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkInventoryItemResultsNonNullableFields {
    results: BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
    error?: ApplicationErrorNonNullableFields$1;
}
interface CreateProductWithInventoryResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface UpdateProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface UpdateProductWithInventoryResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface WixCommonItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface CatalogV3BulkProductResultNonNullableFields {
    itemMetadata?: WixCommonItemMetadataNonNullableFields;
    item?: V3ProductNonNullableFields;
}
interface BulkCreateProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkProductResultsNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkCreateProductsWithInventoryResponseNonNullableFields {
    productResults?: BulkProductResultsNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface BulkUpdateProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkUpdateProductsWithInventoryResponseNonNullableFields {
    productResults?: BulkProductResultsNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface V3BulkUpdateProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3UpdateExtendedFieldsResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface BulkDeleteProductsResponseBulkProductResultNonNullableFields {
    itemMetadata?: WixCommonItemMetadataNonNullableFields;
}
interface V3BulkDeleteProductsResponseNonNullableFields {
    results: BulkDeleteProductsResponseBulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface V3BulkDeleteProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3GetProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface V3GetProductBySlugResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface ValueResultsValueAggregationResultNonNullableFields {
    value: string;
    count: number;
}
interface AggregationResultsValueResultsNonNullableFields {
    results: ValueResultsValueAggregationResultNonNullableFields[];
}
interface RangeResultsRangeAggregationResultNonNullableFields {
    count: number;
}
interface AggregationResultsRangeResultsNonNullableFields {
    results: RangeResultsRangeAggregationResultNonNullableFields[];
}
interface AggregationDataAggregationResultsScalarResultNonNullableFields {
    type: WixCommonScalarType;
    value: number;
}
interface AggregationResultsNestedAggregationResultsNonNullableFields {
    values?: AggregationResultsValueResultsNonNullableFields;
    ranges?: AggregationResultsRangeResultsNonNullableFields;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields;
    name: string;
    type: WixCommonAggregationType;
    fieldPath: string;
}
interface GroupByValueResultsNestedValueAggregationResultNonNullableFields {
    value: string;
    nestedResults?: AggregationResultsNestedAggregationResultsNonNullableFields;
}
interface AggregationResultsGroupByValueResultsNonNullableFields {
    results: GroupByValueResultsNestedValueAggregationResultNonNullableFields[];
}
interface DateHistogramResultsDateHistogramResultNonNullableFields {
    value: string;
    count: number;
}
interface AggregationResultsDateHistogramResultsNonNullableFields {
    results: DateHistogramResultsDateHistogramResultNonNullableFields[];
}
interface AggregationDataAggregationResultsNonNullableFields {
    values?: AggregationResultsValueResultsNonNullableFields;
    ranges?: AggregationResultsRangeResultsNonNullableFields;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields;
    groupedByValue?: AggregationResultsGroupByValueResultsNonNullableFields;
    dateHistogram?: AggregationResultsDateHistogramResultsNonNullableFields;
    name: string;
    type: WixCommonAggregationType;
    fieldPath: string;
}
interface CommonAggregationDataNonNullableFields {
    results: AggregationDataAggregationResultsNonNullableFields[];
}
interface V3SearchProductsResponseNonNullableFields {
    products: V3ProductNonNullableFields[];
    aggregationData?: CommonAggregationDataNonNullableFields;
}
interface V3QueryProductsResponseNonNullableFields {
    products: V3ProductNonNullableFields[];
}
interface V3CountProductsResponseNonNullableFields {
    count: number;
}
interface BulkUpdateProductVariantsByFilterResponseNonNullableFields {
    jobId: string;
}
interface BulkAdjustProductVariantsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3BulkAddInfoSectionsToProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields {
    jobId: string;
}
interface V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkAddProductsToCategoriesByFilterResponseNonNullableFields {
    jobId: string;
}
interface BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields {
    jobId: string;
}
interface BaseEventMetadata$2 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$4;
}
interface EventMetadata$1 extends BaseEventMetadata$2 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface ProductCreatedEnvelope {
    entity: V3Product;
    metadata: EventMetadata$1;
}
interface ProductUpdatedEnvelope {
    entity: V3Product;
    metadata: EventMetadata$1;
}
interface ProductDeletedEnvelope {
    entity: V3Product;
    metadata: EventMetadata$1;
}
interface CreateProductOptions {
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface CreateProductWithInventoryOptions {
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateProduct {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Product name. Translatable. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: string;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon$1;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product base price range - minimum and maximum prices of all product variants.
     * @readonly
     */
    basePriceRange?: PriceRange;
    /**
     * Product sale price range - minimum and maximum sale prices of all product variants.
     * @readonly
     */
    salePriceRange?: PriceRange;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /** Product variants. */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
interface UpdateProductOptions {
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface UpdateProductWithInventoryProduct {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /** Product name. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     */
    options?: ConnectedOption[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon$1;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the Wix Dev Center before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
interface UpdateProductWithInventoryOptions {
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface BulkCreateProductsOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkCreateProductsWithInventoryOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkUpdateProductsOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkUpdateProductsWithInventoryOptions {
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkUpdateProductsByFilterOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface UpdateExtendedFieldsOptions {
    /** Data to update. */
    namespaceData: Record<string, any> | null;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface BulkDeleteProductsByFilterOptions {
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface GetProductOptions {
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface GetProductBySlugOptions {
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
interface SearchProductsOptions {
    /** Search options. */
    search?: CommonCursorSearch;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface QueryProductsOptions {
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields$1[] | undefined;
}
interface QueryCursorResult$2 {
    cursors: CommonCursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface ProductsQueryResult extends QueryCursorResult$2 {
    items: V3Product[];
    query: ProductsQueryBuilder;
    next: () => Promise<ProductsQueryResult>;
    prev: () => Promise<ProductsQueryResult>;
}
interface ProductsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'slug' | 'options.id' | 'handle', value: string) => ProductsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any[]) => ProductsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: any) => ProductsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug' | 'visible' | 'options.id' | 'handle', value: boolean) => ProductsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'visible'>) => ProductsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'visible'>) => ProductsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => ProductsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => ProductsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<ProductsQueryResult>;
}
interface CountProductsOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
interface BulkUpdateProductVariantsByFilterOptions {
    /** Variant to update. */
    variant: Variant;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkAdjustProductVariantsByFilterOptions {
    /** Base price adjustment. */
    basePrice?: V3AdjustValue;
    /** Sale price adjustment. */
    salePrice?: V3AdjustValue;
    /** Cost adjustment. */
    cost?: V3AdjustValue;
    /**
     * Set variant sale price from base price by applying provided discount to it.
     * For example variant base price 100$, variant sale price 95$, requested `salePriceFromBasePrice.percentage` is 10, then old sale price ignored and new sale price set to 90 (100$ - 10%).
     */
    salePriceFromBasePrice?: V3UnsignedAdjustValue;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `¥3.5555` will be saved as `¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkAddInfoSectionsToProductsByFilterOptions {
    /** IDs of the info sections to add. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkAddInfoSectionsToProductsOptions {
    /** List of IDs of info sections to add. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkRemoveInfoSectionsFromProductsByFilterOptions {
    /** IDs of info sections to remove. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkRemoveInfoSectionsFromProductsOptions {
    /** List of IDs of info sections to remove. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields$1[];
}
interface BulkAddProductsToCategoriesByFilterOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories to which products will be added. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
interface BulkRemoveProductsFromCategoriesByFilterOptions {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories from which products will be removed. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}

declare function createProduct$1(httpClient: HttpClient): CreateProductSignature;
interface CreateProductSignature {
    /**
     * Creates a new product.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     * @returns Created product.
     */
    (product: V3Product, options?: CreateProductOptions | undefined): Promise<V3Product & V3ProductNonNullableFields>;
}
declare function createProductWithInventory$1(httpClient: HttpClient): CreateProductWithInventorySignature;
interface CreateProductWithInventorySignature {
    /**
     * Creates a new product, and can create the product's inventory in the variants' default locations.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    (product: ProductWithInventory, options?: CreateProductWithInventoryOptions | undefined): Promise<CreateProductWithInventoryResponse & CreateProductWithInventoryResponseNonNullableFields>;
}
declare function updateProduct$1(httpClient: HttpClient): UpdateProductSignature;
interface UpdateProductSignature {
    /**
     * Updates a product.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + If `variantsInfo.variants` are passed, they will replace all existing variants.
     * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     * @returns Updated product.
     */
    (_id: string | null, product: UpdateProduct, options?: UpdateProductOptions | undefined): Promise<V3Product & V3ProductNonNullableFields>;
}
declare function updateProductWithInventory$1(httpClient: HttpClient): UpdateProductWithInventorySignature;
interface UpdateProductWithInventorySignature {
    /**
     * Updates a new product, and can update the product's inventory.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + Passing `variantsInfo.variants` will replace all existing variants.
     * > + To update existing `variantsInfo.variants`, pass `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     */
    (_id: string | null, product: UpdateProductWithInventoryProduct, options?: UpdateProductWithInventoryOptions | undefined): Promise<UpdateProductWithInventoryResponse & UpdateProductWithInventoryResponseNonNullableFields>;
}
declare function bulkCreateProducts$1(httpClient: HttpClient): BulkCreateProductsSignature;
interface BulkCreateProductsSignature {
    /**
     * Creates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create.
     */
    (products: V3Product[], options?: BulkCreateProductsOptions | undefined): Promise<BulkCreateProductsResponse & BulkCreateProductsResponseNonNullableFields>;
}
declare function bulkCreateProductsWithInventory$1(httpClient: HttpClient): BulkCreateProductsWithInventorySignature;
interface BulkCreateProductsWithInventorySignature {
    /**
     * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create with inventory.
     */
    (products: ProductWithInventory[], options?: BulkCreateProductsWithInventoryOptions | undefined): Promise<BulkCreateProductsWithInventoryResponse & BulkCreateProductsWithInventoryResponseNonNullableFields>;
}
declare function bulkUpdateProducts$1(httpClient: HttpClient): BulkUpdateProductsSignature;
interface BulkUpdateProductsSignature {
    /**
     * Updates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: V3MaskedProduct[], options?: BulkUpdateProductsOptions | undefined): Promise<BulkUpdateProductsResponse & BulkUpdateProductsResponseNonNullableFields>;
}
declare function bulkUpdateProductsWithInventory$1(httpClient: HttpClient): BulkUpdateProductsWithInventorySignature;
interface BulkUpdateProductsWithInventorySignature {
    /**
     * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: MaskedProductWithInventory[], options?: BulkUpdateProductsWithInventoryOptions | undefined): Promise<BulkUpdateProductsWithInventoryResponse & BulkUpdateProductsWithInventoryResponseNonNullableFields>;
}
declare function bulkUpdateProductsByFilter$1(httpClient: HttpClient): BulkUpdateProductsByFilterSignature;
interface BulkUpdateProductsByFilterSignature {
    /**
     * Updates multiple products, given the provided filter.
     *
     * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
     *
     * > **Note:**
     * > The following fields cannot be updated with this endpoint:
     * > + `slug`
     * > + `options`
     * > + `modifiers`
     * > + `variantsInfo`
     * >
     * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
     */
    (options?: BulkUpdateProductsByFilterOptions | undefined): Promise<V3BulkUpdateProductsByFilterResponse & V3BulkUpdateProductsByFilterResponseNonNullableFields>;
}
declare function updateExtendedFields$1(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates a product's extended fields.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must first be configured in the app dashboard.
     * @param - Product ID.
     * @param - App namespace.
     */
    (productId: string, namespace: string, options?: UpdateExtendedFieldsOptions | undefined): Promise<V3UpdateExtendedFieldsResponse & V3UpdateExtendedFieldsResponseNonNullableFields>;
}
declare function deleteProduct$1(httpClient: HttpClient): DeleteProductSignature;
interface DeleteProductSignature {
    /**
     * Deletes a product and all its variants.
     * @param - Product ID.
     */
    (productId: string): Promise<void>;
}
declare function bulkDeleteProducts$1(httpClient: HttpClient): BulkDeleteProductsSignature;
interface BulkDeleteProductsSignature {
    /**
     * Deletes multiple products.
     * @param - IDs of products to delete.
     */
    (productIds: string[]): Promise<V3BulkDeleteProductsResponse & V3BulkDeleteProductsResponseNonNullableFields>;
}
declare function bulkDeleteProductsByFilter$1(httpClient: HttpClient): BulkDeleteProductsByFilterSignature;
interface BulkDeleteProductsByFilterSignature {
    /**
     * Delete multiple products, given the provided filter.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkDeleteProductsByFilterOptions | undefined): Promise<V3BulkDeleteProductsByFilterResponse & V3BulkDeleteProductsByFilterResponseNonNullableFields>;
}
declare function getProduct$1(httpClient: HttpClient): GetProductSignature;
interface GetProductSignature {
    /**
     * Retrieves a product.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product ID.
     * @returns Product.
     */
    (productId: string, options?: GetProductOptions | undefined): Promise<V3Product & V3ProductNonNullableFields>;
}
declare function getProductBySlug$1(httpClient: HttpClient): GetProductBySlugSignature;
interface GetProductBySlugSignature {
    /**
     * Retrieves a product by slug.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product slug.
     */
    (slug: string, options?: GetProductBySlugOptions | undefined): Promise<V3GetProductBySlugResponse & V3GetProductBySlugResponseNonNullableFields>;
}
declare function searchProducts$1(httpClient: HttpClient): SearchProductsSignature;
interface SearchProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, search expression, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Note:** To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    (options?: SearchProductsOptions | undefined): Promise<V3SearchProductsResponse & V3SearchProductsResponseNonNullableFields>;
}
declare function queryProducts$1(httpClient: HttpClient): QueryProductsSignature;
interface QueryProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Note:** To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    (options?: QueryProductsOptions | undefined): ProductsQueryBuilder;
}
declare function countProducts$1(httpClient: HttpClient): CountProductsSignature;
interface CountProductsSignature {
    /**
     * Counts the number of products that match the provided filtering.
     */
    (options?: CountProductsOptions | undefined): Promise<V3CountProductsResponse & V3CountProductsResponseNonNullableFields>;
}
declare function bulkUpdateProductVariantsByFilter$1(httpClient: HttpClient): BulkUpdateProductVariantsByFilterSignature;
interface BulkUpdateProductVariantsByFilterSignature {
    /**
     * Updates a variant of multiple products, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be updated:
     * + `visible`
     * + `price`
     * + `revenueDetails.cost`
     * + `physicalOptions`
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkUpdateProductVariantsByFilterOptions | undefined): Promise<BulkUpdateProductVariantsByFilterResponse & BulkUpdateProductVariantsByFilterResponseNonNullableFields>;
}
declare function bulkAdjustProductVariantsByFilter$1(httpClient: HttpClient): BulkAdjustProductVariantsByFilterSignature;
interface BulkAdjustProductVariantsByFilterSignature {
    /**
     * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be increased/decreased by amount or percentage:
     * + `basePrice`
     * + `salePrice`
     * + `cost`
     * + `salePriceFromBasePrice`
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkAdjustProductVariantsByFilterOptions | undefined): Promise<BulkAdjustProductVariantsByFilterResponse & BulkAdjustProductVariantsByFilterResponseNonNullableFields>;
}
declare function bulkAddInfoSectionsToProductsByFilter$1(httpClient: HttpClient): BulkAddInfoSectionsToProductsByFilterSignature;
interface BulkAddInfoSectionsToProductsByFilterSignature {
    /**
     * Adds info sections to multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkAddInfoSectionsToProductsByFilterOptions | undefined): Promise<V3BulkAddInfoSectionsToProductsByFilterResponse & V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields>;
}
declare function bulkAddInfoSectionsToProducts$1(httpClient: HttpClient): BulkAddInfoSectionsToProductsSignature;
interface BulkAddInfoSectionsToProductsSignature {
    /**
     * Adds info sections to multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: BulkAddInfoSectionsToProductsOptions | undefined): Promise<V3BulkAddInfoSectionsToProductsResponse & V3BulkAddInfoSectionsToProductsResponseNonNullableFields>;
}
declare function bulkRemoveInfoSectionsFromProductsByFilter$1(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsByFilterSignature;
interface BulkRemoveInfoSectionsFromProductsByFilterSignature {
    /**
     * Removes info sections from multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkRemoveInfoSectionsFromProductsByFilterOptions | undefined): Promise<V3BulkRemoveInfoSectionsFromProductsByFilterResponse & V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields>;
}
declare function bulkRemoveInfoSectionsFromProducts$1(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsSignature;
interface BulkRemoveInfoSectionsFromProductsSignature {
    /**
     * Removes info sections from multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: BulkRemoveInfoSectionsFromProductsOptions | undefined): Promise<V3BulkRemoveInfoSectionsFromProductsResponse & V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields>;
}
declare function bulkAddProductsToCategoriesByFilter$1(httpClient: HttpClient): BulkAddProductsToCategoriesByFilterSignature;
interface BulkAddProductsToCategoriesByFilterSignature {
    /**
     * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: BulkAddProductsToCategoriesByFilterOptions | undefined): Promise<BulkAddProductsToCategoriesByFilterResponse & BulkAddProductsToCategoriesByFilterResponseNonNullableFields>;
}
declare function bulkRemoveProductsFromCategoriesByFilter$1(httpClient: HttpClient): BulkRemoveProductsFromCategoriesByFilterSignature;
interface BulkRemoveProductsFromCategoriesByFilterSignature {
    /**
     * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: BulkRemoveProductsFromCategoriesByFilterOptions | undefined): Promise<BulkRemoveProductsFromCategoriesByFilterResponse & BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields>;
}
declare const onProductCreated$1: EventDefinition<ProductCreatedEnvelope, "wix.stores.catalog.v3.product_created">;
declare const onProductUpdated$1: EventDefinition<ProductUpdatedEnvelope, "wix.stores.catalog.v3.product_updated">;
declare const onProductDeleted$1: EventDefinition<ProductDeletedEnvelope, "wix.stores.catalog.v3.product_deleted">;

declare function createEventModule$2<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createProduct: MaybeContext<BuildRESTFunction<typeof createProduct$1> & typeof createProduct$1>;
declare const createProductWithInventory: MaybeContext<BuildRESTFunction<typeof createProductWithInventory$1> & typeof createProductWithInventory$1>;
declare const updateProduct: MaybeContext<BuildRESTFunction<typeof updateProduct$1> & typeof updateProduct$1>;
declare const updateProductWithInventory: MaybeContext<BuildRESTFunction<typeof updateProductWithInventory$1> & typeof updateProductWithInventory$1>;
declare const bulkCreateProducts: MaybeContext<BuildRESTFunction<typeof bulkCreateProducts$1> & typeof bulkCreateProducts$1>;
declare const bulkCreateProductsWithInventory: MaybeContext<BuildRESTFunction<typeof bulkCreateProductsWithInventory$1> & typeof bulkCreateProductsWithInventory$1>;
declare const bulkUpdateProducts: MaybeContext<BuildRESTFunction<typeof bulkUpdateProducts$1> & typeof bulkUpdateProducts$1>;
declare const bulkUpdateProductsWithInventory: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsWithInventory$1> & typeof bulkUpdateProductsWithInventory$1>;
declare const bulkUpdateProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsByFilter$1> & typeof bulkUpdateProductsByFilter$1>;
declare const updateExtendedFields: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$1> & typeof updateExtendedFields$1>;
declare const deleteProduct: MaybeContext<BuildRESTFunction<typeof deleteProduct$1> & typeof deleteProduct$1>;
declare const bulkDeleteProducts: MaybeContext<BuildRESTFunction<typeof bulkDeleteProducts$1> & typeof bulkDeleteProducts$1>;
declare const bulkDeleteProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkDeleteProductsByFilter$1> & typeof bulkDeleteProductsByFilter$1>;
declare const getProduct: MaybeContext<BuildRESTFunction<typeof getProduct$1> & typeof getProduct$1>;
declare const getProductBySlug: MaybeContext<BuildRESTFunction<typeof getProductBySlug$1> & typeof getProductBySlug$1>;
declare const searchProducts: MaybeContext<BuildRESTFunction<typeof searchProducts$1> & typeof searchProducts$1>;
declare const queryProducts: MaybeContext<BuildRESTFunction<typeof queryProducts$1> & typeof queryProducts$1>;
declare const countProducts: MaybeContext<BuildRESTFunction<typeof countProducts$1> & typeof countProducts$1>;
declare const bulkUpdateProductVariantsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductVariantsByFilter$1> & typeof bulkUpdateProductVariantsByFilter$1>;
declare const bulkAdjustProductVariantsByFilter: MaybeContext<BuildRESTFunction<typeof bulkAdjustProductVariantsByFilter$1> & typeof bulkAdjustProductVariantsByFilter$1>;
declare const bulkAddInfoSectionsToProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkAddInfoSectionsToProductsByFilter$1> & typeof bulkAddInfoSectionsToProductsByFilter$1>;
declare const bulkAddInfoSectionsToProducts: MaybeContext<BuildRESTFunction<typeof bulkAddInfoSectionsToProducts$1> & typeof bulkAddInfoSectionsToProducts$1>;
declare const bulkRemoveInfoSectionsFromProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkRemoveInfoSectionsFromProductsByFilter$1> & typeof bulkRemoveInfoSectionsFromProductsByFilter$1>;
declare const bulkRemoveInfoSectionsFromProducts: MaybeContext<BuildRESTFunction<typeof bulkRemoveInfoSectionsFromProducts$1> & typeof bulkRemoveInfoSectionsFromProducts$1>;
declare const bulkAddProductsToCategoriesByFilter: MaybeContext<BuildRESTFunction<typeof bulkAddProductsToCategoriesByFilter$1> & typeof bulkAddProductsToCategoriesByFilter$1>;
declare const bulkRemoveProductsFromCategoriesByFilter: MaybeContext<BuildRESTFunction<typeof bulkRemoveProductsFromCategoriesByFilter$1> & typeof bulkRemoveProductsFromCategoriesByFilter$1>;

type _publicOnProductCreatedType = typeof onProductCreated$1;
/** */
declare const onProductCreated: ReturnType<typeof createEventModule$2<_publicOnProductCreatedType>>;

type _publicOnProductUpdatedType = typeof onProductUpdated$1;
/** */
declare const onProductUpdated: ReturnType<typeof createEventModule$2<_publicOnProductUpdatedType>>;

type _publicOnProductDeletedType = typeof onProductDeleted$1;
/** */
declare const onProductDeleted: ReturnType<typeof createEventModule$2<_publicOnProductDeletedType>>;

type index_d$5_AdjustValue = AdjustValue;
type index_d$5_AdjustValueAdjustValueOneOf = AdjustValueAdjustValueOneOf;
type index_d$5_Aggregation = Aggregation;
type index_d$5_AggregationData = AggregationData;
type index_d$5_AggregationDataAggregationResults = AggregationDataAggregationResults;
type index_d$5_AggregationDataAggregationResultsResultOneOf = AggregationDataAggregationResultsResultOneOf;
type index_d$5_AggregationDataAggregationResultsScalarResult = AggregationDataAggregationResultsScalarResult;
type index_d$5_AggregationDateHistogramAggregation = AggregationDateHistogramAggregation;
type index_d$5_AggregationDateHistogramAggregationInterval = AggregationDateHistogramAggregationInterval;
declare const index_d$5_AggregationDateHistogramAggregationInterval: typeof AggregationDateHistogramAggregationInterval;
type index_d$5_AggregationKindOneOf = AggregationKindOneOf;
type index_d$5_AggregationNestedAggregation = AggregationNestedAggregation;
type index_d$5_AggregationNestedAggregationNestedAggregationItem = AggregationNestedAggregationNestedAggregationItem;
type index_d$5_AggregationNestedAggregationNestedAggregationItemKindOneOf = AggregationNestedAggregationNestedAggregationItemKindOneOf;
type index_d$5_AggregationNestedAggregationNestedAggregationType = AggregationNestedAggregationNestedAggregationType;
declare const index_d$5_AggregationNestedAggregationNestedAggregationType: typeof AggregationNestedAggregationNestedAggregationType;
type index_d$5_AggregationRangeAggregation = AggregationRangeAggregation;
type index_d$5_AggregationRangeAggregationRangeBucket = AggregationRangeAggregationRangeBucket;
type index_d$5_AggregationResults = AggregationResults;
type index_d$5_AggregationResultsDateHistogramResults = AggregationResultsDateHistogramResults;
type index_d$5_AggregationResultsGroupByValueResults = AggregationResultsGroupByValueResults;
type index_d$5_AggregationResultsNestedAggregationResults = AggregationResultsNestedAggregationResults;
type index_d$5_AggregationResultsNestedAggregationResultsResultOneOf = AggregationResultsNestedAggregationResultsResultOneOf;
type index_d$5_AggregationResultsNestedResults = AggregationResultsNestedResults;
type index_d$5_AggregationResultsRangeResults = AggregationResultsRangeResults;
type index_d$5_AggregationResultsResultOneOf = AggregationResultsResultOneOf;
type index_d$5_AggregationResultsScalarResult = AggregationResultsScalarResult;
type index_d$5_AggregationResultsValueResults = AggregationResultsValueResults;
type index_d$5_AggregationScalarAggregation = AggregationScalarAggregation;
type index_d$5_AggregationType = AggregationType;
declare const index_d$5_AggregationType: typeof AggregationType;
type index_d$5_AggregationValueAggregation = AggregationValueAggregation;
type index_d$5_AggregationValueAggregationIncludeMissingValuesOptions = AggregationValueAggregationIncludeMissingValuesOptions;
type index_d$5_AggregationValueAggregationMissingValues = AggregationValueAggregationMissingValues;
declare const index_d$5_AggregationValueAggregationMissingValues: typeof AggregationValueAggregationMissingValues;
type index_d$5_AggregationValueAggregationOptionsOneOf = AggregationValueAggregationOptionsOneOf;
type index_d$5_AggregationValueAggregationSortDirection = AggregationValueAggregationSortDirection;
declare const index_d$5_AggregationValueAggregationSortDirection: typeof AggregationValueAggregationSortDirection;
type index_d$5_AggregationValueAggregationSortType = AggregationValueAggregationSortType;
declare const index_d$5_AggregationValueAggregationSortType: typeof AggregationValueAggregationSortType;
type index_d$5_Alignment = Alignment;
declare const index_d$5_Alignment: typeof Alignment;
type index_d$5_AnchorData = AnchorData;
type index_d$5_AppEmbedData = AppEmbedData;
type index_d$5_AppEmbedDataAppDataOneOf = AppEmbedDataAppDataOneOf;
type index_d$5_AppType = AppType;
declare const index_d$5_AppType: typeof AppType;
type index_d$5_AudioData = AudioData;
type index_d$5_AvailabilityStatus = AvailabilityStatus;
declare const index_d$5_AvailabilityStatus: typeof AvailabilityStatus;
type index_d$5_Background = Background;
type index_d$5_BackgroundBackgroundOneOf = BackgroundBackgroundOneOf;
type index_d$5_BackgroundType = BackgroundType;
declare const index_d$5_BackgroundType: typeof BackgroundType;
type index_d$5_BlockquoteData = BlockquoteData;
type index_d$5_BookingData = BookingData;
type index_d$5_Border = Border;
type index_d$5_BorderColors = BorderColors;
type index_d$5_Brand = Brand;
type index_d$5_BreadCrumb = BreadCrumb;
type index_d$5_BreadcrumbsInfo = BreadcrumbsInfo;
type index_d$5_BulkAddInfoSectionsToProductsByFilterOptions = BulkAddInfoSectionsToProductsByFilterOptions;
type index_d$5_BulkAddInfoSectionsToProductsByFilterRequest = BulkAddInfoSectionsToProductsByFilterRequest;
type index_d$5_BulkAddInfoSectionsToProductsByFilterResponse = BulkAddInfoSectionsToProductsByFilterResponse;
type index_d$5_BulkAddInfoSectionsToProductsOptions = BulkAddInfoSectionsToProductsOptions;
type index_d$5_BulkAddInfoSectionsToProductsRequest = BulkAddInfoSectionsToProductsRequest;
type index_d$5_BulkAddInfoSectionsToProductsResponse = BulkAddInfoSectionsToProductsResponse;
type index_d$5_BulkAddProductsToCategoriesByFilterOptions = BulkAddProductsToCategoriesByFilterOptions;
type index_d$5_BulkAddProductsToCategoriesByFilterRequest = BulkAddProductsToCategoriesByFilterRequest;
type index_d$5_BulkAddProductsToCategoriesByFilterResponse = BulkAddProductsToCategoriesByFilterResponse;
type index_d$5_BulkAddProductsToCategoriesByFilterResponseNonNullableFields = BulkAddProductsToCategoriesByFilterResponseNonNullableFields;
type index_d$5_BulkAdjustProductVariantsByFilterOptions = BulkAdjustProductVariantsByFilterOptions;
type index_d$5_BulkAdjustProductVariantsByFilterRequest = BulkAdjustProductVariantsByFilterRequest;
type index_d$5_BulkAdjustProductVariantsByFilterRequestRoundingStrategy = BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
declare const index_d$5_BulkAdjustProductVariantsByFilterRequestRoundingStrategy: typeof BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
type index_d$5_BulkAdjustProductVariantsByFilterResponse = BulkAdjustProductVariantsByFilterResponse;
type index_d$5_BulkAdjustProductVariantsByFilterResponseNonNullableFields = BulkAdjustProductVariantsByFilterResponseNonNullableFields;
type index_d$5_BulkAdjustVariantsByFilterRequest = BulkAdjustVariantsByFilterRequest;
type index_d$5_BulkAdjustVariantsByFilterResponse = BulkAdjustVariantsByFilterResponse;
type index_d$5_BulkCreateProductsOptions = BulkCreateProductsOptions;
type index_d$5_BulkCreateProductsRequest = BulkCreateProductsRequest;
type index_d$5_BulkCreateProductsResponse = BulkCreateProductsResponse;
type index_d$5_BulkCreateProductsResponseNonNullableFields = BulkCreateProductsResponseNonNullableFields;
type index_d$5_BulkCreateProductsWithInventoryOptions = BulkCreateProductsWithInventoryOptions;
type index_d$5_BulkCreateProductsWithInventoryRequest = BulkCreateProductsWithInventoryRequest;
type index_d$5_BulkCreateProductsWithInventoryResponse = BulkCreateProductsWithInventoryResponse;
type index_d$5_BulkCreateProductsWithInventoryResponseNonNullableFields = BulkCreateProductsWithInventoryResponseNonNullableFields;
type index_d$5_BulkDeleteProductsByFilterOptions = BulkDeleteProductsByFilterOptions;
type index_d$5_BulkDeleteProductsByFilterRequest = BulkDeleteProductsByFilterRequest;
type index_d$5_BulkDeleteProductsByFilterResponse = BulkDeleteProductsByFilterResponse;
type index_d$5_BulkDeleteProductsRequest = BulkDeleteProductsRequest;
type index_d$5_BulkDeleteProductsResponse = BulkDeleteProductsResponse;
type index_d$5_BulkDeleteProductsResponseBulkProductResult = BulkDeleteProductsResponseBulkProductResult;
type index_d$5_BulkInventoryItemAction = BulkInventoryItemAction;
type index_d$5_BulkInventoryItemResult = BulkInventoryItemResult;
type index_d$5_BulkInventoryItemResults = BulkInventoryItemResults;
type index_d$5_BulkProductResult = BulkProductResult;
type index_d$5_BulkProductResults = BulkProductResults;
type index_d$5_BulkRemoveInfoSectionsFromProductsByFilterOptions = BulkRemoveInfoSectionsFromProductsByFilterOptions;
type index_d$5_BulkRemoveInfoSectionsFromProductsByFilterRequest = BulkRemoveInfoSectionsFromProductsByFilterRequest;
type index_d$5_BulkRemoveInfoSectionsFromProductsByFilterResponse = BulkRemoveInfoSectionsFromProductsByFilterResponse;
type index_d$5_BulkRemoveInfoSectionsFromProductsOptions = BulkRemoveInfoSectionsFromProductsOptions;
type index_d$5_BulkRemoveInfoSectionsFromProductsRequest = BulkRemoveInfoSectionsFromProductsRequest;
type index_d$5_BulkRemoveInfoSectionsFromProductsResponse = BulkRemoveInfoSectionsFromProductsResponse;
type index_d$5_BulkRemoveProductsFromCategoriesByFilterOptions = BulkRemoveProductsFromCategoriesByFilterOptions;
type index_d$5_BulkRemoveProductsFromCategoriesByFilterRequest = BulkRemoveProductsFromCategoriesByFilterRequest;
type index_d$5_BulkRemoveProductsFromCategoriesByFilterResponse = BulkRemoveProductsFromCategoriesByFilterResponse;
type index_d$5_BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields = BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields;
type index_d$5_BulkUpdateProductVariantsByFilterOptions = BulkUpdateProductVariantsByFilterOptions;
type index_d$5_BulkUpdateProductVariantsByFilterRequest = BulkUpdateProductVariantsByFilterRequest;
type index_d$5_BulkUpdateProductVariantsByFilterResponse = BulkUpdateProductVariantsByFilterResponse;
type index_d$5_BulkUpdateProductVariantsByFilterResponseNonNullableFields = BulkUpdateProductVariantsByFilterResponseNonNullableFields;
type index_d$5_BulkUpdateProductsByFilterOptions = BulkUpdateProductsByFilterOptions;
type index_d$5_BulkUpdateProductsByFilterRequest = BulkUpdateProductsByFilterRequest;
type index_d$5_BulkUpdateProductsByFilterResponse = BulkUpdateProductsByFilterResponse;
type index_d$5_BulkUpdateProductsOptions = BulkUpdateProductsOptions;
type index_d$5_BulkUpdateProductsRequest = BulkUpdateProductsRequest;
type index_d$5_BulkUpdateProductsResponse = BulkUpdateProductsResponse;
type index_d$5_BulkUpdateProductsResponseNonNullableFields = BulkUpdateProductsResponseNonNullableFields;
type index_d$5_BulkUpdateProductsWithInventoryOptions = BulkUpdateProductsWithInventoryOptions;
type index_d$5_BulkUpdateProductsWithInventoryRequest = BulkUpdateProductsWithInventoryRequest;
type index_d$5_BulkUpdateProductsWithInventoryResponse = BulkUpdateProductsWithInventoryResponse;
type index_d$5_BulkUpdateProductsWithInventoryResponseNonNullableFields = BulkUpdateProductsWithInventoryResponseNonNullableFields;
type index_d$5_BulkUpdateVariantsByFilterRequest = BulkUpdateVariantsByFilterRequest;
type index_d$5_BulkUpdateVariantsByFilterResponse = BulkUpdateVariantsByFilterResponse;
type index_d$5_BulletedListData = BulletedListData;
type index_d$5_ButtonData = ButtonData;
type index_d$5_CaptionData = CaptionData;
type index_d$5_CatalogV3BulkProductResult = CatalogV3BulkProductResult;
type index_d$5_CellStyle = CellStyle;
type index_d$5_ChoiceType = ChoiceType;
declare const index_d$5_ChoiceType: typeof ChoiceType;
type index_d$5_ChoicesSettings = ChoicesSettings;
type index_d$5_CodeBlockData = CodeBlockData;
type index_d$5_CollapsibleListData = CollapsibleListData;
type index_d$5_ColorData = ColorData;
type index_d$5_Colors = Colors;
type index_d$5_CommonAggregation = CommonAggregation;
type index_d$5_CommonAggregationData = CommonAggregationData;
type index_d$5_CommonAggregationDateHistogramAggregation = CommonAggregationDateHistogramAggregation;
type index_d$5_CommonAggregationKindOneOf = CommonAggregationKindOneOf;
type index_d$5_CommonAggregationNestedAggregation = CommonAggregationNestedAggregation;
type index_d$5_CommonAggregationRangeAggregation = CommonAggregationRangeAggregation;
type index_d$5_CommonAggregationScalarAggregation = CommonAggregationScalarAggregation;
type index_d$5_CommonAggregationType = CommonAggregationType;
declare const index_d$5_CommonAggregationType: typeof CommonAggregationType;
type index_d$5_CommonAggregationValueAggregation = CommonAggregationValueAggregation;
type index_d$5_CommonAggregationValueAggregationOptionsOneOf = CommonAggregationValueAggregationOptionsOneOf;
type index_d$5_CommonBulkActionMetadata = CommonBulkActionMetadata;
type index_d$5_CommonCursorPaging = CommonCursorPaging;
type index_d$5_CommonCursorPagingMetadata = CommonCursorPagingMetadata;
type index_d$5_CommonCursorQuery = CommonCursorQuery;
type index_d$5_CommonCursorQueryPagingMethodOneOf = CommonCursorQueryPagingMethodOneOf;
type index_d$5_CommonCursorSearch = CommonCursorSearch;
type index_d$5_CommonCursorSearchPagingMethodOneOf = CommonCursorSearchPagingMethodOneOf;
type index_d$5_CommonCursors = CommonCursors;
type index_d$5_CommonItemMetadata = CommonItemMetadata;
type index_d$5_CommonScalarType = CommonScalarType;
declare const index_d$5_CommonScalarType: typeof CommonScalarType;
type index_d$5_CommonSearchDetails = CommonSearchDetails;
type index_d$5_CommonSearchDetailsMode = CommonSearchDetailsMode;
declare const index_d$5_CommonSearchDetailsMode: typeof CommonSearchDetailsMode;
type index_d$5_CommonSortOrder = CommonSortOrder;
declare const index_d$5_CommonSortOrder: typeof CommonSortOrder;
type index_d$5_CommonSorting = CommonSorting;
type index_d$5_ConnectedModifier = ConnectedModifier;
type index_d$5_ConnectedModifierChoice = ConnectedModifierChoice;
type index_d$5_ConnectedModifierChoiceValueOneOf = ConnectedModifierChoiceValueOneOf;
type index_d$5_ConnectedModifierModifierSettingsOneOf = ConnectedModifierModifierSettingsOneOf;
type index_d$5_ConnectedOption = ConnectedOption;
type index_d$5_ConnectedOptionChoice = ConnectedOptionChoice;
type index_d$5_ConnectedOptionChoiceValueOneOf = ConnectedOptionChoiceValueOneOf;
type index_d$5_ConnectedOptionOptionSettingsOneOf = ConnectedOptionOptionSettingsOneOf;
type index_d$5_CountProductsOptions = CountProductsOptions;
type index_d$5_CountProductsRequest = CountProductsRequest;
type index_d$5_CountProductsResponse = CountProductsResponse;
type index_d$5_CreateProductOptions = CreateProductOptions;
type index_d$5_CreateProductRequest = CreateProductRequest;
type index_d$5_CreateProductResponse = CreateProductResponse;
type index_d$5_CreateProductResponseNonNullableFields = CreateProductResponseNonNullableFields;
type index_d$5_CreateProductWithInventoryOptions = CreateProductWithInventoryOptions;
type index_d$5_CreateProductWithInventoryRequest = CreateProductWithInventoryRequest;
type index_d$5_CreateProductWithInventoryResponse = CreateProductWithInventoryResponse;
type index_d$5_CreateProductWithInventoryResponseNonNullableFields = CreateProductWithInventoryResponseNonNullableFields;
type index_d$5_Crop = Crop;
declare const index_d$5_Crop: typeof Crop;
type index_d$5_CursorSearch = CursorSearch;
type index_d$5_CursorSearchPagingMethodOneOf = CursorSearchPagingMethodOneOf;
type index_d$5_DateHistogramAggregation = DateHistogramAggregation;
type index_d$5_DateHistogramAggregationInterval = DateHistogramAggregationInterval;
declare const index_d$5_DateHistogramAggregationInterval: typeof DateHistogramAggregationInterval;
type index_d$5_DateHistogramResult = DateHistogramResult;
type index_d$5_DateHistogramResults = DateHistogramResults;
type index_d$5_DateHistogramResultsDateHistogramResult = DateHistogramResultsDateHistogramResult;
type index_d$5_Decoration = Decoration;
type index_d$5_DecorationDataOneOf = DecorationDataOneOf;
type index_d$5_DecorationType = DecorationType;
declare const index_d$5_DecorationType: typeof DecorationType;
type index_d$5_DeleteByFilterOperation = DeleteByFilterOperation;
type index_d$5_DeleteByIdsOperation = DeleteByIdsOperation;
type index_d$5_DeleteProductRequest = DeleteProductRequest;
type index_d$5_DeleteProductResponse = DeleteProductResponse;
type index_d$5_DeprecatedSearchProductsWithOffsetRequest = DeprecatedSearchProductsWithOffsetRequest;
type index_d$5_DeprecatedSearchProductsWithOffsetResponse = DeprecatedSearchProductsWithOffsetResponse;
type index_d$5_Design = Design;
type index_d$5_Dimensions = Dimensions;
type index_d$5_Direction = Direction;
declare const index_d$5_Direction: typeof Direction;
type index_d$5_DividerData = DividerData;
type index_d$5_DoNotCallBulkCreateProductsRequest = DoNotCallBulkCreateProductsRequest;
type index_d$5_DoNotCallBulkCreateProductsResponse = DoNotCallBulkCreateProductsResponse;
type index_d$5_DoNotCallBulkUpdateProductsRequest = DoNotCallBulkUpdateProductsRequest;
type index_d$5_DoNotCallBulkUpdateProductsResponse = DoNotCallBulkUpdateProductsResponse;
type index_d$5_DoNotCallCreateProductRequest = DoNotCallCreateProductRequest;
type index_d$5_DoNotCallCreateProductResponse = DoNotCallCreateProductResponse;
type index_d$5_DoNotCallUpdateProductRequest = DoNotCallUpdateProductRequest;
type index_d$5_DoNotCallUpdateProductResponse = DoNotCallUpdateProductResponse;
type index_d$5_DocumentImage = DocumentImage;
type index_d$5_DocumentPayload = DocumentPayload;
type index_d$5_DocumentStyle = DocumentStyle;
type index_d$5_DocumentUpdateOperation = DocumentUpdateOperation;
type index_d$5_EmbedData = EmbedData;
type index_d$5_Enum = Enum;
declare const index_d$5_Enum: typeof Enum;
type index_d$5_EventData = EventData;
type index_d$5_EventuallyConsistentQueryProductsRequest = EventuallyConsistentQueryProductsRequest;
type index_d$5_EventuallyConsistentQueryProductsResponse = EventuallyConsistentQueryProductsResponse;
type index_d$5_ExtendedFields = ExtendedFields;
type index_d$5_FileData = FileData;
type index_d$5_FileSource = FileSource;
type index_d$5_FileSourceDataOneOf = FileSourceDataOneOf;
type index_d$5_FileType = FileType;
declare const index_d$5_FileType: typeof FileType;
type index_d$5_FixedMonetaryAmount = FixedMonetaryAmount;
type index_d$5_FontSizeData = FontSizeData;
type index_d$5_FontType = FontType;
declare const index_d$5_FontType: typeof FontType;
type index_d$5_FreeTextSettings = FreeTextSettings;
type index_d$5_FulfillerDeleted = FulfillerDeleted;
type index_d$5_GIF = GIF;
type index_d$5_GIFData = GIFData;
type index_d$5_GalleryData = GalleryData;
type index_d$5_GalleryOptions = GalleryOptions;
type index_d$5_GetProductBySlugOptions = GetProductBySlugOptions;
type index_d$5_GetProductBySlugRequest = GetProductBySlugRequest;
type index_d$5_GetProductBySlugResponse = GetProductBySlugResponse;
type index_d$5_GetProductOptions = GetProductOptions;
type index_d$5_GetProductRequest = GetProductRequest;
type index_d$5_GetProductResponse = GetProductResponse;
type index_d$5_Gradient = Gradient;
type index_d$5_GroupByAggregation = GroupByAggregation;
type index_d$5_GroupByAggregationKindOneOf = GroupByAggregationKindOneOf;
type index_d$5_GroupByValueResults = GroupByValueResults;
type index_d$5_GroupByValueResultsNestedValueAggregationResult = GroupByValueResultsNestedValueAggregationResult;
type index_d$5_HTMLData = HTMLData;
type index_d$5_HTMLDataDataOneOf = HTMLDataDataOneOf;
type index_d$5_HeadingData = HeadingData;
type index_d$5_Height = Height;
type index_d$5_Image = Image;
type index_d$5_ImageData = ImageData;
type index_d$5_IncludeMissingValuesOptions = IncludeMissingValuesOptions;
type index_d$5_IndexDocument = IndexDocument;
type index_d$5_InfoSection = InfoSection;
type index_d$5_InitialExpandedItems = InitialExpandedItems;
declare const index_d$5_InitialExpandedItems: typeof InitialExpandedItems;
type index_d$5_Interval = Interval;
declare const index_d$5_Interval: typeof Interval;
type index_d$5_Inventory = Inventory;
type index_d$5_InventoryAvailabilityStatus = InventoryAvailabilityStatus;
declare const index_d$5_InventoryAvailabilityStatus: typeof InventoryAvailabilityStatus;
type index_d$5_InventoryItem = InventoryItem;
type index_d$5_InventoryItemComposite = InventoryItemComposite;
type index_d$5_InventoryItemCompositeTrackingMethodOneOf = InventoryItemCompositeTrackingMethodOneOf;
type index_d$5_InventoryItemTrackingMethodOneOf = InventoryItemTrackingMethodOneOf;
type index_d$5_InventoryStatus = InventoryStatus;
type index_d$5_Item = Item;
type index_d$5_ItemDataOneOf = ItemDataOneOf;
type index_d$5_ItemStyle = ItemStyle;
type index_d$5_Keyword = Keyword;
type index_d$5_Layout = Layout;
type index_d$5_LayoutType = LayoutType;
declare const index_d$5_LayoutType: typeof LayoutType;
type index_d$5_LineStyle = LineStyle;
declare const index_d$5_LineStyle: typeof LineStyle;
type index_d$5_Link = Link;
type index_d$5_LinkData = LinkData;
type index_d$5_LinkDataOneOf = LinkDataOneOf;
type index_d$5_LinkPreviewData = LinkPreviewData;
type index_d$5_ListValue = ListValue;
type index_d$5_MapData = MapData;
type index_d$5_MapSettings = MapSettings;
type index_d$5_MapType = MapType;
declare const index_d$5_MapType: typeof MapType;
type index_d$5_MaskedProduct = MaskedProduct;
type index_d$5_MaskedProductWithInventory = MaskedProductWithInventory;
type index_d$5_MeasurementUnit = MeasurementUnit;
declare const index_d$5_MeasurementUnit: typeof MeasurementUnit;
type index_d$5_Media = Media;
type index_d$5_MediaItemsInfo = MediaItemsInfo;
type index_d$5_MediaType = MediaType;
declare const index_d$5_MediaType: typeof MediaType;
type index_d$5_MentionData = MentionData;
type index_d$5_Metadata = Metadata;
type index_d$5_MinVariantPriceInfo = MinVariantPriceInfo;
type index_d$5_MissingValues = MissingValues;
declare const index_d$5_MissingValues: typeof MissingValues;
type index_d$5_Mode = Mode;
declare const index_d$5_Mode: typeof Mode;
type index_d$5_ModifierChoicesSettings = ModifierChoicesSettings;
type index_d$5_ModifierRenderType = ModifierRenderType;
declare const index_d$5_ModifierRenderType: typeof ModifierRenderType;
type index_d$5_MultipleColors = MultipleColors;
type index_d$5_NestedAggregation = NestedAggregation;
type index_d$5_NestedAggregationItem = NestedAggregationItem;
type index_d$5_NestedAggregationItemKindOneOf = NestedAggregationItemKindOneOf;
type index_d$5_NestedAggregationNestedAggregationItem = NestedAggregationNestedAggregationItem;
type index_d$5_NestedAggregationNestedAggregationItemKindOneOf = NestedAggregationNestedAggregationItemKindOneOf;
type index_d$5_NestedAggregationNestedAggregationType = NestedAggregationNestedAggregationType;
declare const index_d$5_NestedAggregationNestedAggregationType: typeof NestedAggregationNestedAggregationType;
type index_d$5_NestedAggregationResults = NestedAggregationResults;
type index_d$5_NestedAggregationResultsResultOneOf = NestedAggregationResultsResultOneOf;
type index_d$5_NestedAggregationType = NestedAggregationType;
declare const index_d$5_NestedAggregationType: typeof NestedAggregationType;
type index_d$5_NestedResultValue = NestedResultValue;
type index_d$5_NestedResultValueResultOneOf = NestedResultValueResultOneOf;
type index_d$5_NestedResults = NestedResults;
type index_d$5_NestedResultsNestedResultValue = NestedResultsNestedResultValue;
type index_d$5_NestedResultsNestedResultValueResultOneOf = NestedResultsNestedResultValueResultOneOf;
type index_d$5_NestedResultsRangeResult = NestedResultsRangeResult;
type index_d$5_NestedResultsResults = NestedResultsResults;
type index_d$5_NestedResultsScalarResult = NestedResultsScalarResult;
type index_d$5_NestedResultsValueResult = NestedResultsValueResult;
type index_d$5_NestedValueAggregationResult = NestedValueAggregationResult;
type index_d$5_Node = Node;
type index_d$5_NodeDataOneOf = NodeDataOneOf;
type index_d$5_NodeStyle = NodeStyle;
type index_d$5_NodeType = NodeType;
declare const index_d$5_NodeType: typeof NodeType;
type index_d$5_NullValue = NullValue;
declare const index_d$5_NullValue: typeof NullValue;
type index_d$5_Oembed = Oembed;
type index_d$5_Option = Option;
type index_d$5_OptionChoice = OptionChoice;
type index_d$5_OptionChoiceIds = OptionChoiceIds;
type index_d$5_OptionChoiceNames = OptionChoiceNames;
type index_d$5_OptionChoiceReferences = OptionChoiceReferences;
type index_d$5_OptionDesign = OptionDesign;
type index_d$5_OptionLayout = OptionLayout;
type index_d$5_OrderedListData = OrderedListData;
type index_d$5_Orientation = Orientation;
declare const index_d$5_Orientation: typeof Orientation;
type index_d$5_PDFSettings = PDFSettings;
type index_d$5_ParagraphData = ParagraphData;
type index_d$5_Permissions = Permissions;
type index_d$5_PhysicalProperties = PhysicalProperties;
type index_d$5_PlatformOffsetSearch = PlatformOffsetSearch;
type index_d$5_PlatformOffsetSearchPagingMethodOneOf = PlatformOffsetSearchPagingMethodOneOf;
type index_d$5_PlatformPaging = PlatformPaging;
type index_d$5_PlaybackOptions = PlaybackOptions;
type index_d$5_PluginContainerData = PluginContainerData;
type index_d$5_PluginContainerDataAlignment = PluginContainerDataAlignment;
declare const index_d$5_PluginContainerDataAlignment: typeof PluginContainerDataAlignment;
type index_d$5_PluginContainerDataWidth = PluginContainerDataWidth;
type index_d$5_PluginContainerDataWidthDataOneOf = PluginContainerDataWidthDataOneOf;
type index_d$5_Poll = Poll;
type index_d$5_PollData = PollData;
type index_d$5_PollDataLayout = PollDataLayout;
type index_d$5_PollDesign = PollDesign;
type index_d$5_PollLayout = PollLayout;
type index_d$5_PollLayoutDirection = PollLayoutDirection;
declare const index_d$5_PollLayoutDirection: typeof PollLayoutDirection;
type index_d$5_PollLayoutType = PollLayoutType;
declare const index_d$5_PollLayoutType: typeof PollLayoutType;
type index_d$5_PollSettings = PollSettings;
type index_d$5_PreorderStatus = PreorderStatus;
declare const index_d$5_PreorderStatus: typeof PreorderStatus;
type index_d$5_PriceInfo = PriceInfo;
type index_d$5_PricePerUnit = PricePerUnit;
type index_d$5_PricePerUnitRange = PricePerUnitRange;
type index_d$5_PricePerUnitRangePricePerUnit = PricePerUnitRangePricePerUnit;
type index_d$5_PricePerUnitSettings = PricePerUnitSettings;
type index_d$5_PriceRange = PriceRange;
type index_d$5_Product = Product;
type index_d$5_ProductCategoriesInfo = ProductCategoriesInfo;
type index_d$5_ProductCategory = ProductCategory;
type index_d$5_ProductCategoryIdsInfo = ProductCategoryIdsInfo;
type index_d$5_ProductCreatedEnvelope = ProductCreatedEnvelope;
type index_d$5_ProductDeletedEnvelope = ProductDeletedEnvelope;
type index_d$5_ProductIdWithRevision = ProductIdWithRevision;
type index_d$5_ProductMedia = ProductMedia;
type index_d$5_ProductMediaMediaOneOf = ProductMediaMediaOneOf;
type index_d$5_ProductMediaSetByOneOf = ProductMediaSetByOneOf;
type index_d$5_ProductOptionRenderType = ProductOptionRenderType;
declare const index_d$5_ProductOptionRenderType: typeof ProductOptionRenderType;
type index_d$5_ProductPreorderAvailability = ProductPreorderAvailability;
declare const index_d$5_ProductPreorderAvailability: typeof ProductPreorderAvailability;
type index_d$5_ProductType = ProductType;
declare const index_d$5_ProductType: typeof ProductType;
type index_d$5_ProductUpdatedEnvelope = ProductUpdatedEnvelope;
type index_d$5_ProductVariantIds = ProductVariantIds;
type index_d$5_ProductVariants = ProductVariants;
type index_d$5_ProductWithInventory = ProductWithInventory;
type index_d$5_ProductWithInventoryTypedPropertiesOneOf = ProductWithInventoryTypedPropertiesOneOf;
type index_d$5_ProductsQueryBuilder = ProductsQueryBuilder;
type index_d$5_ProductsQueryResult = ProductsQueryResult;
type index_d$5_QueryProductsOptions = QueryProductsOptions;
type index_d$5_QueryProductsRequest = QueryProductsRequest;
type index_d$5_QueryProductsResponse = QueryProductsResponse;
type index_d$5_RangeAggregation = RangeAggregation;
type index_d$5_RangeAggregationRangeBucket = RangeAggregationRangeBucket;
type index_d$5_RangeAggregationResult = RangeAggregationResult;
type index_d$5_RangeBucket = RangeBucket;
type index_d$5_RangeResult = RangeResult;
type index_d$5_RangeResults = RangeResults;
type index_d$5_RangeResultsRangeAggregationResult = RangeResultsRangeAggregationResult;
type index_d$5_Rel = Rel;
type index_d$5_Results = Results;
type index_d$5_RetrieveVariantsRequest = RetrieveVariantsRequest;
type index_d$5_RetrieveVariantsResponse = RetrieveVariantsResponse;
type index_d$5_RevenueDetails = RevenueDetails;
type index_d$5_RichContent = RichContent;
type index_d$5_RoundingStrategy = RoundingStrategy;
declare const index_d$5_RoundingStrategy: typeof RoundingStrategy;
type index_d$5_ScalarAggregation = ScalarAggregation;
type index_d$5_ScalarResult = ScalarResult;
type index_d$5_ScalarType = ScalarType;
declare const index_d$5_ScalarType: typeof ScalarType;
type index_d$5_SearchDetails = SearchDetails;
type index_d$5_SearchDetailsMode = SearchDetailsMode;
declare const index_d$5_SearchDetailsMode: typeof SearchDetailsMode;
type index_d$5_SearchIndexingNotification = SearchIndexingNotification;
type index_d$5_SearchProductsOptions = SearchProductsOptions;
type index_d$5_SearchProductsRequest = SearchProductsRequest;
type index_d$5_SearchProductsResponse = SearchProductsResponse;
type index_d$5_SearchRelated = SearchRelated;
type index_d$5_SearchRelatedDetails = SearchRelatedDetails;
type index_d$5_SearchRelatedProductsRequest = SearchRelatedProductsRequest;
type index_d$5_SearchRelatedProductsResponse = SearchRelatedProductsResponse;
type index_d$5_SecuredMedia = SecuredMedia;
type index_d$5_SeoSchema = SeoSchema;
type index_d$5_Settings = Settings;
type index_d$5_SingleEntityOpsRequestedFields = SingleEntityOpsRequestedFields;
declare const index_d$5_SingleEntityOpsRequestedFields: typeof SingleEntityOpsRequestedFields;
type index_d$5_SortDirection = SortDirection;
declare const index_d$5_SortDirection: typeof SortDirection;
type index_d$5_SortType = SortType;
declare const index_d$5_SortType: typeof SortType;
type index_d$5_Source = Source;
declare const index_d$5_Source: typeof Source;
type index_d$5_Spoiler = Spoiler;
type index_d$5_SpoilerData = SpoilerData;
type index_d$5_Styles = Styles;
type index_d$5_Subscription = Subscription;
type index_d$5_SubscriptionCyclesOneOf = SubscriptionCyclesOneOf;
type index_d$5_SubscriptionDetails = SubscriptionDetails;
type index_d$5_SubscriptionDiscount = SubscriptionDiscount;
type index_d$5_SubscriptionDiscountDiscountOneOf = SubscriptionDiscountDiscountOneOf;
type index_d$5_SubscriptionPrice = SubscriptionPrice;
type index_d$5_SubscriptionPricePerUnit = SubscriptionPricePerUnit;
type index_d$5_SubscriptionPricesInfo = SubscriptionPricesInfo;
type index_d$5_TableCellData = TableCellData;
type index_d$5_TableData = TableData;
type index_d$5_Tag = Tag;
type index_d$5_Target = Target;
declare const index_d$5_Target: typeof Target;
type index_d$5_TextAlignment = TextAlignment;
declare const index_d$5_TextAlignment: typeof TextAlignment;
type index_d$5_TextData = TextData;
type index_d$5_TextNodeStyle = TextNodeStyle;
type index_d$5_TextStyle = TextStyle;
type index_d$5_Thumbnail = Thumbnail;
type index_d$5_Thumbnails = Thumbnails;
type index_d$5_ThumbnailsAlignment = ThumbnailsAlignment;
declare const index_d$5_ThumbnailsAlignment: typeof ThumbnailsAlignment;
type index_d$5_Type = Type;
declare const index_d$5_Type: typeof Type;
type index_d$5_UnsignedAdjustValue = UnsignedAdjustValue;
type index_d$5_UnsignedAdjustValueAdjustValueOneOf = UnsignedAdjustValueAdjustValueOneOf;
type index_d$5_UnsupportedFieldMasks = UnsupportedFieldMasks;
type index_d$5_UpdateByFilterOperation = UpdateByFilterOperation;
type index_d$5_UpdateDocumentsEvent = UpdateDocumentsEvent;
type index_d$5_UpdateDocumentsEventOperationOneOf = UpdateDocumentsEventOperationOneOf;
type index_d$5_UpdateExistingOperation = UpdateExistingOperation;
type index_d$5_UpdateExtendedFieldsOptions = UpdateExtendedFieldsOptions;
type index_d$5_UpdateExtendedFieldsRequest = UpdateExtendedFieldsRequest;
type index_d$5_UpdateExtendedFieldsResponse = UpdateExtendedFieldsResponse;
type index_d$5_UpdateProduct = UpdateProduct;
type index_d$5_UpdateProductOptions = UpdateProductOptions;
type index_d$5_UpdateProductRequest = UpdateProductRequest;
type index_d$5_UpdateProductResponse = UpdateProductResponse;
type index_d$5_UpdateProductResponseNonNullableFields = UpdateProductResponseNonNullableFields;
type index_d$5_UpdateProductWithInventoryOptions = UpdateProductWithInventoryOptions;
type index_d$5_UpdateProductWithInventoryProduct = UpdateProductWithInventoryProduct;
type index_d$5_UpdateProductWithInventoryRequest = UpdateProductWithInventoryRequest;
type index_d$5_UpdateProductWithInventoryResponse = UpdateProductWithInventoryResponse;
type index_d$5_UpdateProductWithInventoryResponseNonNullableFields = UpdateProductWithInventoryResponseNonNullableFields;
type index_d$5_V1Media = V1Media;
type index_d$5_V3AdjustValue = V3AdjustValue;
type index_d$5_V3AdjustValueAdjustValueOneOf = V3AdjustValueAdjustValueOneOf;
type index_d$5_V3BulkAddInfoSectionsToProductsByFilterRequest = V3BulkAddInfoSectionsToProductsByFilterRequest;
type index_d$5_V3BulkAddInfoSectionsToProductsByFilterResponse = V3BulkAddInfoSectionsToProductsByFilterResponse;
type index_d$5_V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields = V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields;
type index_d$5_V3BulkAddInfoSectionsToProductsRequest = V3BulkAddInfoSectionsToProductsRequest;
type index_d$5_V3BulkAddInfoSectionsToProductsResponse = V3BulkAddInfoSectionsToProductsResponse;
type index_d$5_V3BulkAddInfoSectionsToProductsResponseNonNullableFields = V3BulkAddInfoSectionsToProductsResponseNonNullableFields;
type index_d$5_V3BulkDeleteProductsByFilterRequest = V3BulkDeleteProductsByFilterRequest;
type index_d$5_V3BulkDeleteProductsByFilterResponse = V3BulkDeleteProductsByFilterResponse;
type index_d$5_V3BulkDeleteProductsByFilterResponseNonNullableFields = V3BulkDeleteProductsByFilterResponseNonNullableFields;
type index_d$5_V3BulkDeleteProductsRequest = V3BulkDeleteProductsRequest;
type index_d$5_V3BulkDeleteProductsResponse = V3BulkDeleteProductsResponse;
type index_d$5_V3BulkDeleteProductsResponseNonNullableFields = V3BulkDeleteProductsResponseNonNullableFields;
type index_d$5_V3BulkProductResult = V3BulkProductResult;
type index_d$5_V3BulkRemoveInfoSectionsFromProductsByFilterRequest = V3BulkRemoveInfoSectionsFromProductsByFilterRequest;
type index_d$5_V3BulkRemoveInfoSectionsFromProductsByFilterResponse = V3BulkRemoveInfoSectionsFromProductsByFilterResponse;
type index_d$5_V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields = V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields;
type index_d$5_V3BulkRemoveInfoSectionsFromProductsRequest = V3BulkRemoveInfoSectionsFromProductsRequest;
type index_d$5_V3BulkRemoveInfoSectionsFromProductsResponse = V3BulkRemoveInfoSectionsFromProductsResponse;
type index_d$5_V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields = V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields;
type index_d$5_V3BulkUpdateProductsByFilterRequest = V3BulkUpdateProductsByFilterRequest;
type index_d$5_V3BulkUpdateProductsByFilterResponse = V3BulkUpdateProductsByFilterResponse;
type index_d$5_V3BulkUpdateProductsByFilterResponseNonNullableFields = V3BulkUpdateProductsByFilterResponseNonNullableFields;
type index_d$5_V3CountProductsRequest = V3CountProductsRequest;
type index_d$5_V3CountProductsResponse = V3CountProductsResponse;
type index_d$5_V3CountProductsResponseNonNullableFields = V3CountProductsResponseNonNullableFields;
type index_d$5_V3DeleteProductRequest = V3DeleteProductRequest;
type index_d$5_V3DeleteProductResponse = V3DeleteProductResponse;
type index_d$5_V3GetProductBySlugRequest = V3GetProductBySlugRequest;
type index_d$5_V3GetProductBySlugResponse = V3GetProductBySlugResponse;
type index_d$5_V3GetProductBySlugResponseNonNullableFields = V3GetProductBySlugResponseNonNullableFields;
type index_d$5_V3GetProductRequest = V3GetProductRequest;
type index_d$5_V3GetProductResponse = V3GetProductResponse;
type index_d$5_V3GetProductResponseNonNullableFields = V3GetProductResponseNonNullableFields;
type index_d$5_V3MaskedProduct = V3MaskedProduct;
type index_d$5_V3OptionChoiceIds = V3OptionChoiceIds;
type index_d$5_V3OptionChoiceNames = V3OptionChoiceNames;
type index_d$5_V3Product = V3Product;
type index_d$5_V3ProductIdWithRevision = V3ProductIdWithRevision;
type index_d$5_V3ProductNonNullableFields = V3ProductNonNullableFields;
type index_d$5_V3ProductTypedPropertiesOneOf = V3ProductTypedPropertiesOneOf;
type index_d$5_V3QueryProductsRequest = V3QueryProductsRequest;
type index_d$5_V3QueryProductsResponse = V3QueryProductsResponse;
type index_d$5_V3QueryProductsResponseNonNullableFields = V3QueryProductsResponseNonNullableFields;
type index_d$5_V3SearchProductsRequest = V3SearchProductsRequest;
type index_d$5_V3SearchProductsResponse = V3SearchProductsResponse;
type index_d$5_V3SearchProductsResponseNonNullableFields = V3SearchProductsResponseNonNullableFields;
type index_d$5_V3UnsignedAdjustValue = V3UnsignedAdjustValue;
type index_d$5_V3UnsignedAdjustValueAdjustValueOneOf = V3UnsignedAdjustValueAdjustValueOneOf;
type index_d$5_V3UpdateExtendedFieldsRequest = V3UpdateExtendedFieldsRequest;
type index_d$5_V3UpdateExtendedFieldsResponse = V3UpdateExtendedFieldsResponse;
type index_d$5_V3UpdateExtendedFieldsResponseNonNullableFields = V3UpdateExtendedFieldsResponseNonNullableFields;
type index_d$5_V3VariantsInfo = V3VariantsInfo;
type index_d$5_ValueAggregation = ValueAggregation;
type index_d$5_ValueAggregationIncludeMissingValuesOptions = ValueAggregationIncludeMissingValuesOptions;
type index_d$5_ValueAggregationMissingValues = ValueAggregationMissingValues;
declare const index_d$5_ValueAggregationMissingValues: typeof ValueAggregationMissingValues;
type index_d$5_ValueAggregationOptionsOneOf = ValueAggregationOptionsOneOf;
type index_d$5_ValueAggregationResult = ValueAggregationResult;
type index_d$5_ValueAggregationSortDirection = ValueAggregationSortDirection;
declare const index_d$5_ValueAggregationSortDirection: typeof ValueAggregationSortDirection;
type index_d$5_ValueAggregationSortType = ValueAggregationSortType;
declare const index_d$5_ValueAggregationSortType: typeof ValueAggregationSortType;
type index_d$5_ValueResult = ValueResult;
type index_d$5_ValueResults = ValueResults;
type index_d$5_ValueResultsValueAggregationResult = ValueResultsValueAggregationResult;
type index_d$5_Variant = Variant;
type index_d$5_VariantDigitalProperties = VariantDigitalProperties;
type index_d$5_VariantNotAlignedWithProduct = VariantNotAlignedWithProduct;
type index_d$5_VariantPhysicalProperties = VariantPhysicalProperties;
type index_d$5_VariantSummary = VariantSummary;
type index_d$5_VariantTypedPropertiesOneOf = VariantTypedPropertiesOneOf;
type index_d$5_VariantWithInventory = VariantWithInventory;
type index_d$5_VariantWithInventoryTypedPropertiesOneOf = VariantWithInventoryTypedPropertiesOneOf;
type index_d$5_VariantsCursorPaging = VariantsCursorPaging;
type index_d$5_VariantsInfo = VariantsInfo;
type index_d$5_VariantsNotAlignedWithProduct = VariantsNotAlignedWithProduct;
type index_d$5_VariantsOpsRequestedFields = VariantsOpsRequestedFields;
declare const index_d$5_VariantsOpsRequestedFields: typeof VariantsOpsRequestedFields;
type index_d$5_VerticalAlignment = VerticalAlignment;
declare const index_d$5_VerticalAlignment: typeof VerticalAlignment;
type index_d$5_Video = Video;
type index_d$5_VideoData = VideoData;
type index_d$5_VideoResolution = VideoResolution;
type index_d$5_ViewMode = ViewMode;
declare const index_d$5_ViewMode: typeof ViewMode;
type index_d$5_ViewRole = ViewRole;
declare const index_d$5_ViewRole: typeof ViewRole;
type index_d$5_VoteRole = VoteRole;
declare const index_d$5_VoteRole: typeof VoteRole;
type index_d$5_WeightMeasurementUnitInfo = WeightMeasurementUnitInfo;
type index_d$5_WeightRange = WeightRange;
type index_d$5_WeightUnit = WeightUnit;
declare const index_d$5_WeightUnit: typeof WeightUnit;
type index_d$5_Width = Width;
declare const index_d$5_Width: typeof Width;
type index_d$5_WidthType = WidthType;
declare const index_d$5_WidthType: typeof WidthType;
type index_d$5_WixCommonAggregation = WixCommonAggregation;
type index_d$5_WixCommonAggregationKindOneOf = WixCommonAggregationKindOneOf;
type index_d$5_WixCommonAggregationType = WixCommonAggregationType;
declare const index_d$5_WixCommonAggregationType: typeof WixCommonAggregationType;
type index_d$5_WixCommonItemMetadata = WixCommonItemMetadata;
type index_d$5_WixCommonScalarType = WixCommonScalarType;
declare const index_d$5_WixCommonScalarType: typeof WixCommonScalarType;
type index_d$5_WixCommonSearchDetails = WixCommonSearchDetails;
type index_d$5_WixCommonSortOrder = WixCommonSortOrder;
declare const index_d$5_WixCommonSortOrder: typeof WixCommonSortOrder;
type index_d$5_WixCommonSorting = WixCommonSorting;
type index_d$5__publicOnProductCreatedType = _publicOnProductCreatedType;
type index_d$5__publicOnProductDeletedType = _publicOnProductDeletedType;
type index_d$5__publicOnProductUpdatedType = _publicOnProductUpdatedType;
declare const index_d$5_bulkAddInfoSectionsToProducts: typeof bulkAddInfoSectionsToProducts;
declare const index_d$5_bulkAddInfoSectionsToProductsByFilter: typeof bulkAddInfoSectionsToProductsByFilter;
declare const index_d$5_bulkAddProductsToCategoriesByFilter: typeof bulkAddProductsToCategoriesByFilter;
declare const index_d$5_bulkAdjustProductVariantsByFilter: typeof bulkAdjustProductVariantsByFilter;
declare const index_d$5_bulkCreateProducts: typeof bulkCreateProducts;
declare const index_d$5_bulkCreateProductsWithInventory: typeof bulkCreateProductsWithInventory;
declare const index_d$5_bulkDeleteProducts: typeof bulkDeleteProducts;
declare const index_d$5_bulkDeleteProductsByFilter: typeof bulkDeleteProductsByFilter;
declare const index_d$5_bulkRemoveInfoSectionsFromProducts: typeof bulkRemoveInfoSectionsFromProducts;
declare const index_d$5_bulkRemoveInfoSectionsFromProductsByFilter: typeof bulkRemoveInfoSectionsFromProductsByFilter;
declare const index_d$5_bulkRemoveProductsFromCategoriesByFilter: typeof bulkRemoveProductsFromCategoriesByFilter;
declare const index_d$5_bulkUpdateProductVariantsByFilter: typeof bulkUpdateProductVariantsByFilter;
declare const index_d$5_bulkUpdateProducts: typeof bulkUpdateProducts;
declare const index_d$5_bulkUpdateProductsByFilter: typeof bulkUpdateProductsByFilter;
declare const index_d$5_bulkUpdateProductsWithInventory: typeof bulkUpdateProductsWithInventory;
declare const index_d$5_countProducts: typeof countProducts;
declare const index_d$5_createProduct: typeof createProduct;
declare const index_d$5_createProductWithInventory: typeof createProductWithInventory;
declare const index_d$5_deleteProduct: typeof deleteProduct;
declare const index_d$5_getProduct: typeof getProduct;
declare const index_d$5_getProductBySlug: typeof getProductBySlug;
declare const index_d$5_onProductCreated: typeof onProductCreated;
declare const index_d$5_onProductDeleted: typeof onProductDeleted;
declare const index_d$5_onProductUpdated: typeof onProductUpdated;
declare const index_d$5_queryProducts: typeof queryProducts;
declare const index_d$5_searchProducts: typeof searchProducts;
declare const index_d$5_updateExtendedFields: typeof updateExtendedFields;
declare const index_d$5_updateProduct: typeof updateProduct;
declare const index_d$5_updateProductWithInventory: typeof updateProductWithInventory;
declare namespace index_d$5 {
  export { type ActionEvent$2 as ActionEvent, type index_d$5_AdjustValue as AdjustValue, type index_d$5_AdjustValueAdjustValueOneOf as AdjustValueAdjustValueOneOf, type index_d$5_Aggregation as Aggregation, type index_d$5_AggregationData as AggregationData, type index_d$5_AggregationDataAggregationResults as AggregationDataAggregationResults, type index_d$5_AggregationDataAggregationResultsResultOneOf as AggregationDataAggregationResultsResultOneOf, type index_d$5_AggregationDataAggregationResultsScalarResult as AggregationDataAggregationResultsScalarResult, type index_d$5_AggregationDateHistogramAggregation as AggregationDateHistogramAggregation, index_d$5_AggregationDateHistogramAggregationInterval as AggregationDateHistogramAggregationInterval, type index_d$5_AggregationKindOneOf as AggregationKindOneOf, type index_d$5_AggregationNestedAggregation as AggregationNestedAggregation, type index_d$5_AggregationNestedAggregationNestedAggregationItem as AggregationNestedAggregationNestedAggregationItem, type index_d$5_AggregationNestedAggregationNestedAggregationItemKindOneOf as AggregationNestedAggregationNestedAggregationItemKindOneOf, index_d$5_AggregationNestedAggregationNestedAggregationType as AggregationNestedAggregationNestedAggregationType, type index_d$5_AggregationRangeAggregation as AggregationRangeAggregation, type index_d$5_AggregationRangeAggregationRangeBucket as AggregationRangeAggregationRangeBucket, type index_d$5_AggregationResults as AggregationResults, type index_d$5_AggregationResultsDateHistogramResults as AggregationResultsDateHistogramResults, type index_d$5_AggregationResultsGroupByValueResults as AggregationResultsGroupByValueResults, type index_d$5_AggregationResultsNestedAggregationResults as AggregationResultsNestedAggregationResults, type index_d$5_AggregationResultsNestedAggregationResultsResultOneOf as AggregationResultsNestedAggregationResultsResultOneOf, type index_d$5_AggregationResultsNestedResults as AggregationResultsNestedResults, type index_d$5_AggregationResultsRangeResults as AggregationResultsRangeResults, type index_d$5_AggregationResultsResultOneOf as AggregationResultsResultOneOf, type index_d$5_AggregationResultsScalarResult as AggregationResultsScalarResult, type index_d$5_AggregationResultsValueResults as AggregationResultsValueResults, type index_d$5_AggregationScalarAggregation as AggregationScalarAggregation, index_d$5_AggregationType as AggregationType, type index_d$5_AggregationValueAggregation as AggregationValueAggregation, type index_d$5_AggregationValueAggregationIncludeMissingValuesOptions as AggregationValueAggregationIncludeMissingValuesOptions, index_d$5_AggregationValueAggregationMissingValues as AggregationValueAggregationMissingValues, type index_d$5_AggregationValueAggregationOptionsOneOf as AggregationValueAggregationOptionsOneOf, index_d$5_AggregationValueAggregationSortDirection as AggregationValueAggregationSortDirection, index_d$5_AggregationValueAggregationSortType as AggregationValueAggregationSortType, index_d$5_Alignment as Alignment, type index_d$5_AnchorData as AnchorData, type App$2 as App, type index_d$5_AppEmbedData as AppEmbedData, type index_d$5_AppEmbedDataAppDataOneOf as AppEmbedDataAppDataOneOf, index_d$5_AppType as AppType, type ApplicationError$1 as ApplicationError, type index_d$5_AudioData as AudioData, index_d$5_AvailabilityStatus as AvailabilityStatus, type index_d$5_Background as Background, type index_d$5_BackgroundBackgroundOneOf as BackgroundBackgroundOneOf, index_d$5_BackgroundType as BackgroundType, type BaseEventMetadata$2 as BaseEventMetadata, type index_d$5_BlockquoteData as BlockquoteData, type index_d$5_BookingData as BookingData, type index_d$5_Border as Border, type index_d$5_BorderColors as BorderColors, type index_d$5_Brand as Brand, type index_d$5_BreadCrumb as BreadCrumb, type index_d$5_BreadcrumbsInfo as BreadcrumbsInfo, type BulkActionMetadata$1 as BulkActionMetadata, type index_d$5_BulkAddInfoSectionsToProductsByFilterOptions as BulkAddInfoSectionsToProductsByFilterOptions, type index_d$5_BulkAddInfoSectionsToProductsByFilterRequest as BulkAddInfoSectionsToProductsByFilterRequest, type index_d$5_BulkAddInfoSectionsToProductsByFilterResponse as BulkAddInfoSectionsToProductsByFilterResponse, type index_d$5_BulkAddInfoSectionsToProductsOptions as BulkAddInfoSectionsToProductsOptions, type index_d$5_BulkAddInfoSectionsToProductsRequest as BulkAddInfoSectionsToProductsRequest, type index_d$5_BulkAddInfoSectionsToProductsResponse as BulkAddInfoSectionsToProductsResponse, type index_d$5_BulkAddProductsToCategoriesByFilterOptions as BulkAddProductsToCategoriesByFilterOptions, type index_d$5_BulkAddProductsToCategoriesByFilterRequest as BulkAddProductsToCategoriesByFilterRequest, type index_d$5_BulkAddProductsToCategoriesByFilterResponse as BulkAddProductsToCategoriesByFilterResponse, type index_d$5_BulkAddProductsToCategoriesByFilterResponseNonNullableFields as BulkAddProductsToCategoriesByFilterResponseNonNullableFields, type index_d$5_BulkAdjustProductVariantsByFilterOptions as BulkAdjustProductVariantsByFilterOptions, type index_d$5_BulkAdjustProductVariantsByFilterRequest as BulkAdjustProductVariantsByFilterRequest, index_d$5_BulkAdjustProductVariantsByFilterRequestRoundingStrategy as BulkAdjustProductVariantsByFilterRequestRoundingStrategy, type index_d$5_BulkAdjustProductVariantsByFilterResponse as BulkAdjustProductVariantsByFilterResponse, type index_d$5_BulkAdjustProductVariantsByFilterResponseNonNullableFields as BulkAdjustProductVariantsByFilterResponseNonNullableFields, type index_d$5_BulkAdjustVariantsByFilterRequest as BulkAdjustVariantsByFilterRequest, type index_d$5_BulkAdjustVariantsByFilterResponse as BulkAdjustVariantsByFilterResponse, type index_d$5_BulkCreateProductsOptions as BulkCreateProductsOptions, type index_d$5_BulkCreateProductsRequest as BulkCreateProductsRequest, type index_d$5_BulkCreateProductsResponse as BulkCreateProductsResponse, type index_d$5_BulkCreateProductsResponseNonNullableFields as BulkCreateProductsResponseNonNullableFields, type index_d$5_BulkCreateProductsWithInventoryOptions as BulkCreateProductsWithInventoryOptions, type index_d$5_BulkCreateProductsWithInventoryRequest as BulkCreateProductsWithInventoryRequest, type index_d$5_BulkCreateProductsWithInventoryResponse as BulkCreateProductsWithInventoryResponse, type index_d$5_BulkCreateProductsWithInventoryResponseNonNullableFields as BulkCreateProductsWithInventoryResponseNonNullableFields, type index_d$5_BulkDeleteProductsByFilterOptions as BulkDeleteProductsByFilterOptions, type index_d$5_BulkDeleteProductsByFilterRequest as BulkDeleteProductsByFilterRequest, type index_d$5_BulkDeleteProductsByFilterResponse as BulkDeleteProductsByFilterResponse, type index_d$5_BulkDeleteProductsRequest as BulkDeleteProductsRequest, type index_d$5_BulkDeleteProductsResponse as BulkDeleteProductsResponse, type index_d$5_BulkDeleteProductsResponseBulkProductResult as BulkDeleteProductsResponseBulkProductResult, type index_d$5_BulkInventoryItemAction as BulkInventoryItemAction, type index_d$5_BulkInventoryItemResult as BulkInventoryItemResult, type index_d$5_BulkInventoryItemResults as BulkInventoryItemResults, type index_d$5_BulkProductResult as BulkProductResult, type index_d$5_BulkProductResults as BulkProductResults, type index_d$5_BulkRemoveInfoSectionsFromProductsByFilterOptions as BulkRemoveInfoSectionsFromProductsByFilterOptions, type index_d$5_BulkRemoveInfoSectionsFromProductsByFilterRequest as BulkRemoveInfoSectionsFromProductsByFilterRequest, type index_d$5_BulkRemoveInfoSectionsFromProductsByFilterResponse as BulkRemoveInfoSectionsFromProductsByFilterResponse, type index_d$5_BulkRemoveInfoSectionsFromProductsOptions as BulkRemoveInfoSectionsFromProductsOptions, type index_d$5_BulkRemoveInfoSectionsFromProductsRequest as BulkRemoveInfoSectionsFromProductsRequest, type index_d$5_BulkRemoveInfoSectionsFromProductsResponse as BulkRemoveInfoSectionsFromProductsResponse, type index_d$5_BulkRemoveProductsFromCategoriesByFilterOptions as BulkRemoveProductsFromCategoriesByFilterOptions, type index_d$5_BulkRemoveProductsFromCategoriesByFilterRequest as BulkRemoveProductsFromCategoriesByFilterRequest, type index_d$5_BulkRemoveProductsFromCategoriesByFilterResponse as BulkRemoveProductsFromCategoriesByFilterResponse, type index_d$5_BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields as BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields, type index_d$5_BulkUpdateProductVariantsByFilterOptions as BulkUpdateProductVariantsByFilterOptions, type index_d$5_BulkUpdateProductVariantsByFilterRequest as BulkUpdateProductVariantsByFilterRequest, type index_d$5_BulkUpdateProductVariantsByFilterResponse as BulkUpdateProductVariantsByFilterResponse, type index_d$5_BulkUpdateProductVariantsByFilterResponseNonNullableFields as BulkUpdateProductVariantsByFilterResponseNonNullableFields, type index_d$5_BulkUpdateProductsByFilterOptions as BulkUpdateProductsByFilterOptions, type index_d$5_BulkUpdateProductsByFilterRequest as BulkUpdateProductsByFilterRequest, type index_d$5_BulkUpdateProductsByFilterResponse as BulkUpdateProductsByFilterResponse, type index_d$5_BulkUpdateProductsOptions as BulkUpdateProductsOptions, type index_d$5_BulkUpdateProductsRequest as BulkUpdateProductsRequest, type index_d$5_BulkUpdateProductsResponse as BulkUpdateProductsResponse, type index_d$5_BulkUpdateProductsResponseNonNullableFields as BulkUpdateProductsResponseNonNullableFields, type index_d$5_BulkUpdateProductsWithInventoryOptions as BulkUpdateProductsWithInventoryOptions, type index_d$5_BulkUpdateProductsWithInventoryRequest as BulkUpdateProductsWithInventoryRequest, type index_d$5_BulkUpdateProductsWithInventoryResponse as BulkUpdateProductsWithInventoryResponse, type index_d$5_BulkUpdateProductsWithInventoryResponseNonNullableFields as BulkUpdateProductsWithInventoryResponseNonNullableFields, type index_d$5_BulkUpdateVariantsByFilterRequest as BulkUpdateVariantsByFilterRequest, type index_d$5_BulkUpdateVariantsByFilterResponse as BulkUpdateVariantsByFilterResponse, type index_d$5_BulletedListData as BulletedListData, type index_d$5_ButtonData as ButtonData, type index_d$5_CaptionData as CaptionData, type index_d$5_CatalogV3BulkProductResult as CatalogV3BulkProductResult, type index_d$5_CellStyle as CellStyle, index_d$5_ChoiceType as ChoiceType, type index_d$5_ChoicesSettings as ChoicesSettings, type index_d$5_CodeBlockData as CodeBlockData, type index_d$5_CollapsibleListData as CollapsibleListData, type index_d$5_ColorData as ColorData, type index_d$5_Colors as Colors, type index_d$5_CommonAggregation as CommonAggregation, type index_d$5_CommonAggregationData as CommonAggregationData, type index_d$5_CommonAggregationDateHistogramAggregation as CommonAggregationDateHistogramAggregation, type index_d$5_CommonAggregationKindOneOf as CommonAggregationKindOneOf, type index_d$5_CommonAggregationNestedAggregation as CommonAggregationNestedAggregation, type index_d$5_CommonAggregationRangeAggregation as CommonAggregationRangeAggregation, type index_d$5_CommonAggregationScalarAggregation as CommonAggregationScalarAggregation, index_d$5_CommonAggregationType as CommonAggregationType, type index_d$5_CommonAggregationValueAggregation as CommonAggregationValueAggregation, type index_d$5_CommonAggregationValueAggregationOptionsOneOf as CommonAggregationValueAggregationOptionsOneOf, type index_d$5_CommonBulkActionMetadata as CommonBulkActionMetadata, type index_d$5_CommonCursorPaging as CommonCursorPaging, type index_d$5_CommonCursorPagingMetadata as CommonCursorPagingMetadata, type index_d$5_CommonCursorQuery as CommonCursorQuery, type index_d$5_CommonCursorQueryPagingMethodOneOf as CommonCursorQueryPagingMethodOneOf, type index_d$5_CommonCursorSearch as CommonCursorSearch, type index_d$5_CommonCursorSearchPagingMethodOneOf as CommonCursorSearchPagingMethodOneOf, type index_d$5_CommonCursors as CommonCursors, type index_d$5_CommonItemMetadata as CommonItemMetadata, index_d$5_CommonScalarType as CommonScalarType, type index_d$5_CommonSearchDetails as CommonSearchDetails, index_d$5_CommonSearchDetailsMode as CommonSearchDetailsMode, index_d$5_CommonSortOrder as CommonSortOrder, type index_d$5_CommonSorting as CommonSorting, type index_d$5_ConnectedModifier as ConnectedModifier, type index_d$5_ConnectedModifierChoice as ConnectedModifierChoice, type index_d$5_ConnectedModifierChoiceValueOneOf as ConnectedModifierChoiceValueOneOf, type index_d$5_ConnectedModifierModifierSettingsOneOf as ConnectedModifierModifierSettingsOneOf, type index_d$5_ConnectedOption as ConnectedOption, type index_d$5_ConnectedOptionChoice as ConnectedOptionChoice, type index_d$5_ConnectedOptionChoiceValueOneOf as ConnectedOptionChoiceValueOneOf, type index_d$5_ConnectedOptionOptionSettingsOneOf as ConnectedOptionOptionSettingsOneOf, type index_d$5_CountProductsOptions as CountProductsOptions, type index_d$5_CountProductsRequest as CountProductsRequest, type index_d$5_CountProductsResponse as CountProductsResponse, type index_d$5_CreateProductOptions as CreateProductOptions, type index_d$5_CreateProductRequest as CreateProductRequest, type index_d$5_CreateProductResponse as CreateProductResponse, type index_d$5_CreateProductResponseNonNullableFields as CreateProductResponseNonNullableFields, type index_d$5_CreateProductWithInventoryOptions as CreateProductWithInventoryOptions, type index_d$5_CreateProductWithInventoryRequest as CreateProductWithInventoryRequest, type index_d$5_CreateProductWithInventoryResponse as CreateProductWithInventoryResponse, type index_d$5_CreateProductWithInventoryResponseNonNullableFields as CreateProductWithInventoryResponseNonNullableFields, index_d$5_Crop as Crop, type CursorPaging$2 as CursorPaging, type CursorPagingMetadata$2 as CursorPagingMetadata, type CursorQuery$2 as CursorQuery, type CursorQueryPagingMethodOneOf$2 as CursorQueryPagingMethodOneOf, type index_d$5_CursorSearch as CursorSearch, type index_d$5_CursorSearchPagingMethodOneOf as CursorSearchPagingMethodOneOf, type Cursors$2 as Cursors, type index_d$5_DateHistogramAggregation as DateHistogramAggregation, index_d$5_DateHistogramAggregationInterval as DateHistogramAggregationInterval, type index_d$5_DateHistogramResult as DateHistogramResult, type index_d$5_DateHistogramResults as DateHistogramResults, type index_d$5_DateHistogramResultsDateHistogramResult as DateHistogramResultsDateHistogramResult, type index_d$5_Decoration as Decoration, type index_d$5_DecorationDataOneOf as DecorationDataOneOf, index_d$5_DecorationType as DecorationType, type index_d$5_DeleteByFilterOperation as DeleteByFilterOperation, type index_d$5_DeleteByIdsOperation as DeleteByIdsOperation, type index_d$5_DeleteProductRequest as DeleteProductRequest, type index_d$5_DeleteProductResponse as DeleteProductResponse, type index_d$5_DeprecatedSearchProductsWithOffsetRequest as DeprecatedSearchProductsWithOffsetRequest, type index_d$5_DeprecatedSearchProductsWithOffsetResponse as DeprecatedSearchProductsWithOffsetResponse, type index_d$5_Design as Design, type index_d$5_Dimensions as Dimensions, index_d$5_Direction as Direction, DiscountType$1 as DiscountType, type index_d$5_DividerData as DividerData, type index_d$5_DoNotCallBulkCreateProductsRequest as DoNotCallBulkCreateProductsRequest, type index_d$5_DoNotCallBulkCreateProductsResponse as DoNotCallBulkCreateProductsResponse, type index_d$5_DoNotCallBulkUpdateProductsRequest as DoNotCallBulkUpdateProductsRequest, type index_d$5_DoNotCallBulkUpdateProductsResponse as DoNotCallBulkUpdateProductsResponse, type index_d$5_DoNotCallCreateProductRequest as DoNotCallCreateProductRequest, type index_d$5_DoNotCallCreateProductResponse as DoNotCallCreateProductResponse, type index_d$5_DoNotCallUpdateProductRequest as DoNotCallUpdateProductRequest, type index_d$5_DoNotCallUpdateProductResponse as DoNotCallUpdateProductResponse, type index_d$5_DocumentImage as DocumentImage, type index_d$5_DocumentPayload as DocumentPayload, type index_d$5_DocumentStyle as DocumentStyle, type index_d$5_DocumentUpdateOperation as DocumentUpdateOperation, type DomainEvent$2 as DomainEvent, type DomainEventBodyOneOf$2 as DomainEventBodyOneOf, type index_d$5_EmbedData as EmbedData, type Empty$3 as Empty, type EntityCreatedEvent$2 as EntityCreatedEvent, type EntityDeletedEvent$2 as EntityDeletedEvent, type EntityUpdatedEvent$2 as EntityUpdatedEvent, index_d$5_Enum as Enum, type index_d$5_EventData as EventData, type EventMetadata$1 as EventMetadata, type index_d$5_EventuallyConsistentQueryProductsRequest as EventuallyConsistentQueryProductsRequest, type index_d$5_EventuallyConsistentQueryProductsResponse as EventuallyConsistentQueryProductsResponse, type index_d$5_ExtendedFields as ExtendedFields, type File$2 as File, type index_d$5_FileData as FileData, type index_d$5_FileSource as FileSource, type index_d$5_FileSourceDataOneOf as FileSourceDataOneOf, index_d$5_FileType as FileType, type index_d$5_FixedMonetaryAmount as FixedMonetaryAmount, type index_d$5_FontSizeData as FontSizeData, index_d$5_FontType as FontType, type index_d$5_FreeTextSettings as FreeTextSettings, type index_d$5_FulfillerDeleted as FulfillerDeleted, type index_d$5_GIF as GIF, type index_d$5_GIFData as GIFData, type index_d$5_GalleryData as GalleryData, type index_d$5_GalleryOptions as GalleryOptions, type index_d$5_GetProductBySlugOptions as GetProductBySlugOptions, type index_d$5_GetProductBySlugRequest as GetProductBySlugRequest, type index_d$5_GetProductBySlugResponse as GetProductBySlugResponse, type index_d$5_GetProductOptions as GetProductOptions, type index_d$5_GetProductRequest as GetProductRequest, type index_d$5_GetProductResponse as GetProductResponse, type index_d$5_Gradient as Gradient, type index_d$5_GroupByAggregation as GroupByAggregation, type index_d$5_GroupByAggregationKindOneOf as GroupByAggregationKindOneOf, type index_d$5_GroupByValueResults as GroupByValueResults, type index_d$5_GroupByValueResultsNestedValueAggregationResult as GroupByValueResultsNestedValueAggregationResult, type index_d$5_HTMLData as HTMLData, type index_d$5_HTMLDataDataOneOf as HTMLDataDataOneOf, type index_d$5_HeadingData as HeadingData, type index_d$5_Height as Height, type IdentificationData$4 as IdentificationData, type IdentificationDataIdOneOf$4 as IdentificationDataIdOneOf, type index_d$5_Image as Image, type index_d$5_ImageData as ImageData, type index_d$5_IncludeMissingValuesOptions as IncludeMissingValuesOptions, type index_d$5_IndexDocument as IndexDocument, type index_d$5_InfoSection as InfoSection, index_d$5_InitialExpandedItems as InitialExpandedItems, index_d$5_Interval as Interval, type InvalidateCache$2 as InvalidateCache, type InvalidateCacheGetByOneOf$2 as InvalidateCacheGetByOneOf, type index_d$5_Inventory as Inventory, index_d$5_InventoryAvailabilityStatus as InventoryAvailabilityStatus, type index_d$5_InventoryItem as InventoryItem, type index_d$5_InventoryItemComposite as InventoryItemComposite, type index_d$5_InventoryItemCompositeTrackingMethodOneOf as InventoryItemCompositeTrackingMethodOneOf, type index_d$5_InventoryItemTrackingMethodOneOf as InventoryItemTrackingMethodOneOf, type index_d$5_InventoryStatus as InventoryStatus, type index_d$5_Item as Item, type index_d$5_ItemDataOneOf as ItemDataOneOf, type ItemMetadata$1 as ItemMetadata, type index_d$5_ItemStyle as ItemStyle, type index_d$5_Keyword as Keyword, type index_d$5_Layout as Layout, index_d$5_LayoutType as LayoutType, index_d$5_LineStyle as LineStyle, type index_d$5_Link as Link, type index_d$5_LinkData as LinkData, type index_d$5_LinkDataOneOf as LinkDataOneOf, type index_d$5_LinkPreviewData as LinkPreviewData, type index_d$5_ListValue as ListValue, type index_d$5_MapData as MapData, type index_d$5_MapSettings as MapSettings, index_d$5_MapType as MapType, type index_d$5_MaskedProduct as MaskedProduct, type index_d$5_MaskedProductWithInventory as MaskedProductWithInventory, index_d$5_MeasurementUnit as MeasurementUnit, type index_d$5_Media as Media, type index_d$5_MediaItemsInfo as MediaItemsInfo, index_d$5_MediaType as MediaType, type index_d$5_MentionData as MentionData, type MessageEnvelope$4 as MessageEnvelope, type index_d$5_Metadata as Metadata, type index_d$5_MinVariantPriceInfo as MinVariantPriceInfo, index_d$5_MissingValues as MissingValues, index_d$5_Mode as Mode, type index_d$5_ModifierChoicesSettings as ModifierChoicesSettings, index_d$5_ModifierRenderType as ModifierRenderType, type index_d$5_MultipleColors as MultipleColors, type index_d$5_NestedAggregation as NestedAggregation, type index_d$5_NestedAggregationItem as NestedAggregationItem, type index_d$5_NestedAggregationItemKindOneOf as NestedAggregationItemKindOneOf, type index_d$5_NestedAggregationNestedAggregationItem as NestedAggregationNestedAggregationItem, type index_d$5_NestedAggregationNestedAggregationItemKindOneOf as NestedAggregationNestedAggregationItemKindOneOf, index_d$5_NestedAggregationNestedAggregationType as NestedAggregationNestedAggregationType, type index_d$5_NestedAggregationResults as NestedAggregationResults, type index_d$5_NestedAggregationResultsResultOneOf as NestedAggregationResultsResultOneOf, index_d$5_NestedAggregationType as NestedAggregationType, type index_d$5_NestedResultValue as NestedResultValue, type index_d$5_NestedResultValueResultOneOf as NestedResultValueResultOneOf, type index_d$5_NestedResults as NestedResults, type index_d$5_NestedResultsNestedResultValue as NestedResultsNestedResultValue, type index_d$5_NestedResultsNestedResultValueResultOneOf as NestedResultsNestedResultValueResultOneOf, type index_d$5_NestedResultsRangeResult as NestedResultsRangeResult, type index_d$5_NestedResultsResults as NestedResultsResults, type index_d$5_NestedResultsScalarResult as NestedResultsScalarResult, type index_d$5_NestedResultsValueResult as NestedResultsValueResult, type index_d$5_NestedValueAggregationResult as NestedValueAggregationResult, type index_d$5_Node as Node, type index_d$5_NodeDataOneOf as NodeDataOneOf, type index_d$5_NodeStyle as NodeStyle, index_d$5_NodeType as NodeType, index_d$5_NullValue as NullValue, type index_d$5_Oembed as Oembed, type index_d$5_Option as Option, type index_d$5_OptionChoice as OptionChoice, type index_d$5_OptionChoiceIds as OptionChoiceIds, type index_d$5_OptionChoiceNames as OptionChoiceNames, type index_d$5_OptionChoiceReferences as OptionChoiceReferences, type index_d$5_OptionDesign as OptionDesign, type index_d$5_OptionLayout as OptionLayout, type index_d$5_OrderedListData as OrderedListData, index_d$5_Orientation as Orientation, type index_d$5_PDFSettings as PDFSettings, type Page$2 as Page, type PagingMetadata$2 as PagingMetadata, type index_d$5_ParagraphData as ParagraphData, type index_d$5_Permissions as Permissions, type index_d$5_PhysicalProperties as PhysicalProperties, type index_d$5_PlatformOffsetSearch as PlatformOffsetSearch, type index_d$5_PlatformOffsetSearchPagingMethodOneOf as PlatformOffsetSearchPagingMethodOneOf, type index_d$5_PlatformPaging as PlatformPaging, type index_d$5_PlaybackOptions as PlaybackOptions, type index_d$5_PluginContainerData as PluginContainerData, index_d$5_PluginContainerDataAlignment as PluginContainerDataAlignment, type index_d$5_PluginContainerDataWidth as PluginContainerDataWidth, type index_d$5_PluginContainerDataWidthDataOneOf as PluginContainerDataWidthDataOneOf, type index_d$5_Poll as Poll, type index_d$5_PollData as PollData, type index_d$5_PollDataLayout as PollDataLayout, type index_d$5_PollDesign as PollDesign, type index_d$5_PollLayout as PollLayout, index_d$5_PollLayoutDirection as PollLayoutDirection, index_d$5_PollLayoutType as PollLayoutType, type index_d$5_PollSettings as PollSettings, type PreorderInfo$1 as PreorderInfo, index_d$5_PreorderStatus as PreorderStatus, type index_d$5_PriceInfo as PriceInfo, type index_d$5_PricePerUnit as PricePerUnit, type index_d$5_PricePerUnitRange as PricePerUnitRange, type index_d$5_PricePerUnitRangePricePerUnit as PricePerUnitRangePricePerUnit, type index_d$5_PricePerUnitSettings as PricePerUnitSettings, type index_d$5_PriceRange as PriceRange, type index_d$5_Product as Product, type index_d$5_ProductCategoriesInfo as ProductCategoriesInfo, type index_d$5_ProductCategory as ProductCategory, type index_d$5_ProductCategoryIdsInfo as ProductCategoryIdsInfo, type index_d$5_ProductCreatedEnvelope as ProductCreatedEnvelope, type index_d$5_ProductDeletedEnvelope as ProductDeletedEnvelope, type index_d$5_ProductIdWithRevision as ProductIdWithRevision, type index_d$5_ProductMedia as ProductMedia, type index_d$5_ProductMediaMediaOneOf as ProductMediaMediaOneOf, type index_d$5_ProductMediaSetByOneOf as ProductMediaSetByOneOf, index_d$5_ProductOptionRenderType as ProductOptionRenderType, index_d$5_ProductPreorderAvailability as ProductPreorderAvailability, index_d$5_ProductType as ProductType, type index_d$5_ProductUpdatedEnvelope as ProductUpdatedEnvelope, type index_d$5_ProductVariantIds as ProductVariantIds, type index_d$5_ProductVariants as ProductVariants, type index_d$5_ProductWithInventory as ProductWithInventory, type index_d$5_ProductWithInventoryTypedPropertiesOneOf as ProductWithInventoryTypedPropertiesOneOf, type index_d$5_ProductsQueryBuilder as ProductsQueryBuilder, type index_d$5_ProductsQueryResult as ProductsQueryResult, type index_d$5_QueryProductsOptions as QueryProductsOptions, type index_d$5_QueryProductsRequest as QueryProductsRequest, type index_d$5_QueryProductsResponse as QueryProductsResponse, type index_d$5_RangeAggregation as RangeAggregation, type index_d$5_RangeAggregationRangeBucket as RangeAggregationRangeBucket, type index_d$5_RangeAggregationResult as RangeAggregationResult, type index_d$5_RangeBucket as RangeBucket, type index_d$5_RangeResult as RangeResult, type index_d$5_RangeResults as RangeResults, type index_d$5_RangeResultsRangeAggregationResult as RangeResultsRangeAggregationResult, type index_d$5_Rel as Rel, RequestedFields$1 as RequestedFields, type RestoreInfo$2 as RestoreInfo, type index_d$5_Results as Results, type index_d$5_RetrieveVariantsRequest as RetrieveVariantsRequest, type index_d$5_RetrieveVariantsResponse as RetrieveVariantsResponse, type index_d$5_RevenueDetails as RevenueDetails, type Ribbon$1 as Ribbon, type index_d$5_RichContent as RichContent, index_d$5_RoundingStrategy as RoundingStrategy, type index_d$5_ScalarAggregation as ScalarAggregation, type index_d$5_ScalarResult as ScalarResult, index_d$5_ScalarType as ScalarType, type index_d$5_SearchDetails as SearchDetails, index_d$5_SearchDetailsMode as SearchDetailsMode, type index_d$5_SearchIndexingNotification as SearchIndexingNotification, type index_d$5_SearchProductsOptions as SearchProductsOptions, type index_d$5_SearchProductsRequest as SearchProductsRequest, type index_d$5_SearchProductsResponse as SearchProductsResponse, type index_d$5_SearchRelated as SearchRelated, type index_d$5_SearchRelatedDetails as SearchRelatedDetails, type index_d$5_SearchRelatedProductsRequest as SearchRelatedProductsRequest, type index_d$5_SearchRelatedProductsResponse as SearchRelatedProductsResponse, type index_d$5_SecuredMedia as SecuredMedia, type index_d$5_SeoSchema as SeoSchema, type index_d$5_Settings as Settings, index_d$5_SingleEntityOpsRequestedFields as SingleEntityOpsRequestedFields, index_d$5_SortDirection as SortDirection, SortOrder$2 as SortOrder, index_d$5_SortType as SortType, type Sorting$2 as Sorting, index_d$5_Source as Source, type index_d$5_Spoiler as Spoiler, type index_d$5_SpoilerData as SpoilerData, State$1 as State, type index_d$5_Styles as Styles, type index_d$5_Subscription as Subscription, type index_d$5_SubscriptionCyclesOneOf as SubscriptionCyclesOneOf, type index_d$5_SubscriptionDetails as SubscriptionDetails, type index_d$5_SubscriptionDiscount as SubscriptionDiscount, type index_d$5_SubscriptionDiscountDiscountOneOf as SubscriptionDiscountDiscountOneOf, SubscriptionFrequency$1 as SubscriptionFrequency, type index_d$5_SubscriptionPrice as SubscriptionPrice, type index_d$5_SubscriptionPricePerUnit as SubscriptionPricePerUnit, type index_d$5_SubscriptionPricesInfo as SubscriptionPricesInfo, type index_d$5_TableCellData as TableCellData, type index_d$5_TableData as TableData, type index_d$5_Tag as Tag, index_d$5_Target as Target, index_d$5_TextAlignment as TextAlignment, type index_d$5_TextData as TextData, type index_d$5_TextNodeStyle as TextNodeStyle, type index_d$5_TextStyle as TextStyle, type index_d$5_Thumbnail as Thumbnail, type index_d$5_Thumbnails as Thumbnails, index_d$5_ThumbnailsAlignment as ThumbnailsAlignment, index_d$5_Type as Type, type URI$2 as URI, type index_d$5_UnsignedAdjustValue as UnsignedAdjustValue, type index_d$5_UnsignedAdjustValueAdjustValueOneOf as UnsignedAdjustValueAdjustValueOneOf, type index_d$5_UnsupportedFieldMasks as UnsupportedFieldMasks, type index_d$5_UpdateByFilterOperation as UpdateByFilterOperation, type index_d$5_UpdateDocumentsEvent as UpdateDocumentsEvent, type index_d$5_UpdateDocumentsEventOperationOneOf as UpdateDocumentsEventOperationOneOf, type index_d$5_UpdateExistingOperation as UpdateExistingOperation, type index_d$5_UpdateExtendedFieldsOptions as UpdateExtendedFieldsOptions, type index_d$5_UpdateExtendedFieldsRequest as UpdateExtendedFieldsRequest, type index_d$5_UpdateExtendedFieldsResponse as UpdateExtendedFieldsResponse, type index_d$5_UpdateProduct as UpdateProduct, type index_d$5_UpdateProductOptions as UpdateProductOptions, type index_d$5_UpdateProductRequest as UpdateProductRequest, type index_d$5_UpdateProductResponse as UpdateProductResponse, type index_d$5_UpdateProductResponseNonNullableFields as UpdateProductResponseNonNullableFields, type index_d$5_UpdateProductWithInventoryOptions as UpdateProductWithInventoryOptions, type index_d$5_UpdateProductWithInventoryProduct as UpdateProductWithInventoryProduct, type index_d$5_UpdateProductWithInventoryRequest as UpdateProductWithInventoryRequest, type index_d$5_UpdateProductWithInventoryResponse as UpdateProductWithInventoryResponse, type index_d$5_UpdateProductWithInventoryResponseNonNullableFields as UpdateProductWithInventoryResponseNonNullableFields, type index_d$5_V1Media as V1Media, type index_d$5_V3AdjustValue as V3AdjustValue, type index_d$5_V3AdjustValueAdjustValueOneOf as V3AdjustValueAdjustValueOneOf, type index_d$5_V3BulkAddInfoSectionsToProductsByFilterRequest as V3BulkAddInfoSectionsToProductsByFilterRequest, type index_d$5_V3BulkAddInfoSectionsToProductsByFilterResponse as V3BulkAddInfoSectionsToProductsByFilterResponse, type index_d$5_V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields as V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields, type index_d$5_V3BulkAddInfoSectionsToProductsRequest as V3BulkAddInfoSectionsToProductsRequest, type index_d$5_V3BulkAddInfoSectionsToProductsResponse as V3BulkAddInfoSectionsToProductsResponse, type index_d$5_V3BulkAddInfoSectionsToProductsResponseNonNullableFields as V3BulkAddInfoSectionsToProductsResponseNonNullableFields, type index_d$5_V3BulkDeleteProductsByFilterRequest as V3BulkDeleteProductsByFilterRequest, type index_d$5_V3BulkDeleteProductsByFilterResponse as V3BulkDeleteProductsByFilterResponse, type index_d$5_V3BulkDeleteProductsByFilterResponseNonNullableFields as V3BulkDeleteProductsByFilterResponseNonNullableFields, type index_d$5_V3BulkDeleteProductsRequest as V3BulkDeleteProductsRequest, type index_d$5_V3BulkDeleteProductsResponse as V3BulkDeleteProductsResponse, type index_d$5_V3BulkDeleteProductsResponseNonNullableFields as V3BulkDeleteProductsResponseNonNullableFields, type index_d$5_V3BulkProductResult as V3BulkProductResult, type index_d$5_V3BulkRemoveInfoSectionsFromProductsByFilterRequest as V3BulkRemoveInfoSectionsFromProductsByFilterRequest, type index_d$5_V3BulkRemoveInfoSectionsFromProductsByFilterResponse as V3BulkRemoveInfoSectionsFromProductsByFilterResponse, type index_d$5_V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields as V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields, type index_d$5_V3BulkRemoveInfoSectionsFromProductsRequest as V3BulkRemoveInfoSectionsFromProductsRequest, type index_d$5_V3BulkRemoveInfoSectionsFromProductsResponse as V3BulkRemoveInfoSectionsFromProductsResponse, type index_d$5_V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields as V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields, type index_d$5_V3BulkUpdateProductsByFilterRequest as V3BulkUpdateProductsByFilterRequest, type index_d$5_V3BulkUpdateProductsByFilterResponse as V3BulkUpdateProductsByFilterResponse, type index_d$5_V3BulkUpdateProductsByFilterResponseNonNullableFields as V3BulkUpdateProductsByFilterResponseNonNullableFields, type index_d$5_V3CountProductsRequest as V3CountProductsRequest, type index_d$5_V3CountProductsResponse as V3CountProductsResponse, type index_d$5_V3CountProductsResponseNonNullableFields as V3CountProductsResponseNonNullableFields, type index_d$5_V3DeleteProductRequest as V3DeleteProductRequest, type index_d$5_V3DeleteProductResponse as V3DeleteProductResponse, type index_d$5_V3GetProductBySlugRequest as V3GetProductBySlugRequest, type index_d$5_V3GetProductBySlugResponse as V3GetProductBySlugResponse, type index_d$5_V3GetProductBySlugResponseNonNullableFields as V3GetProductBySlugResponseNonNullableFields, type index_d$5_V3GetProductRequest as V3GetProductRequest, type index_d$5_V3GetProductResponse as V3GetProductResponse, type index_d$5_V3GetProductResponseNonNullableFields as V3GetProductResponseNonNullableFields, type index_d$5_V3MaskedProduct as V3MaskedProduct, type index_d$5_V3OptionChoiceIds as V3OptionChoiceIds, type index_d$5_V3OptionChoiceNames as V3OptionChoiceNames, type index_d$5_V3Product as V3Product, type index_d$5_V3ProductIdWithRevision as V3ProductIdWithRevision, type index_d$5_V3ProductNonNullableFields as V3ProductNonNullableFields, type index_d$5_V3ProductTypedPropertiesOneOf as V3ProductTypedPropertiesOneOf, type index_d$5_V3QueryProductsRequest as V3QueryProductsRequest, type index_d$5_V3QueryProductsResponse as V3QueryProductsResponse, type index_d$5_V3QueryProductsResponseNonNullableFields as V3QueryProductsResponseNonNullableFields, type index_d$5_V3SearchProductsRequest as V3SearchProductsRequest, type index_d$5_V3SearchProductsResponse as V3SearchProductsResponse, type index_d$5_V3SearchProductsResponseNonNullableFields as V3SearchProductsResponseNonNullableFields, type index_d$5_V3UnsignedAdjustValue as V3UnsignedAdjustValue, type index_d$5_V3UnsignedAdjustValueAdjustValueOneOf as V3UnsignedAdjustValueAdjustValueOneOf, type index_d$5_V3UpdateExtendedFieldsRequest as V3UpdateExtendedFieldsRequest, type index_d$5_V3UpdateExtendedFieldsResponse as V3UpdateExtendedFieldsResponse, type index_d$5_V3UpdateExtendedFieldsResponseNonNullableFields as V3UpdateExtendedFieldsResponseNonNullableFields, type index_d$5_V3VariantsInfo as V3VariantsInfo, type index_d$5_ValueAggregation as ValueAggregation, type index_d$5_ValueAggregationIncludeMissingValuesOptions as ValueAggregationIncludeMissingValuesOptions, index_d$5_ValueAggregationMissingValues as ValueAggregationMissingValues, type index_d$5_ValueAggregationOptionsOneOf as ValueAggregationOptionsOneOf, type index_d$5_ValueAggregationResult as ValueAggregationResult, index_d$5_ValueAggregationSortDirection as ValueAggregationSortDirection, index_d$5_ValueAggregationSortType as ValueAggregationSortType, type index_d$5_ValueResult as ValueResult, type index_d$5_ValueResults as ValueResults, type index_d$5_ValueResultsValueAggregationResult as ValueResultsValueAggregationResult, type index_d$5_Variant as Variant, type index_d$5_VariantDigitalProperties as VariantDigitalProperties, type index_d$5_VariantNotAlignedWithProduct as VariantNotAlignedWithProduct, type index_d$5_VariantPhysicalProperties as VariantPhysicalProperties, type index_d$5_VariantSummary as VariantSummary, type index_d$5_VariantTypedPropertiesOneOf as VariantTypedPropertiesOneOf, type index_d$5_VariantWithInventory as VariantWithInventory, type index_d$5_VariantWithInventoryTypedPropertiesOneOf as VariantWithInventoryTypedPropertiesOneOf, type index_d$5_VariantsCursorPaging as VariantsCursorPaging, type index_d$5_VariantsInfo as VariantsInfo, type index_d$5_VariantsNotAlignedWithProduct as VariantsNotAlignedWithProduct, index_d$5_VariantsOpsRequestedFields as VariantsOpsRequestedFields, index_d$5_VerticalAlignment as VerticalAlignment, type index_d$5_Video as Video, type index_d$5_VideoData as VideoData, type index_d$5_VideoResolution as VideoResolution, index_d$5_ViewMode as ViewMode, index_d$5_ViewRole as ViewRole, index_d$5_VoteRole as VoteRole, WebhookIdentityType$4 as WebhookIdentityType, type index_d$5_WeightMeasurementUnitInfo as WeightMeasurementUnitInfo, type index_d$5_WeightRange as WeightRange, index_d$5_WeightUnit as WeightUnit, index_d$5_Width as Width, index_d$5_WidthType as WidthType, type index_d$5_WixCommonAggregation as WixCommonAggregation, type index_d$5_WixCommonAggregationKindOneOf as WixCommonAggregationKindOneOf, index_d$5_WixCommonAggregationType as WixCommonAggregationType, type index_d$5_WixCommonItemMetadata as WixCommonItemMetadata, index_d$5_WixCommonScalarType as WixCommonScalarType, type index_d$5_WixCommonSearchDetails as WixCommonSearchDetails, index_d$5_WixCommonSortOrder as WixCommonSortOrder, type index_d$5_WixCommonSorting as WixCommonSorting, type index_d$5__publicOnProductCreatedType as _publicOnProductCreatedType, type index_d$5__publicOnProductDeletedType as _publicOnProductDeletedType, type index_d$5__publicOnProductUpdatedType as _publicOnProductUpdatedType, index_d$5_bulkAddInfoSectionsToProducts as bulkAddInfoSectionsToProducts, index_d$5_bulkAddInfoSectionsToProductsByFilter as bulkAddInfoSectionsToProductsByFilter, index_d$5_bulkAddProductsToCategoriesByFilter as bulkAddProductsToCategoriesByFilter, index_d$5_bulkAdjustProductVariantsByFilter as bulkAdjustProductVariantsByFilter, index_d$5_bulkCreateProducts as bulkCreateProducts, index_d$5_bulkCreateProductsWithInventory as bulkCreateProductsWithInventory, index_d$5_bulkDeleteProducts as bulkDeleteProducts, index_d$5_bulkDeleteProductsByFilter as bulkDeleteProductsByFilter, index_d$5_bulkRemoveInfoSectionsFromProducts as bulkRemoveInfoSectionsFromProducts, index_d$5_bulkRemoveInfoSectionsFromProductsByFilter as bulkRemoveInfoSectionsFromProductsByFilter, index_d$5_bulkRemoveProductsFromCategoriesByFilter as bulkRemoveProductsFromCategoriesByFilter, index_d$5_bulkUpdateProductVariantsByFilter as bulkUpdateProductVariantsByFilter, index_d$5_bulkUpdateProducts as bulkUpdateProducts, index_d$5_bulkUpdateProductsByFilter as bulkUpdateProductsByFilter, index_d$5_bulkUpdateProductsWithInventory as bulkUpdateProductsWithInventory, index_d$5_countProducts as countProducts, index_d$5_createProduct as createProduct, index_d$5_createProductWithInventory as createProductWithInventory, index_d$5_deleteProduct as deleteProduct, index_d$5_getProduct as getProduct, index_d$5_getProductBySlug as getProductBySlug, index_d$5_onProductCreated as onProductCreated, index_d$5_onProductDeleted as onProductDeleted, index_d$5_onProductUpdated as onProductUpdated, onProductCreated$1 as publicOnProductCreated, onProductDeleted$1 as publicOnProductDeleted, onProductUpdated$1 as publicOnProductUpdated, index_d$5_queryProducts as queryProducts, index_d$5_searchProducts as searchProducts, index_d$5_updateExtendedFields as updateExtendedFields, index_d$5_updateProduct as updateProduct, index_d$5_updateProductWithInventory as updateProductWithInventory };
}

interface Provision {
    /**
     * Provision ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the Provision is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the Provision.
     * Ignored when creating a Provision.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the Provision was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the Provision was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Version of the catalog this store was provisioned on. DO NOT USE unless part of the install flow */
    catalogVersion?: Version;
}
declare enum Version {
    V1_CATALOG = "V1_CATALOG",
    V3_CATALOG = "V3_CATALOG"
}
interface DefaultDeliveryProfileSetup {
    /** metasite id of site */
    metaSiteId?: string | null;
}
interface GetCatalogVersionRequest {
}
interface GetCatalogVersionResponse {
    /** The version of Stores Catalog installed on a site. */
    catalogVersion?: Version;
}
interface ProvisionRequest {
    /** Store this store was cloned from. If store was not cloned, leave empty */
    originalInstanceId?: string | null;
}
interface ProvisionResponse {
    /** The requested Provision. */
    provision?: Provision;
}
interface InstallBassAppDependencyRequest {
}
interface InstallBassAppDependencyResponse {
}
interface MetaSiteSpecialEvent extends MetaSiteSpecialEventPayloadOneOf {
    /** Emitted on a meta site creation. */
    siteCreated?: SiteCreated;
    /** Emitted on a meta site transfer completion. */
    siteTransferred?: SiteTransferred;
    /** Emitted on a meta site deletion. */
    siteDeleted?: SiteDeleted;
    /** Emitted on a meta site restoration. */
    siteUndeleted?: SiteUndeleted;
    /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */
    sitePublished?: SitePublished;
    /** Emitted on a meta site unpublish. */
    siteUnpublished?: SiteUnpublished;
    /** Emitted when meta site is marked as template. */
    siteMarkedAsTemplate?: SiteMarkedAsTemplate;
    /** Emitted when meta site is marked as a WixSite. */
    siteMarkedAsWixSite?: SiteMarkedAsWixSite;
    /** Emitted when an application is provisioned (installed). */
    serviceProvisioned?: ServiceProvisioned;
    /** Emitted when an application is removed (uninstalled). */
    serviceRemoved?: ServiceRemoved;
    /** Emitted when meta site name (URL slug) is changed. */
    siteRenamedPayload?: SiteRenamed;
    /** Emitted when meta site was permanently deleted. */
    hardDeleted?: SiteHardDeleted;
    /** Emitted on a namespace change. */
    namespaceChanged?: NamespaceChanged;
    /** Emitted when Studio is attached. */
    studioAssigned?: StudioAssigned;
    /** Emitted when Studio is detached. */
    studioUnassigned?: StudioUnassigned;
    /** A meta site id. */
    metaSiteId?: string;
    /** A meta site version. Monotonically increasing. */
    version?: string;
    /** A timestamp of the event. */
    timestamp?: string;
    /**
     * TODO(meta-site): Change validation once validations are disabled for consumers
     * More context: https://wix.slack.com/archives/C0UHEBPFT/p1720957844413149 and https://wix.slack.com/archives/CFWKX325T/p1728892152855659
     */
    assets?: Asset[];
}
/** @oneof */
interface MetaSiteSpecialEventPayloadOneOf {
    /** Emitted on a meta site creation. */
    siteCreated?: SiteCreated;
    /** Emitted on a meta site transfer completion. */
    siteTransferred?: SiteTransferred;
    /** Emitted on a meta site deletion. */
    siteDeleted?: SiteDeleted;
    /** Emitted on a meta site restoration. */
    siteUndeleted?: SiteUndeleted;
    /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */
    sitePublished?: SitePublished;
    /** Emitted on a meta site unpublish. */
    siteUnpublished?: SiteUnpublished;
    /** Emitted when meta site is marked as template. */
    siteMarkedAsTemplate?: SiteMarkedAsTemplate;
    /** Emitted when meta site is marked as a WixSite. */
    siteMarkedAsWixSite?: SiteMarkedAsWixSite;
    /** Emitted when an application is provisioned (installed). */
    serviceProvisioned?: ServiceProvisioned;
    /** Emitted when an application is removed (uninstalled). */
    serviceRemoved?: ServiceRemoved;
    /** Emitted when meta site name (URL slug) is changed. */
    siteRenamedPayload?: SiteRenamed;
    /** Emitted when meta site was permanently deleted. */
    hardDeleted?: SiteHardDeleted;
    /** Emitted on a namespace change. */
    namespaceChanged?: NamespaceChanged;
    /** Emitted when Studio is attached. */
    studioAssigned?: StudioAssigned;
    /** Emitted when Studio is detached. */
    studioUnassigned?: StudioUnassigned;
}
interface Asset {
    /** An application definition id (app_id in dev-center). For legacy reasons may be UUID or a string (from Java Enum). */
    appDefId?: string;
    /** An instance id. For legacy reasons may be UUID or a string. */
    instanceId?: string;
    /** An application state. */
    state?: State;
}
declare enum State {
    UNKNOWN = "UNKNOWN",
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    DEMO = "DEMO"
}
interface SiteCreated {
    /** A template identifier (empty if not created from a template). */
    originTemplateId?: string;
    /** An account id of the owner. */
    ownerId?: string;
    /** A context in which meta site was created. */
    context?: SiteCreatedContext;
    /**
     * A meta site id from which this site was created.
     *
     * In case of a creation from a template it's a template id.
     * In case of a site duplication ("Save As" in dashboard or duplicate in UM) it's an id of a source site.
     */
    originMetaSiteId?: string | null;
    /** A meta site name (URL slug). */
    siteName?: string;
    /** A namespace. */
    namespace?: Namespace;
}
declare enum SiteCreatedContext {
    /** A valid option, we don't expose all reasons why site might be created. */
    OTHER = "OTHER",
    /** A meta site was created from template. */
    FROM_TEMPLATE = "FROM_TEMPLATE",
    /** A meta site was created by copying of the transfferred meta site. */
    DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER",
    /** A copy of existing meta site. */
    DUPLICATE = "DUPLICATE",
    /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */
    OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER",
    /** deprecated A meta site was created for Flash editor. */
    FLASH = "FLASH"
}
declare enum Namespace {
    UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE",
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    WIX = "WIX",
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    SHOUT_OUT = "SHOUT_OUT",
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ALBUMS = "ALBUMS",
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE",
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    HOTELS = "HOTELS",
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    CLUBS = "CLUBS",
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ONBOARDING_DRAFT = "ONBOARDING_DRAFT",
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_SITE = "DEV_SITE",
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    LOGOS = "LOGOS",
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    VIDEO_MAKER = "VIDEO_MAKER",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    PARTNER_DASHBOARD = "PARTNER_DASHBOARD",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY",
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    HTML_DRAFT = "HTML_DRAFT",
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    SITELESS_BUSINESS = "SITELESS_BUSINESS",
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    CREATOR_ECONOMY = "CREATOR_ECONOMY",
    /** It is to be used in the Business First efforts. */
    DASHBOARD_FIRST = "DASHBOARD_FIRST",
    /** Bookings business flow with no site. */
    ANYWHERE = "ANYWHERE",
    /** Namespace for Headless Backoffice with no editor */
    HEADLESS = "HEADLESS",
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS",
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    RISE = "RISE",
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    BRANDED_FIRST = "BRANDED_FIRST",
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    NOWNIA = "NOWNIA",
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    UGC_TEMPLATE = "UGC_TEMPLATE",
    /** Codux Headless Sites */
    CODUX = "CODUX"
}
/** Site transferred to another user. */
interface SiteTransferred {
    /** A previous owner id (user that transfers meta site). */
    oldOwnerId?: string;
    /** A new owner id (user that accepts meta site). */
    newOwnerId?: string;
}
/** Soft deletion of the meta site. Could be restored. */
interface SiteDeleted {
    /** A deletion context. */
    deleteContext?: DeleteContext;
}
interface DeleteContext {
    /** When the meta site was deleted. */
    dateDeleted?: Date | null;
    /** A status. */
    deleteStatus?: DeleteStatus;
    /** A reason (flow). */
    deleteOrigin?: string;
    /** A service that deleted it. */
    initiatorId?: string | null;
}
declare enum DeleteStatus {
    UNKNOWN = "UNKNOWN",
    TRASH = "TRASH",
    DELETED = "DELETED",
    PENDING_PURGE = "PENDING_PURGE"
}
/** Restoration of the meta site. */
interface SiteUndeleted {
}
/** First publish of a meta site. Or subsequent publish after unpublish. */
interface SitePublished {
}
interface SiteUnpublished {
    /** A list of URLs previously associated with the meta site. */
    urls?: string[];
}
interface SiteMarkedAsTemplate {
}
interface SiteMarkedAsWixSite {
}
interface ServiceProvisioned {
    /** Either UUID or EmbeddedServiceType. */
    appDefId?: string;
    /** Not only UUID. Something here could be something weird. */
    instanceId?: string;
    /** An instance id from which this instance is originated. */
    originInstanceId?: string;
    /** A version. */
    version?: string | null;
    /** The origin meta site id */
    originMetaSiteId?: string | null;
}
interface ServiceRemoved {
    /** Either UUID or EmbeddedServiceType. */
    appDefId?: string;
    /** Not only UUID. Something here could be something weird. */
    instanceId?: string;
    /** A version. */
    version?: string | null;
}
/** Rename of the site. Meaning, free public url has been changed as well. */
interface SiteRenamed {
    /** A new meta site name (URL slug). */
    newSiteName?: string;
    /** A previous meta site name (URL slug). */
    oldSiteName?: string;
}
/**
 * Hard deletion of the meta site.
 *
 * Could not be restored. Therefore it's desirable to cleanup data.
 */
interface SiteHardDeleted {
    /** A deletion context. */
    deleteContext?: DeleteContext;
}
interface NamespaceChanged {
    /** A previous namespace. */
    oldNamespace?: Namespace;
    /** A new namespace. */
    newNamespace?: Namespace;
}
/** Assigned Studio editor */
interface StudioAssigned {
}
/** Unassigned Studio editor */
interface StudioUnassigned {
}
interface Empty$2 {
}
interface MessageEnvelope$3 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$3;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$3 extends IdentificationDataIdOneOf$3 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$3;
}
/** @oneof */
interface IdentificationDataIdOneOf$3 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$3 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface GetCatalogVersionResponseNonNullableFields {
    catalogVersion: Version;
}

declare function getCatalogVersion$1(httpClient: HttpClient): GetCatalogVersionSignature;
interface GetCatalogVersionSignature {
    /**
     * Retrieves the version of Stores Catalog installed on a site.
     */
    (): Promise<GetCatalogVersionResponse & GetCatalogVersionResponseNonNullableFields>;
}

declare const getCatalogVersion: MaybeContext<BuildRESTFunction<typeof getCatalogVersion$1> & typeof getCatalogVersion$1>;

type index_d$4_Asset = Asset;
type index_d$4_DefaultDeliveryProfileSetup = DefaultDeliveryProfileSetup;
type index_d$4_DeleteContext = DeleteContext;
type index_d$4_DeleteStatus = DeleteStatus;
declare const index_d$4_DeleteStatus: typeof DeleteStatus;
type index_d$4_GetCatalogVersionRequest = GetCatalogVersionRequest;
type index_d$4_GetCatalogVersionResponse = GetCatalogVersionResponse;
type index_d$4_GetCatalogVersionResponseNonNullableFields = GetCatalogVersionResponseNonNullableFields;
type index_d$4_InstallBassAppDependencyRequest = InstallBassAppDependencyRequest;
type index_d$4_InstallBassAppDependencyResponse = InstallBassAppDependencyResponse;
type index_d$4_MetaSiteSpecialEvent = MetaSiteSpecialEvent;
type index_d$4_MetaSiteSpecialEventPayloadOneOf = MetaSiteSpecialEventPayloadOneOf;
type index_d$4_Namespace = Namespace;
declare const index_d$4_Namespace: typeof Namespace;
type index_d$4_NamespaceChanged = NamespaceChanged;
type index_d$4_Provision = Provision;
type index_d$4_ProvisionRequest = ProvisionRequest;
type index_d$4_ProvisionResponse = ProvisionResponse;
type index_d$4_ServiceProvisioned = ServiceProvisioned;
type index_d$4_ServiceRemoved = ServiceRemoved;
type index_d$4_SiteCreated = SiteCreated;
type index_d$4_SiteCreatedContext = SiteCreatedContext;
declare const index_d$4_SiteCreatedContext: typeof SiteCreatedContext;
type index_d$4_SiteDeleted = SiteDeleted;
type index_d$4_SiteHardDeleted = SiteHardDeleted;
type index_d$4_SiteMarkedAsTemplate = SiteMarkedAsTemplate;
type index_d$4_SiteMarkedAsWixSite = SiteMarkedAsWixSite;
type index_d$4_SitePublished = SitePublished;
type index_d$4_SiteRenamed = SiteRenamed;
type index_d$4_SiteTransferred = SiteTransferred;
type index_d$4_SiteUndeleted = SiteUndeleted;
type index_d$4_SiteUnpublished = SiteUnpublished;
type index_d$4_State = State;
declare const index_d$4_State: typeof State;
type index_d$4_StudioAssigned = StudioAssigned;
type index_d$4_StudioUnassigned = StudioUnassigned;
type index_d$4_Version = Version;
declare const index_d$4_Version: typeof Version;
declare const index_d$4_getCatalogVersion: typeof getCatalogVersion;
declare namespace index_d$4 {
  export { type index_d$4_Asset as Asset, type index_d$4_DefaultDeliveryProfileSetup as DefaultDeliveryProfileSetup, type index_d$4_DeleteContext as DeleteContext, index_d$4_DeleteStatus as DeleteStatus, type Empty$2 as Empty, type index_d$4_GetCatalogVersionRequest as GetCatalogVersionRequest, type index_d$4_GetCatalogVersionResponse as GetCatalogVersionResponse, type index_d$4_GetCatalogVersionResponseNonNullableFields as GetCatalogVersionResponseNonNullableFields, type IdentificationData$3 as IdentificationData, type IdentificationDataIdOneOf$3 as IdentificationDataIdOneOf, type index_d$4_InstallBassAppDependencyRequest as InstallBassAppDependencyRequest, type index_d$4_InstallBassAppDependencyResponse as InstallBassAppDependencyResponse, type MessageEnvelope$3 as MessageEnvelope, type index_d$4_MetaSiteSpecialEvent as MetaSiteSpecialEvent, type index_d$4_MetaSiteSpecialEventPayloadOneOf as MetaSiteSpecialEventPayloadOneOf, index_d$4_Namespace as Namespace, type index_d$4_NamespaceChanged as NamespaceChanged, type index_d$4_Provision as Provision, type index_d$4_ProvisionRequest as ProvisionRequest, type index_d$4_ProvisionResponse as ProvisionResponse, type index_d$4_ServiceProvisioned as ServiceProvisioned, type index_d$4_ServiceRemoved as ServiceRemoved, type index_d$4_SiteCreated as SiteCreated, index_d$4_SiteCreatedContext as SiteCreatedContext, type index_d$4_SiteDeleted as SiteDeleted, type index_d$4_SiteHardDeleted as SiteHardDeleted, type index_d$4_SiteMarkedAsTemplate as SiteMarkedAsTemplate, type index_d$4_SiteMarkedAsWixSite as SiteMarkedAsWixSite, type index_d$4_SitePublished as SitePublished, type index_d$4_SiteRenamed as SiteRenamed, type index_d$4_SiteTransferred as SiteTransferred, type index_d$4_SiteUndeleted as SiteUndeleted, type index_d$4_SiteUnpublished as SiteUnpublished, index_d$4_State as State, type index_d$4_StudioAssigned as StudioAssigned, type index_d$4_StudioUnassigned as StudioUnassigned, index_d$4_Version as Version, WebhookIdentityType$3 as WebhookIdentityType, index_d$4_getCatalogVersion as getCatalogVersion };
}

/** A Ribbon is a visual element that you can assign to products to highlight them on your site. */
interface Ribbon {
    /**
     * Ribbon ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Ribbon name. */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
interface InvalidateCache$1 extends InvalidateCacheGetByOneOf$1 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$1;
    /** Invalidate by page id */
    page?: Page$1;
    /** Invalidate by URI path */
    uri?: URI$1;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$1;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf$1 {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App$1;
    /** Invalidate by page id */
    page?: Page$1;
    /** Invalidate by URI path */
    uri?: URI$1;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File$1;
}
interface App$1 {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page$1 {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI$1 {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File$1 {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateRibbonRequest {
    /** Ribbon to create. */
    ribbon: Ribbon;
}
interface CreateRibbonResponse {
    /** Created ribbon. */
    ribbon?: Ribbon;
}
interface GetRibbonRequest {
    /** Ribbon ID. */
    ribbonId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCT_COUNT = "ASSIGNED_PRODUCT_COUNT"
}
interface GetRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
interface UpdateRibbonRequest {
    /** Ribbon to update. */
    ribbon: Ribbon;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateRibbonResponse {
    /** Updated Ribbon. */
    ribbon?: Ribbon;
}
interface DeleteRibbonRequest {
    /** Ribbon ID. */
    ribbonId: string;
}
interface DeleteRibbonResponse {
}
interface QueryRibbonsRequest {
    /** Query options. */
    query?: CursorQuery$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryRibbonsResponse {
    /** List of ribbons. */
    ribbons?: Ribbon[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateRibbonsRequest {
    /** Ribbons to create. */
    ribbons: Ribbon[];
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateRibbonsResponse {
    /** Ribbons created by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
    /**
     * Full ribbon entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Ribbon;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateRibbonsRequest {
    /** List of ribbons to update. */
    ribbons: MaskedRibbon[];
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface MaskedRibbon {
    /** Ribbon to update. */
    ribbon?: Ribbon;
}
interface BulkUpdateRibbonsResponse {
    /** Ribbons updated by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface GetOrCreateRibbonRequest {
    /** Ribbon name to retrieve or create. */
    ribbonName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface GetOrCreateRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
interface BulkGetOrCreateRibbonsRequest {
    /** Ribbon names to retrieve or create. */
    ribbonNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateRibbonsResponse {
    /** Ribbons retrieved or created by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteRibbonsRequest {
    /** IDs of ribbons to delete. */
    ribbonIds: string[];
}
interface BulkDeleteRibbonsResponse {
    /** Ribbons deleted by bulk action. */
    results?: BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
}
interface DomainEvent$1 extends DomainEventBodyOneOf$1 {
    createdEvent?: EntityCreatedEvent$1;
    updatedEvent?: EntityUpdatedEvent$1;
    deletedEvent?: EntityDeletedEvent$1;
    actionEvent?: ActionEvent$1;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf$1 {
    createdEvent?: EntityCreatedEvent$1;
    updatedEvent?: EntityUpdatedEvent$1;
    deletedEvent?: EntityDeletedEvent$1;
    actionEvent?: ActionEvent$1;
}
interface EntityCreatedEvent$1 {
    entity?: string;
}
interface RestoreInfo$1 {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent$1 {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent$1 {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent$1 {
    body?: string;
}
interface Empty$1 {
}
interface MessageEnvelope$2 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$2;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$2 extends IdentificationDataIdOneOf$2 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$2;
}
/** @oneof */
interface IdentificationDataIdOneOf$2 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$2 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface RibbonNonNullableFields {
    name: string;
}
interface CreateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface GetRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface UpdateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface QueryRibbonsResponseNonNullableFields {
    ribbons: RibbonNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface V3BulkRibbonResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: RibbonNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface GetOrCreateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface BulkGetOrCreateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkRibbonResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkDeleteRibbonsResponseNonNullableFields {
    results: BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BaseEventMetadata$1 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$2;
}
interface EventMetadata extends BaseEventMetadata$1 {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface RibbonCreatedEnvelope {
    entity: Ribbon;
    metadata: EventMetadata;
}
interface RibbonUpdatedEnvelope {
    entity: Ribbon;
    metadata: EventMetadata;
}
interface RibbonDeletedEnvelope {
    entity: Ribbon;
    metadata: EventMetadata;
}
interface GetRibbonOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateRibbon {
    /**
     * Ribbon ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Ribbon name. */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
interface UpdateRibbonOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface QueryRibbonsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[] | undefined;
}
interface QueryCursorResult$1 {
    cursors: Cursors$1;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface RibbonsQueryResult extends QueryCursorResult$1 {
    items: Ribbon[];
    query: RibbonsQueryBuilder;
    next: () => Promise<RibbonsQueryResult>;
    prev: () => Promise<RibbonsQueryResult>;
}
interface RibbonsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any[]) => RibbonsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => RibbonsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: boolean) => RibbonsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => RibbonsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => RibbonsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => RibbonsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => RibbonsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<RibbonsQueryResult>;
}
interface BulkCreateRibbonsOptions {
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkUpdateRibbonsOptions {
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface GetOrCreateRibbonOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateRibbonsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}

declare function createRibbon$1(httpClient: HttpClient): CreateRibbonSignature;
interface CreateRibbonSignature {
    /**
     * Creates a ribbon.
     *
     * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Ribbon to create.
     * @returns Created ribbon.
     */
    (ribbon: Ribbon): Promise<Ribbon & RibbonNonNullableFields>;
}
declare function getRibbon$1(httpClient: HttpClient): GetRibbonSignature;
interface GetRibbonSignature {
    /**
     * Retrieves a ribbon.
     * @param - Ribbon ID.
     * @returns Ribbon.
     */
    (ribbonId: string, options?: GetRibbonOptions | undefined): Promise<Ribbon & RibbonNonNullableFields>;
}
declare function updateRibbon$1(httpClient: HttpClient): UpdateRibbonSignature;
interface UpdateRibbonSignature {
    /**
     * Updates a ribbon.
     *
     *
     * Each time the ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - Ribbon ID.
     * @returns Updated Ribbon.
     */
    (_id: string | null, ribbon: UpdateRibbon, options?: UpdateRibbonOptions | undefined): Promise<Ribbon & RibbonNonNullableFields>;
}
declare function deleteRibbon$1(httpClient: HttpClient): DeleteRibbonSignature;
interface DeleteRibbonSignature {
    /**
     * Deletes a ribbon.
     *
     *
     * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.
     * @param - Ribbon ID.
     */
    (ribbonId: string): Promise<void>;
}
declare function queryRibbons$1(httpClient: HttpClient): QueryRibbonsSignature;
interface QueryRibbonsSignature {
    /**
     * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryRibbonsOptions | undefined): RibbonsQueryBuilder;
}
declare function bulkCreateRibbons$1(httpClient: HttpClient): BulkCreateRibbonsSignature;
interface BulkCreateRibbonsSignature {
    /**
     * Creates multiple ribbons.
     * @param - Ribbons to create.
     */
    (ribbons: Ribbon[], options?: BulkCreateRibbonsOptions | undefined): Promise<BulkCreateRibbonsResponse & BulkCreateRibbonsResponseNonNullableFields>;
}
declare function bulkUpdateRibbons$1(httpClient: HttpClient): BulkUpdateRibbonsSignature;
interface BulkUpdateRibbonsSignature {
    /**
     * Updates multiple ribbons.
     *
     * Each time a ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - List of ribbons to update.
     */
    (ribbons: MaskedRibbon[], options?: BulkUpdateRibbonsOptions | undefined): Promise<BulkUpdateRibbonsResponse & BulkUpdateRibbonsResponseNonNullableFields>;
}
declare function getOrCreateRibbon$1(httpClient: HttpClient): GetOrCreateRibbonSignature;
interface GetOrCreateRibbonSignature {
    /**
     * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.
     * @param - Ribbon name to retrieve or create.
     */
    (ribbonName: string, options?: GetOrCreateRibbonOptions | undefined): Promise<GetOrCreateRibbonResponse & GetOrCreateRibbonResponseNonNullableFields>;
}
declare function bulkGetOrCreateRibbons$1(httpClient: HttpClient): BulkGetOrCreateRibbonsSignature;
interface BulkGetOrCreateRibbonsSignature {
    /**
     * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.
     * @param - Ribbon names to retrieve or create.
     */
    (ribbonNames: string[], options?: BulkGetOrCreateRibbonsOptions | undefined): Promise<BulkGetOrCreateRibbonsResponse & BulkGetOrCreateRibbonsResponseNonNullableFields>;
}
declare function bulkDeleteRibbons$1(httpClient: HttpClient): BulkDeleteRibbonsSignature;
interface BulkDeleteRibbonsSignature {
    /**
     * Deletes multiple ribbons.
     * @param - IDs of ribbons to delete.
     */
    (ribbonIds: string[]): Promise<BulkDeleteRibbonsResponse & BulkDeleteRibbonsResponseNonNullableFields>;
}
declare const onRibbonCreated$1: EventDefinition<RibbonCreatedEnvelope, "wix.stores.catalog.v3.ribbon_created">;
declare const onRibbonUpdated$1: EventDefinition<RibbonUpdatedEnvelope, "wix.stores.catalog.v3.ribbon_updated">;
declare const onRibbonDeleted$1: EventDefinition<RibbonDeletedEnvelope, "wix.stores.catalog.v3.ribbon_deleted">;

declare function createEventModule$1<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const createRibbon: MaybeContext<BuildRESTFunction<typeof createRibbon$1> & typeof createRibbon$1>;
declare const getRibbon: MaybeContext<BuildRESTFunction<typeof getRibbon$1> & typeof getRibbon$1>;
declare const updateRibbon: MaybeContext<BuildRESTFunction<typeof updateRibbon$1> & typeof updateRibbon$1>;
declare const deleteRibbon: MaybeContext<BuildRESTFunction<typeof deleteRibbon$1> & typeof deleteRibbon$1>;
declare const queryRibbons: MaybeContext<BuildRESTFunction<typeof queryRibbons$1> & typeof queryRibbons$1>;
declare const bulkCreateRibbons: MaybeContext<BuildRESTFunction<typeof bulkCreateRibbons$1> & typeof bulkCreateRibbons$1>;
declare const bulkUpdateRibbons: MaybeContext<BuildRESTFunction<typeof bulkUpdateRibbons$1> & typeof bulkUpdateRibbons$1>;
declare const getOrCreateRibbon: MaybeContext<BuildRESTFunction<typeof getOrCreateRibbon$1> & typeof getOrCreateRibbon$1>;
declare const bulkGetOrCreateRibbons: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateRibbons$1> & typeof bulkGetOrCreateRibbons$1>;
declare const bulkDeleteRibbons: MaybeContext<BuildRESTFunction<typeof bulkDeleteRibbons$1> & typeof bulkDeleteRibbons$1>;

type _publicOnRibbonCreatedType = typeof onRibbonCreated$1;
/** */
declare const onRibbonCreated: ReturnType<typeof createEventModule$1<_publicOnRibbonCreatedType>>;

type _publicOnRibbonUpdatedType = typeof onRibbonUpdated$1;
/** */
declare const onRibbonUpdated: ReturnType<typeof createEventModule$1<_publicOnRibbonUpdatedType>>;

type _publicOnRibbonDeletedType = typeof onRibbonDeleted$1;
/** */
declare const onRibbonDeleted: ReturnType<typeof createEventModule$1<_publicOnRibbonDeletedType>>;

type index_d$3_ApplicationError = ApplicationError;
type index_d$3_BulkActionMetadata = BulkActionMetadata;
type index_d$3_BulkCreateRibbonsOptions = BulkCreateRibbonsOptions;
type index_d$3_BulkCreateRibbonsRequest = BulkCreateRibbonsRequest;
type index_d$3_BulkCreateRibbonsResponse = BulkCreateRibbonsResponse;
type index_d$3_BulkCreateRibbonsResponseNonNullableFields = BulkCreateRibbonsResponseNonNullableFields;
type index_d$3_BulkDeleteRibbonsRequest = BulkDeleteRibbonsRequest;
type index_d$3_BulkDeleteRibbonsResponse = BulkDeleteRibbonsResponse;
type index_d$3_BulkDeleteRibbonsResponseNonNullableFields = BulkDeleteRibbonsResponseNonNullableFields;
type index_d$3_BulkGetOrCreateRibbonsOptions = BulkGetOrCreateRibbonsOptions;
type index_d$3_BulkGetOrCreateRibbonsRequest = BulkGetOrCreateRibbonsRequest;
type index_d$3_BulkGetOrCreateRibbonsResponse = BulkGetOrCreateRibbonsResponse;
type index_d$3_BulkGetOrCreateRibbonsResponseNonNullableFields = BulkGetOrCreateRibbonsResponseNonNullableFields;
type index_d$3_BulkRibbonResult = BulkRibbonResult;
type index_d$3_BulkUpdateRibbonsOptions = BulkUpdateRibbonsOptions;
type index_d$3_BulkUpdateRibbonsRequest = BulkUpdateRibbonsRequest;
type index_d$3_BulkUpdateRibbonsResponse = BulkUpdateRibbonsResponse;
type index_d$3_BulkUpdateRibbonsResponseNonNullableFields = BulkUpdateRibbonsResponseNonNullableFields;
type index_d$3_CreateRibbonRequest = CreateRibbonRequest;
type index_d$3_CreateRibbonResponse = CreateRibbonResponse;
type index_d$3_CreateRibbonResponseNonNullableFields = CreateRibbonResponseNonNullableFields;
type index_d$3_DeleteRibbonRequest = DeleteRibbonRequest;
type index_d$3_DeleteRibbonResponse = DeleteRibbonResponse;
type index_d$3_EventMetadata = EventMetadata;
type index_d$3_GetOrCreateRibbonOptions = GetOrCreateRibbonOptions;
type index_d$3_GetOrCreateRibbonRequest = GetOrCreateRibbonRequest;
type index_d$3_GetOrCreateRibbonResponse = GetOrCreateRibbonResponse;
type index_d$3_GetOrCreateRibbonResponseNonNullableFields = GetOrCreateRibbonResponseNonNullableFields;
type index_d$3_GetRibbonOptions = GetRibbonOptions;
type index_d$3_GetRibbonRequest = GetRibbonRequest;
type index_d$3_GetRibbonResponse = GetRibbonResponse;
type index_d$3_GetRibbonResponseNonNullableFields = GetRibbonResponseNonNullableFields;
type index_d$3_ItemMetadata = ItemMetadata;
type index_d$3_MaskedRibbon = MaskedRibbon;
type index_d$3_QueryRibbonsOptions = QueryRibbonsOptions;
type index_d$3_QueryRibbonsRequest = QueryRibbonsRequest;
type index_d$3_QueryRibbonsResponse = QueryRibbonsResponse;
type index_d$3_QueryRibbonsResponseNonNullableFields = QueryRibbonsResponseNonNullableFields;
type index_d$3_RequestedFields = RequestedFields;
declare const index_d$3_RequestedFields: typeof RequestedFields;
type index_d$3_Ribbon = Ribbon;
type index_d$3_RibbonCreatedEnvelope = RibbonCreatedEnvelope;
type index_d$3_RibbonDeletedEnvelope = RibbonDeletedEnvelope;
type index_d$3_RibbonNonNullableFields = RibbonNonNullableFields;
type index_d$3_RibbonUpdatedEnvelope = RibbonUpdatedEnvelope;
type index_d$3_RibbonsQueryBuilder = RibbonsQueryBuilder;
type index_d$3_RibbonsQueryResult = RibbonsQueryResult;
type index_d$3_UpdateRibbon = UpdateRibbon;
type index_d$3_UpdateRibbonOptions = UpdateRibbonOptions;
type index_d$3_UpdateRibbonRequest = UpdateRibbonRequest;
type index_d$3_UpdateRibbonResponse = UpdateRibbonResponse;
type index_d$3_UpdateRibbonResponseNonNullableFields = UpdateRibbonResponseNonNullableFields;
type index_d$3_V3BulkRibbonResult = V3BulkRibbonResult;
type index_d$3__publicOnRibbonCreatedType = _publicOnRibbonCreatedType;
type index_d$3__publicOnRibbonDeletedType = _publicOnRibbonDeletedType;
type index_d$3__publicOnRibbonUpdatedType = _publicOnRibbonUpdatedType;
declare const index_d$3_bulkCreateRibbons: typeof bulkCreateRibbons;
declare const index_d$3_bulkDeleteRibbons: typeof bulkDeleteRibbons;
declare const index_d$3_bulkGetOrCreateRibbons: typeof bulkGetOrCreateRibbons;
declare const index_d$3_bulkUpdateRibbons: typeof bulkUpdateRibbons;
declare const index_d$3_createRibbon: typeof createRibbon;
declare const index_d$3_deleteRibbon: typeof deleteRibbon;
declare const index_d$3_getOrCreateRibbon: typeof getOrCreateRibbon;
declare const index_d$3_getRibbon: typeof getRibbon;
declare const index_d$3_onRibbonCreated: typeof onRibbonCreated;
declare const index_d$3_onRibbonDeleted: typeof onRibbonDeleted;
declare const index_d$3_onRibbonUpdated: typeof onRibbonUpdated;
declare const index_d$3_queryRibbons: typeof queryRibbons;
declare const index_d$3_updateRibbon: typeof updateRibbon;
declare namespace index_d$3 {
  export { type ActionEvent$1 as ActionEvent, type App$1 as App, type index_d$3_ApplicationError as ApplicationError, type BaseEventMetadata$1 as BaseEventMetadata, type index_d$3_BulkActionMetadata as BulkActionMetadata, type index_d$3_BulkCreateRibbonsOptions as BulkCreateRibbonsOptions, type index_d$3_BulkCreateRibbonsRequest as BulkCreateRibbonsRequest, type index_d$3_BulkCreateRibbonsResponse as BulkCreateRibbonsResponse, type index_d$3_BulkCreateRibbonsResponseNonNullableFields as BulkCreateRibbonsResponseNonNullableFields, type index_d$3_BulkDeleteRibbonsRequest as BulkDeleteRibbonsRequest, type index_d$3_BulkDeleteRibbonsResponse as BulkDeleteRibbonsResponse, type index_d$3_BulkDeleteRibbonsResponseNonNullableFields as BulkDeleteRibbonsResponseNonNullableFields, type index_d$3_BulkGetOrCreateRibbonsOptions as BulkGetOrCreateRibbonsOptions, type index_d$3_BulkGetOrCreateRibbonsRequest as BulkGetOrCreateRibbonsRequest, type index_d$3_BulkGetOrCreateRibbonsResponse as BulkGetOrCreateRibbonsResponse, type index_d$3_BulkGetOrCreateRibbonsResponseNonNullableFields as BulkGetOrCreateRibbonsResponseNonNullableFields, type index_d$3_BulkRibbonResult as BulkRibbonResult, type index_d$3_BulkUpdateRibbonsOptions as BulkUpdateRibbonsOptions, type index_d$3_BulkUpdateRibbonsRequest as BulkUpdateRibbonsRequest, type index_d$3_BulkUpdateRibbonsResponse as BulkUpdateRibbonsResponse, type index_d$3_BulkUpdateRibbonsResponseNonNullableFields as BulkUpdateRibbonsResponseNonNullableFields, type index_d$3_CreateRibbonRequest as CreateRibbonRequest, type index_d$3_CreateRibbonResponse as CreateRibbonResponse, type index_d$3_CreateRibbonResponseNonNullableFields as CreateRibbonResponseNonNullableFields, type CursorPaging$1 as CursorPaging, type CursorPagingMetadata$1 as CursorPagingMetadata, type CursorQuery$1 as CursorQuery, type CursorQueryPagingMethodOneOf$1 as CursorQueryPagingMethodOneOf, type Cursors$1 as Cursors, type index_d$3_DeleteRibbonRequest as DeleteRibbonRequest, type index_d$3_DeleteRibbonResponse as DeleteRibbonResponse, type DomainEvent$1 as DomainEvent, type DomainEventBodyOneOf$1 as DomainEventBodyOneOf, type Empty$1 as Empty, type EntityCreatedEvent$1 as EntityCreatedEvent, type EntityDeletedEvent$1 as EntityDeletedEvent, type EntityUpdatedEvent$1 as EntityUpdatedEvent, type index_d$3_EventMetadata as EventMetadata, type File$1 as File, type index_d$3_GetOrCreateRibbonOptions as GetOrCreateRibbonOptions, type index_d$3_GetOrCreateRibbonRequest as GetOrCreateRibbonRequest, type index_d$3_GetOrCreateRibbonResponse as GetOrCreateRibbonResponse, type index_d$3_GetOrCreateRibbonResponseNonNullableFields as GetOrCreateRibbonResponseNonNullableFields, type index_d$3_GetRibbonOptions as GetRibbonOptions, type index_d$3_GetRibbonRequest as GetRibbonRequest, type index_d$3_GetRibbonResponse as GetRibbonResponse, type index_d$3_GetRibbonResponseNonNullableFields as GetRibbonResponseNonNullableFields, type IdentificationData$2 as IdentificationData, type IdentificationDataIdOneOf$2 as IdentificationDataIdOneOf, type InvalidateCache$1 as InvalidateCache, type InvalidateCacheGetByOneOf$1 as InvalidateCacheGetByOneOf, type index_d$3_ItemMetadata as ItemMetadata, type index_d$3_MaskedRibbon as MaskedRibbon, type MessageEnvelope$2 as MessageEnvelope, type Page$1 as Page, type index_d$3_QueryRibbonsOptions as QueryRibbonsOptions, type index_d$3_QueryRibbonsRequest as QueryRibbonsRequest, type index_d$3_QueryRibbonsResponse as QueryRibbonsResponse, type index_d$3_QueryRibbonsResponseNonNullableFields as QueryRibbonsResponseNonNullableFields, index_d$3_RequestedFields as RequestedFields, type RestoreInfo$1 as RestoreInfo, type index_d$3_Ribbon as Ribbon, type index_d$3_RibbonCreatedEnvelope as RibbonCreatedEnvelope, type index_d$3_RibbonDeletedEnvelope as RibbonDeletedEnvelope, type index_d$3_RibbonNonNullableFields as RibbonNonNullableFields, type index_d$3_RibbonUpdatedEnvelope as RibbonUpdatedEnvelope, type index_d$3_RibbonsQueryBuilder as RibbonsQueryBuilder, type index_d$3_RibbonsQueryResult as RibbonsQueryResult, SortOrder$1 as SortOrder, type Sorting$1 as Sorting, type URI$1 as URI, type index_d$3_UpdateRibbon as UpdateRibbon, type index_d$3_UpdateRibbonOptions as UpdateRibbonOptions, type index_d$3_UpdateRibbonRequest as UpdateRibbonRequest, type index_d$3_UpdateRibbonResponse as UpdateRibbonResponse, type index_d$3_UpdateRibbonResponseNonNullableFields as UpdateRibbonResponseNonNullableFields, type index_d$3_V3BulkRibbonResult as V3BulkRibbonResult, WebhookIdentityType$2 as WebhookIdentityType, type index_d$3__publicOnRibbonCreatedType as _publicOnRibbonCreatedType, type index_d$3__publicOnRibbonDeletedType as _publicOnRibbonDeletedType, type index_d$3__publicOnRibbonUpdatedType as _publicOnRibbonUpdatedType, index_d$3_bulkCreateRibbons as bulkCreateRibbons, index_d$3_bulkDeleteRibbons as bulkDeleteRibbons, index_d$3_bulkGetOrCreateRibbons as bulkGetOrCreateRibbons, index_d$3_bulkUpdateRibbons as bulkUpdateRibbons, index_d$3_createRibbon as createRibbon, index_d$3_deleteRibbon as deleteRibbon, index_d$3_getOrCreateRibbon as getOrCreateRibbon, index_d$3_getRibbon as getRibbon, index_d$3_onRibbonCreated as onRibbonCreated, index_d$3_onRibbonDeleted as onRibbonDeleted, index_d$3_onRibbonUpdated as onRibbonUpdated, onRibbonCreated$1 as publicOnRibbonCreated, onRibbonDeleted$1 as publicOnRibbonDeleted, onRibbonUpdated$1 as publicOnRibbonUpdated, index_d$3_queryRibbons as queryRibbons, index_d$3_updateRibbon as updateRibbon };
}

/** A location is a physical or virtual site where products are sold. */
interface StoresLocation {
    /**
     * Stores location ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the Stores location is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the Stores location.
     *
     * Ignored when creating a Stores location.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the Stores location was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the Stores location was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Wix location ID.
     * Learn more about the [Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     */
    wixLocationId?: string | null;
    /**
     * Location type.
     *
     * + `VIRTUAL`: Online store.
     * + `PHYSICAL`: Physical location. For example, for POS.
     * @readonly
     */
    locationType?: LocationType;
    /**
     * Stores location name.
     * @readonly
     */
    name?: string;
    /** Whether the location is the site's default location. */
    defaultLocation?: boolean;
}
declare enum LocationType {
    UNKNOWN_LOCATION_TYPE = "UNKNOWN_LOCATION_TYPE",
    /** Online stores location. */
    VIRTUAL = "VIRTUAL",
    /** Physical location like POS */
    PHYSICAL = "PHYSICAL"
}
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
}
interface App {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
interface Page {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
interface URI {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
interface File {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
interface CreateStoresLocationRequest {
    /** Stores location to create. */
    storesLocation?: StoresLocation;
}
interface CreateStoresLocationResponse {
    /** Created Stores location. */
    storesLocation?: StoresLocation;
}
interface GetStoresLocationRequest {
    /** Stores location ID. */
    storesLocationId: string;
}
interface GetStoresLocationResponse {
    /** Stores location. */
    storesLocation?: StoresLocation;
}
interface UpdateStoresLocationRequest {
    /** Stores location to update. */
    storesLocation?: StoresLocation;
}
interface UpdateStoresLocationResponse {
    /** Updated Stores location. */
    storesLocation?: StoresLocation;
}
interface DeleteStoresLocationRequest {
    /** Stores location ID. */
    storesLocationId?: string;
}
interface DeleteStoresLocationResponse {
}
interface QueryStoresLocationsRequest {
    /** Query options. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryStoresLocationsResponse {
    /** List of Stores locations. */
    storesLocations?: StoresLocation[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
interface GetOrCreateDefaultStoresLocationRequest {
}
interface GetOrCreateDefaultStoresLocationResponse {
    /** Default Stores location. */
    storesLocation?: StoresLocation;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope$1 {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData$1;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData$1 extends IdentificationDataIdOneOf$1 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType$1;
}
/** @oneof */
interface IdentificationDataIdOneOf$1 {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType$1 {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface StoresLocationNonNullableFields {
    locationType: LocationType;
    name: string;
    defaultLocation: boolean;
}
interface GetStoresLocationResponseNonNullableFields {
    storesLocation?: StoresLocationNonNullableFields;
}
interface QueryStoresLocationsResponseNonNullableFields {
    storesLocations: StoresLocationNonNullableFields[];
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface StoresLocationsQueryResult extends QueryCursorResult {
    items: StoresLocation[];
    query: StoresLocationsQueryBuilder;
    next: () => Promise<StoresLocationsQueryResult>;
    prev: () => Promise<StoresLocationsQueryResult>;
}
interface StoresLocationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'wixLocationId' | 'locationType' | 'name' | 'defaultLocation', value: any) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'wixLocationId' | 'locationType' | 'name' | 'defaultLocation', value: any) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'wixLocationId' | 'name', value: string) => StoresLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'wixLocationId' | 'locationType' | 'name' | 'defaultLocation', value: any[]) => StoresLocationsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'wixLocationId' | 'locationType' | 'name' | 'defaultLocation', value: any) => StoresLocationsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'wixLocationId' | 'locationType' | 'name' | 'defaultLocation', value: boolean) => StoresLocationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'locationType' | 'name' | 'defaultLocation'>) => StoresLocationsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'locationType' | 'name' | 'defaultLocation'>) => StoresLocationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => StoresLocationsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => StoresLocationsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<StoresLocationsQueryResult>;
}

declare function getStoresLocation$1(httpClient: HttpClient): GetStoresLocationSignature;
interface GetStoresLocationSignature {
    /**
     * Retrieves a Stores location.
     * @param - Stores location ID.
     * @returns Stores location.
     */
    (storesLocationId: string): Promise<StoresLocation & StoresLocationNonNullableFields>;
}
declare function queryStoresLocations$1(httpClient: HttpClient): QueryStoresLocationsSignature;
interface QueryStoresLocationsSignature {
    /**
     * Retrieves a list of up to 100 Stores locations, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Stores Locations runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Stores Locations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/stores-locations-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (): StoresLocationsQueryBuilder;
}

declare const getStoresLocation: MaybeContext<BuildRESTFunction<typeof getStoresLocation$1> & typeof getStoresLocation$1>;
declare const queryStoresLocations: MaybeContext<BuildRESTFunction<typeof queryStoresLocations$1> & typeof queryStoresLocations$1>;

type index_d$2_ActionEvent = ActionEvent;
type index_d$2_App = App;
type index_d$2_CreateStoresLocationRequest = CreateStoresLocationRequest;
type index_d$2_CreateStoresLocationResponse = CreateStoresLocationResponse;
type index_d$2_CursorPaging = CursorPaging;
type index_d$2_CursorPagingMetadata = CursorPagingMetadata;
type index_d$2_CursorQuery = CursorQuery;
type index_d$2_CursorQueryPagingMethodOneOf = CursorQueryPagingMethodOneOf;
type index_d$2_Cursors = Cursors;
type index_d$2_DeleteStoresLocationRequest = DeleteStoresLocationRequest;
type index_d$2_DeleteStoresLocationResponse = DeleteStoresLocationResponse;
type index_d$2_DomainEvent = DomainEvent;
type index_d$2_DomainEventBodyOneOf = DomainEventBodyOneOf;
type index_d$2_Empty = Empty;
type index_d$2_EntityCreatedEvent = EntityCreatedEvent;
type index_d$2_EntityDeletedEvent = EntityDeletedEvent;
type index_d$2_EntityUpdatedEvent = EntityUpdatedEvent;
type index_d$2_File = File;
type index_d$2_GetOrCreateDefaultStoresLocationRequest = GetOrCreateDefaultStoresLocationRequest;
type index_d$2_GetOrCreateDefaultStoresLocationResponse = GetOrCreateDefaultStoresLocationResponse;
type index_d$2_GetStoresLocationRequest = GetStoresLocationRequest;
type index_d$2_GetStoresLocationResponse = GetStoresLocationResponse;
type index_d$2_GetStoresLocationResponseNonNullableFields = GetStoresLocationResponseNonNullableFields;
type index_d$2_InvalidateCache = InvalidateCache;
type index_d$2_InvalidateCacheGetByOneOf = InvalidateCacheGetByOneOf;
type index_d$2_LocationType = LocationType;
declare const index_d$2_LocationType: typeof LocationType;
type index_d$2_Page = Page;
type index_d$2_QueryStoresLocationsRequest = QueryStoresLocationsRequest;
type index_d$2_QueryStoresLocationsResponse = QueryStoresLocationsResponse;
type index_d$2_QueryStoresLocationsResponseNonNullableFields = QueryStoresLocationsResponseNonNullableFields;
type index_d$2_RestoreInfo = RestoreInfo;
type index_d$2_SortOrder = SortOrder;
declare const index_d$2_SortOrder: typeof SortOrder;
type index_d$2_Sorting = Sorting;
type index_d$2_StoresLocation = StoresLocation;
type index_d$2_StoresLocationNonNullableFields = StoresLocationNonNullableFields;
type index_d$2_StoresLocationsQueryBuilder = StoresLocationsQueryBuilder;
type index_d$2_StoresLocationsQueryResult = StoresLocationsQueryResult;
type index_d$2_URI = URI;
type index_d$2_UpdateStoresLocationRequest = UpdateStoresLocationRequest;
type index_d$2_UpdateStoresLocationResponse = UpdateStoresLocationResponse;
declare const index_d$2_getStoresLocation: typeof getStoresLocation;
declare const index_d$2_queryStoresLocations: typeof queryStoresLocations;
declare namespace index_d$2 {
  export { type index_d$2_ActionEvent as ActionEvent, type index_d$2_App as App, type index_d$2_CreateStoresLocationRequest as CreateStoresLocationRequest, type index_d$2_CreateStoresLocationResponse as CreateStoresLocationResponse, type index_d$2_CursorPaging as CursorPaging, type index_d$2_CursorPagingMetadata as CursorPagingMetadata, type index_d$2_CursorQuery as CursorQuery, type index_d$2_CursorQueryPagingMethodOneOf as CursorQueryPagingMethodOneOf, type index_d$2_Cursors as Cursors, type index_d$2_DeleteStoresLocationRequest as DeleteStoresLocationRequest, type index_d$2_DeleteStoresLocationResponse as DeleteStoresLocationResponse, type index_d$2_DomainEvent as DomainEvent, type index_d$2_DomainEventBodyOneOf as DomainEventBodyOneOf, type index_d$2_Empty as Empty, type index_d$2_EntityCreatedEvent as EntityCreatedEvent, type index_d$2_EntityDeletedEvent as EntityDeletedEvent, type index_d$2_EntityUpdatedEvent as EntityUpdatedEvent, type index_d$2_File as File, type index_d$2_GetOrCreateDefaultStoresLocationRequest as GetOrCreateDefaultStoresLocationRequest, type index_d$2_GetOrCreateDefaultStoresLocationResponse as GetOrCreateDefaultStoresLocationResponse, type index_d$2_GetStoresLocationRequest as GetStoresLocationRequest, type index_d$2_GetStoresLocationResponse as GetStoresLocationResponse, type index_d$2_GetStoresLocationResponseNonNullableFields as GetStoresLocationResponseNonNullableFields, type IdentificationData$1 as IdentificationData, type IdentificationDataIdOneOf$1 as IdentificationDataIdOneOf, type index_d$2_InvalidateCache as InvalidateCache, type index_d$2_InvalidateCacheGetByOneOf as InvalidateCacheGetByOneOf, index_d$2_LocationType as LocationType, type MessageEnvelope$1 as MessageEnvelope, type index_d$2_Page as Page, type index_d$2_QueryStoresLocationsRequest as QueryStoresLocationsRequest, type index_d$2_QueryStoresLocationsResponse as QueryStoresLocationsResponse, type index_d$2_QueryStoresLocationsResponseNonNullableFields as QueryStoresLocationsResponseNonNullableFields, type index_d$2_RestoreInfo as RestoreInfo, index_d$2_SortOrder as SortOrder, type index_d$2_Sorting as Sorting, type index_d$2_StoresLocation as StoresLocation, type index_d$2_StoresLocationNonNullableFields as StoresLocationNonNullableFields, type index_d$2_StoresLocationsQueryBuilder as StoresLocationsQueryBuilder, type index_d$2_StoresLocationsQueryResult as StoresLocationsQueryResult, type index_d$2_URI as URI, type index_d$2_UpdateStoresLocationRequest as UpdateStoresLocationRequest, type index_d$2_UpdateStoresLocationResponse as UpdateStoresLocationResponse, WebhookIdentityType$1 as WebhookIdentityType, index_d$2_getStoresLocation as getStoresLocation, index_d$2_queryStoresLocations as queryStoresLocations };
}

interface SubscriptionOption {
    /** Subscription option ID (auto-generated upon subscription option creation). */
    _id?: string | null;
    /** Subscription option title. */
    title?: string | null;
    /** Subscription option description (optional). */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface Discount {
    /** Discount type. */
    type?: DiscountType;
    /** Discount value. */
    value?: number;
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface CreateSubscriptionOptionRequest {
    /** Subscription option info. */
    subscriptionOption: SubscriptionOption;
}
interface CreateSubscriptionOptionResponse {
    /** Newly created subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface UpdateSubscriptionOptionRequest {
    /** Subscription option info. Only the passed parameters will be updated. */
    subscriptionOption: SubscriptionOption;
}
interface UpdateSubscriptionOptionResponse {
    /** Updated subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface DeleteSubscriptionOptionRequest {
    /** ID of the subscription option to delete. */
    _id: string;
}
interface DeleteSubscriptionOptionResponse {
}
interface BulkCreateSubscriptionOptionsRequest {
    /** Subscription options info. */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkCreateSubscriptionOptionsResponse {
    /** Newly created subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsRequest {
    /** Subscription options info. Only the passed parameters in each subscription option will be updated. */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsResponse {
    /** Updated subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkDeleteSubscriptionOptionsRequest {
    /** IDs of the subscription options to delete. */
    ids: string[];
}
interface BulkDeleteSubscriptionOptionsResponse {
}
interface AssignSubscriptionOptionsToProductRequest {
    /** Product ID. */
    productId: string;
    /** Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product. */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}
interface SubscriptionOptionInProduct {
    /** Subscription option ID. */
    _id?: string;
    /** Whether the subscription option is hidden for the product (the default is false). */
    hidden?: boolean;
    /**
     * Subscription option title.
     * @readonly
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @readonly
     */
    description?: string | null;
    /**
     * Subscription payment settings. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     * @readonly
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * @readonly
     */
    discount?: Discount;
}
interface AssignSubscriptionOptionsToProductResponse {
}
interface AllowOneTimePurchasesRequest {
    /** Product ID. */
    productId: string;
    /** Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only. */
    allowed: boolean | null;
}
interface AllowOneTimePurchasesResponse {
}
interface GetSubscriptionOptionRequest {
    /** Subscription option ID. */
    _id: string;
}
interface GetSubscriptionOptionResponse {
    /** Subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface GetSubscriptionOptionsForProductRequest {
    /** Product ID. */
    productId: string;
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetSubscriptionOptionsForProductResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOptionInProduct[];
}
interface ListSubscriptionOptionsRequest {
    /** Subscription option IDs. */
    ids?: string[];
}
interface ListSubscriptionOptionsResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface CalculatePricesRequest {
    /** original price to which subscription options discount will be applied */
    price?: number;
    /** ids of subscription options which will be applied to original price */
    ids?: string[];
}
interface CalculatePricesResponse {
    /** array of calculated prices */
    prices?: SubscriptionOptionPrices[];
    /** price to which subscription options discount applied */
    originalPrice?: number;
}
interface SubscriptionOptionPrices {
    /** Subscription option id */
    _id?: string;
    /** Price data calculated for subscription option */
    priceData?: SubscriptionOptionPriceData;
    /** Price data calculated for subscription option, converted to the currency requested in request header */
    convertedPriceData?: SubscriptionOptionPriceData;
}
interface SubscriptionOptionPriceData {
    /** Subscription option price currency */
    currency?: string;
    /** Price calculated after subscription option discount applied */
    discountedPrice?: number;
    /** Price calculated after subscription option discount applied, formatted with the currency */
    formattedDiscountedPrice?: string;
}
interface BulkCalculatePricesRequest {
    /**
     * Original prices to which subscription options discount will be applied.
     * Key is identifier unique per price that can be used to match calculated prices with original price
     */
    prices?: Record<string, number>;
    /** ids of subscription options which will be applied to original price */
    ids?: string[];
}
interface BulkCalculatePricesResponse {
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option
     */
    calculatedPrices?: Record<string, CalculatePricesResponse>;
}
interface BulkCalculatePricesRequestV2 {
    /** Original prices to be calculated for each corresponding product id with related subscription plan ids */
    items?: BulkCalculatePricesRequestItem[];
}
interface BulkCalculatePricesRequestItem {
    /** Calculation id (product id) */
    _id?: string;
    /**
     * Original prices to which subscription options discount will be applied.
     * Key is identifier unique per price that can be used to match calculated prices with original price
     */
    prices?: Record<string, number>;
    /** ids of subscription options which will be applied to original price. */
    subscriptionOptionIds?: string[];
}
interface BulkCalculatePricesResponseV2 {
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option for each product
     */
    calculatedPricesPerProduct?: BulkCalculatePricesResponseItem[];
}
interface BulkCalculatePricesResponseItem {
    /** Calculation id (product id) */
    _id?: string;
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option
     */
    calculatedPrices?: Record<string, CalculatePricesResponse>;
}
interface GetProductIdsForSubscriptionOptionRequest {
    /** Subscription option ID. */
    _id: string;
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging$1;
}
interface Paging$1 {
    /** Amount of items to load per page. */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number | null;
}
interface GetProductIdsForSubscriptionOptionResponse {
    /** IDs of products associated with the specified subscription option. */
    productIds?: string[];
    /** Paging metadata. */
    metadata?: PagingMetadata$1;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata$1 {
    /** Amount of items to load per page. */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number;
}
interface GetOneTimePurchasesStatusRequest {
    /** Product ID. */
    productId: string;
}
interface GetOneTimePurchasesStatusResponse {
    /** Whether the specified product is available for one-time purchase */
    allowed?: boolean;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
}
interface DiscountNonNullableFields {
    type: DiscountType;
    value: number;
}
interface SubscriptionOptionNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    discount?: DiscountNonNullableFields;
}
interface CreateSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface UpdateSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface BulkCreateSubscriptionOptionsResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionNonNullableFields[];
}
interface BulkUpdateSubscriptionOptionsResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionNonNullableFields[];
}
interface GetSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface SubscriptionOptionInProductNonNullableFields {
    _id: string;
    hidden: boolean;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    discount?: DiscountNonNullableFields;
}
interface GetSubscriptionOptionsForProductResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionInProductNonNullableFields[];
}
interface PagingMetadataNonNullableFields$1 {
    items: number;
    offset: number;
}
interface GetProductIdsForSubscriptionOptionResponseNonNullableFields {
    productIds: string[];
    metadata?: PagingMetadataNonNullableFields$1;
    totalResults: number;
}
interface GetOneTimePurchasesStatusResponseNonNullableFields {
    allowed: boolean;
}
interface UpdateSubscriptionOption {
    /** Subscription option ID (auto-generated upon subscription option creation). */
    _id?: string | null;
    /** Subscription option title. */
    title?: string | null;
    /** Subscription option description (optional). */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
interface AssignSubscriptionOptionsToProductOptions {
    /** Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product. */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}
interface GetSubscriptionOptionsForProductOptions {
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetProductIdsForSubscriptionOptionOptions {
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging$1;
}

declare function createSubscriptionOption$1(httpClient: HttpClient): CreateSubscriptionOptionSignature;
interface CreateSubscriptionOptionSignature {
    /**
     * Creates a subscription option.
     * To assign to a product, call [`assignSubscriptionOptionsToProduct()`](https://www.wix.com/velo/reference/wix-stores-v2/subscriptionoptions/assign-subscription-options-to-product).
     * Subscription options that are not assigned to a product will not be visible in the Wix business manager.
     * @param - Subscription option info.
     * @returns Newly created subscription option.
     * @deprecated
     */
    (subscriptionOption: SubscriptionOption): Promise<SubscriptionOption & SubscriptionOptionNonNullableFields>;
}
declare function updateSubscriptionOption$1(httpClient: HttpClient): UpdateSubscriptionOptionSignature;
interface UpdateSubscriptionOptionSignature {
    /**
     * Updates a subscription option.
     * Only parameters passed will be updated.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Subscription option ID (auto-generated upon subscription option creation).
     * @param - Subscription option update options.
     * @returns Updated subscription option.
     * @deprecated
     */
    (_id: string | null, subscriptionOption: UpdateSubscriptionOption): Promise<SubscriptionOption & SubscriptionOptionNonNullableFields>;
}
declare function deleteSubscriptionOption$1(httpClient: HttpClient): DeleteSubscriptionOptionSignature;
interface DeleteSubscriptionOptionSignature {
    /**
     * Deletes a subscription option.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - ID of the subscription option to delete.
     * @deprecated
     */
    (_id: string): Promise<void>;
}
declare function bulkCreateSubscriptionOptions$1(httpClient: HttpClient): BulkCreateSubscriptionOptionsSignature;
interface BulkCreateSubscriptionOptionsSignature {
    /**
     * Creates multiple subscription options (up to 100).
     * To assign to a product, call [`assignSubscriptionOptionsToProduct()`](https://www.wix.com/velo/reference/wix-stores-v2/subscriptionoptions/assign-subscription-options-to-product).
     * Subscription options that are not assigned to a product will not be visible in the Wix business manager.
     * @param - Subscription options info.
     * @deprecated
     */
    (subscriptionOptions: SubscriptionOption[]): Promise<BulkCreateSubscriptionOptionsResponse & BulkCreateSubscriptionOptionsResponseNonNullableFields>;
}
declare function bulkUpdateSubscriptionOptions$1(httpClient: HttpClient): BulkUpdateSubscriptionOptionsSignature;
interface BulkUpdateSubscriptionOptionsSignature {
    /**
     * Updates multiple subscription options.
     * Only parameters passed will be updated.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Subscription options info. Only the passed parameters in each subscription option will be updated.
     * @deprecated
     */
    (subscriptionOptions: SubscriptionOption[]): Promise<BulkUpdateSubscriptionOptionsResponse & BulkUpdateSubscriptionOptionsResponseNonNullableFields>;
}
declare function bulkDeleteSubscriptionOptions$1(httpClient: HttpClient): BulkDeleteSubscriptionOptionsSignature;
interface BulkDeleteSubscriptionOptionsSignature {
    /**
     * Deletes multiple subscription options.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - IDs of the subscription options to delete.
     * @deprecated
     */
    (ids: string[]): Promise<void>;
}
declare function assignSubscriptionOptionsToProduct$1(httpClient: HttpClient): AssignSubscriptionOptionsToProductSignature;
interface AssignSubscriptionOptionsToProductSignature {
    /**
     * Assign up to 6 subscription options to a specified product.
     * Pass an empty array to remove all subscription options assigned to a product.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Product ID.
     * @param - Subscription option assignment options.
     * @deprecated
     */
    (productId: string, options?: AssignSubscriptionOptionsToProductOptions | undefined): Promise<void>;
}
declare function allowOneTimePurchases$1(httpClient: HttpClient): AllowOneTimePurchasesSignature;
interface AllowOneTimePurchasesSignature {
    /**
     * Allow for one-time purchase of a product.
     * By default, product can be sold only as part of a subscription, not as a one-time purchase.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Product ID.
     * @param - Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only.
     * @deprecated
     */
    (productId: string, allowed: boolean | null): Promise<void>;
}
declare function getSubscriptionOption$1(httpClient: HttpClient): GetSubscriptionOptionSignature;
interface GetSubscriptionOptionSignature {
    /**
     * Retrieves a subscription option by ID.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Subscription option ID.
     * @returns Subscription option.
     * @deprecated
     */
    (_id: string): Promise<SubscriptionOption & SubscriptionOptionNonNullableFields>;
}
declare function getSubscriptionOptionsForProduct$1(httpClient: HttpClient): GetSubscriptionOptionsForProductSignature;
interface GetSubscriptionOptionsForProductSignature {
    /**
     * Retrieves all subscription options assigned to a specified product.
     * By default, hidden subscription options are not returned. To retrieve all subscription options you must pass `includeHiddenSubscriptionOptions = true`.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Product ID.
     * @param - Options.
     * @deprecated
     */
    (productId: string, options?: GetSubscriptionOptionsForProductOptions | undefined): Promise<GetSubscriptionOptionsForProductResponse & GetSubscriptionOptionsForProductResponseNonNullableFields>;
}
declare function getProductIdsForSubscriptionOption$1(httpClient: HttpClient): GetProductIdsForSubscriptionOptionSignature;
interface GetProductIdsForSubscriptionOptionSignature {
    /**
     * Retrieves the IDs of products associated with a specified subscription option.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Subscription option ID.
     * @param - Paging and other options.
     * @deprecated
     */
    (_id: string, options?: GetProductIdsForSubscriptionOptionOptions | undefined): Promise<GetProductIdsForSubscriptionOptionResponse & GetProductIdsForSubscriptionOptionResponseNonNullableFields>;
}
declare function getOneTimePurchasesStatus$1(httpClient: HttpClient): GetOneTimePurchasesStatusSignature;
interface GetOneTimePurchasesStatusSignature {
    /**
     * Checks whether a specified product (associated with subscription options) is available for one-time purchase.
     * <blockquote class='warning'>
     *
     * __Deprecation Notice:__
     *
     * This endpoint has been deprecated and will be removed on January 29, 2024.
     *
     * </blockquote>
     * @param - Product ID.
     * @deprecated
     */
    (productId: string): Promise<GetOneTimePurchasesStatusResponse & GetOneTimePurchasesStatusResponseNonNullableFields>;
}

declare const createSubscriptionOption: MaybeContext<BuildRESTFunction<typeof createSubscriptionOption$1> & typeof createSubscriptionOption$1>;
declare const updateSubscriptionOption: MaybeContext<BuildRESTFunction<typeof updateSubscriptionOption$1> & typeof updateSubscriptionOption$1>;
declare const deleteSubscriptionOption: MaybeContext<BuildRESTFunction<typeof deleteSubscriptionOption$1> & typeof deleteSubscriptionOption$1>;
declare const bulkCreateSubscriptionOptions: MaybeContext<BuildRESTFunction<typeof bulkCreateSubscriptionOptions$1> & typeof bulkCreateSubscriptionOptions$1>;
declare const bulkUpdateSubscriptionOptions: MaybeContext<BuildRESTFunction<typeof bulkUpdateSubscriptionOptions$1> & typeof bulkUpdateSubscriptionOptions$1>;
declare const bulkDeleteSubscriptionOptions: MaybeContext<BuildRESTFunction<typeof bulkDeleteSubscriptionOptions$1> & typeof bulkDeleteSubscriptionOptions$1>;
declare const assignSubscriptionOptionsToProduct: MaybeContext<BuildRESTFunction<typeof assignSubscriptionOptionsToProduct$1> & typeof assignSubscriptionOptionsToProduct$1>;
declare const allowOneTimePurchases: MaybeContext<BuildRESTFunction<typeof allowOneTimePurchases$1> & typeof allowOneTimePurchases$1>;
declare const getSubscriptionOption: MaybeContext<BuildRESTFunction<typeof getSubscriptionOption$1> & typeof getSubscriptionOption$1>;
declare const getSubscriptionOptionsForProduct: MaybeContext<BuildRESTFunction<typeof getSubscriptionOptionsForProduct$1> & typeof getSubscriptionOptionsForProduct$1>;
declare const getProductIdsForSubscriptionOption: MaybeContext<BuildRESTFunction<typeof getProductIdsForSubscriptionOption$1> & typeof getProductIdsForSubscriptionOption$1>;
declare const getOneTimePurchasesStatus: MaybeContext<BuildRESTFunction<typeof getOneTimePurchasesStatus$1> & typeof getOneTimePurchasesStatus$1>;

type index_d$1_AllowOneTimePurchasesRequest = AllowOneTimePurchasesRequest;
type index_d$1_AllowOneTimePurchasesResponse = AllowOneTimePurchasesResponse;
type index_d$1_AssignSubscriptionOptionsToProductOptions = AssignSubscriptionOptionsToProductOptions;
type index_d$1_AssignSubscriptionOptionsToProductRequest = AssignSubscriptionOptionsToProductRequest;
type index_d$1_AssignSubscriptionOptionsToProductResponse = AssignSubscriptionOptionsToProductResponse;
type index_d$1_BulkCalculatePricesRequest = BulkCalculatePricesRequest;
type index_d$1_BulkCalculatePricesRequestItem = BulkCalculatePricesRequestItem;
type index_d$1_BulkCalculatePricesRequestV2 = BulkCalculatePricesRequestV2;
type index_d$1_BulkCalculatePricesResponse = BulkCalculatePricesResponse;
type index_d$1_BulkCalculatePricesResponseItem = BulkCalculatePricesResponseItem;
type index_d$1_BulkCalculatePricesResponseV2 = BulkCalculatePricesResponseV2;
type index_d$1_BulkCreateSubscriptionOptionsRequest = BulkCreateSubscriptionOptionsRequest;
type index_d$1_BulkCreateSubscriptionOptionsResponse = BulkCreateSubscriptionOptionsResponse;
type index_d$1_BulkCreateSubscriptionOptionsResponseNonNullableFields = BulkCreateSubscriptionOptionsResponseNonNullableFields;
type index_d$1_BulkDeleteSubscriptionOptionsRequest = BulkDeleteSubscriptionOptionsRequest;
type index_d$1_BulkDeleteSubscriptionOptionsResponse = BulkDeleteSubscriptionOptionsResponse;
type index_d$1_BulkUpdateSubscriptionOptionsRequest = BulkUpdateSubscriptionOptionsRequest;
type index_d$1_BulkUpdateSubscriptionOptionsResponse = BulkUpdateSubscriptionOptionsResponse;
type index_d$1_BulkUpdateSubscriptionOptionsResponseNonNullableFields = BulkUpdateSubscriptionOptionsResponseNonNullableFields;
type index_d$1_CalculatePricesRequest = CalculatePricesRequest;
type index_d$1_CalculatePricesResponse = CalculatePricesResponse;
type index_d$1_CreateSubscriptionOptionRequest = CreateSubscriptionOptionRequest;
type index_d$1_CreateSubscriptionOptionResponse = CreateSubscriptionOptionResponse;
type index_d$1_CreateSubscriptionOptionResponseNonNullableFields = CreateSubscriptionOptionResponseNonNullableFields;
type index_d$1_DeleteSubscriptionOptionRequest = DeleteSubscriptionOptionRequest;
type index_d$1_DeleteSubscriptionOptionResponse = DeleteSubscriptionOptionResponse;
type index_d$1_Discount = Discount;
type index_d$1_DiscountType = DiscountType;
declare const index_d$1_DiscountType: typeof DiscountType;
type index_d$1_GetOneTimePurchasesStatusRequest = GetOneTimePurchasesStatusRequest;
type index_d$1_GetOneTimePurchasesStatusResponse = GetOneTimePurchasesStatusResponse;
type index_d$1_GetOneTimePurchasesStatusResponseNonNullableFields = GetOneTimePurchasesStatusResponseNonNullableFields;
type index_d$1_GetProductIdsForSubscriptionOptionOptions = GetProductIdsForSubscriptionOptionOptions;
type index_d$1_GetProductIdsForSubscriptionOptionRequest = GetProductIdsForSubscriptionOptionRequest;
type index_d$1_GetProductIdsForSubscriptionOptionResponse = GetProductIdsForSubscriptionOptionResponse;
type index_d$1_GetProductIdsForSubscriptionOptionResponseNonNullableFields = GetProductIdsForSubscriptionOptionResponseNonNullableFields;
type index_d$1_GetSubscriptionOptionRequest = GetSubscriptionOptionRequest;
type index_d$1_GetSubscriptionOptionResponse = GetSubscriptionOptionResponse;
type index_d$1_GetSubscriptionOptionResponseNonNullableFields = GetSubscriptionOptionResponseNonNullableFields;
type index_d$1_GetSubscriptionOptionsForProductOptions = GetSubscriptionOptionsForProductOptions;
type index_d$1_GetSubscriptionOptionsForProductRequest = GetSubscriptionOptionsForProductRequest;
type index_d$1_GetSubscriptionOptionsForProductResponse = GetSubscriptionOptionsForProductResponse;
type index_d$1_GetSubscriptionOptionsForProductResponseNonNullableFields = GetSubscriptionOptionsForProductResponseNonNullableFields;
type index_d$1_ListSubscriptionOptionsRequest = ListSubscriptionOptionsRequest;
type index_d$1_ListSubscriptionOptionsResponse = ListSubscriptionOptionsResponse;
type index_d$1_SubscriptionFrequency = SubscriptionFrequency;
declare const index_d$1_SubscriptionFrequency: typeof SubscriptionFrequency;
type index_d$1_SubscriptionOption = SubscriptionOption;
type index_d$1_SubscriptionOptionInProduct = SubscriptionOptionInProduct;
type index_d$1_SubscriptionOptionNonNullableFields = SubscriptionOptionNonNullableFields;
type index_d$1_SubscriptionOptionPriceData = SubscriptionOptionPriceData;
type index_d$1_SubscriptionOptionPrices = SubscriptionOptionPrices;
type index_d$1_SubscriptionSettings = SubscriptionSettings;
type index_d$1_UpdateSubscriptionOption = UpdateSubscriptionOption;
type index_d$1_UpdateSubscriptionOptionRequest = UpdateSubscriptionOptionRequest;
type index_d$1_UpdateSubscriptionOptionResponse = UpdateSubscriptionOptionResponse;
type index_d$1_UpdateSubscriptionOptionResponseNonNullableFields = UpdateSubscriptionOptionResponseNonNullableFields;
declare const index_d$1_allowOneTimePurchases: typeof allowOneTimePurchases;
declare const index_d$1_assignSubscriptionOptionsToProduct: typeof assignSubscriptionOptionsToProduct;
declare const index_d$1_bulkCreateSubscriptionOptions: typeof bulkCreateSubscriptionOptions;
declare const index_d$1_bulkDeleteSubscriptionOptions: typeof bulkDeleteSubscriptionOptions;
declare const index_d$1_bulkUpdateSubscriptionOptions: typeof bulkUpdateSubscriptionOptions;
declare const index_d$1_createSubscriptionOption: typeof createSubscriptionOption;
declare const index_d$1_deleteSubscriptionOption: typeof deleteSubscriptionOption;
declare const index_d$1_getOneTimePurchasesStatus: typeof getOneTimePurchasesStatus;
declare const index_d$1_getProductIdsForSubscriptionOption: typeof getProductIdsForSubscriptionOption;
declare const index_d$1_getSubscriptionOption: typeof getSubscriptionOption;
declare const index_d$1_getSubscriptionOptionsForProduct: typeof getSubscriptionOptionsForProduct;
declare const index_d$1_updateSubscriptionOption: typeof updateSubscriptionOption;
declare namespace index_d$1 {
  export { type index_d$1_AllowOneTimePurchasesRequest as AllowOneTimePurchasesRequest, type index_d$1_AllowOneTimePurchasesResponse as AllowOneTimePurchasesResponse, type index_d$1_AssignSubscriptionOptionsToProductOptions as AssignSubscriptionOptionsToProductOptions, type index_d$1_AssignSubscriptionOptionsToProductRequest as AssignSubscriptionOptionsToProductRequest, type index_d$1_AssignSubscriptionOptionsToProductResponse as AssignSubscriptionOptionsToProductResponse, type index_d$1_BulkCalculatePricesRequest as BulkCalculatePricesRequest, type index_d$1_BulkCalculatePricesRequestItem as BulkCalculatePricesRequestItem, type index_d$1_BulkCalculatePricesRequestV2 as BulkCalculatePricesRequestV2, type index_d$1_BulkCalculatePricesResponse as BulkCalculatePricesResponse, type index_d$1_BulkCalculatePricesResponseItem as BulkCalculatePricesResponseItem, type index_d$1_BulkCalculatePricesResponseV2 as BulkCalculatePricesResponseV2, type index_d$1_BulkCreateSubscriptionOptionsRequest as BulkCreateSubscriptionOptionsRequest, type index_d$1_BulkCreateSubscriptionOptionsResponse as BulkCreateSubscriptionOptionsResponse, type index_d$1_BulkCreateSubscriptionOptionsResponseNonNullableFields as BulkCreateSubscriptionOptionsResponseNonNullableFields, type index_d$1_BulkDeleteSubscriptionOptionsRequest as BulkDeleteSubscriptionOptionsRequest, type index_d$1_BulkDeleteSubscriptionOptionsResponse as BulkDeleteSubscriptionOptionsResponse, type index_d$1_BulkUpdateSubscriptionOptionsRequest as BulkUpdateSubscriptionOptionsRequest, type index_d$1_BulkUpdateSubscriptionOptionsResponse as BulkUpdateSubscriptionOptionsResponse, type index_d$1_BulkUpdateSubscriptionOptionsResponseNonNullableFields as BulkUpdateSubscriptionOptionsResponseNonNullableFields, type index_d$1_CalculatePricesRequest as CalculatePricesRequest, type index_d$1_CalculatePricesResponse as CalculatePricesResponse, type index_d$1_CreateSubscriptionOptionRequest as CreateSubscriptionOptionRequest, type index_d$1_CreateSubscriptionOptionResponse as CreateSubscriptionOptionResponse, type index_d$1_CreateSubscriptionOptionResponseNonNullableFields as CreateSubscriptionOptionResponseNonNullableFields, type index_d$1_DeleteSubscriptionOptionRequest as DeleteSubscriptionOptionRequest, type index_d$1_DeleteSubscriptionOptionResponse as DeleteSubscriptionOptionResponse, type index_d$1_Discount as Discount, index_d$1_DiscountType as DiscountType, type index_d$1_GetOneTimePurchasesStatusRequest as GetOneTimePurchasesStatusRequest, type index_d$1_GetOneTimePurchasesStatusResponse as GetOneTimePurchasesStatusResponse, type index_d$1_GetOneTimePurchasesStatusResponseNonNullableFields as GetOneTimePurchasesStatusResponseNonNullableFields, type index_d$1_GetProductIdsForSubscriptionOptionOptions as GetProductIdsForSubscriptionOptionOptions, type index_d$1_GetProductIdsForSubscriptionOptionRequest as GetProductIdsForSubscriptionOptionRequest, type index_d$1_GetProductIdsForSubscriptionOptionResponse as GetProductIdsForSubscriptionOptionResponse, type index_d$1_GetProductIdsForSubscriptionOptionResponseNonNullableFields as GetProductIdsForSubscriptionOptionResponseNonNullableFields, type index_d$1_GetSubscriptionOptionRequest as GetSubscriptionOptionRequest, type index_d$1_GetSubscriptionOptionResponse as GetSubscriptionOptionResponse, type index_d$1_GetSubscriptionOptionResponseNonNullableFields as GetSubscriptionOptionResponseNonNullableFields, type index_d$1_GetSubscriptionOptionsForProductOptions as GetSubscriptionOptionsForProductOptions, type index_d$1_GetSubscriptionOptionsForProductRequest as GetSubscriptionOptionsForProductRequest, type index_d$1_GetSubscriptionOptionsForProductResponse as GetSubscriptionOptionsForProductResponse, type index_d$1_GetSubscriptionOptionsForProductResponseNonNullableFields as GetSubscriptionOptionsForProductResponseNonNullableFields, type index_d$1_ListSubscriptionOptionsRequest as ListSubscriptionOptionsRequest, type index_d$1_ListSubscriptionOptionsResponse as ListSubscriptionOptionsResponse, type Paging$1 as Paging, type PagingMetadata$1 as PagingMetadata, index_d$1_SubscriptionFrequency as SubscriptionFrequency, type index_d$1_SubscriptionOption as SubscriptionOption, type index_d$1_SubscriptionOptionInProduct as SubscriptionOptionInProduct, type index_d$1_SubscriptionOptionNonNullableFields as SubscriptionOptionNonNullableFields, type index_d$1_SubscriptionOptionPriceData as SubscriptionOptionPriceData, type index_d$1_SubscriptionOptionPrices as SubscriptionOptionPrices, type index_d$1_SubscriptionSettings as SubscriptionSettings, type index_d$1_UpdateSubscriptionOption as UpdateSubscriptionOption, type index_d$1_UpdateSubscriptionOptionRequest as UpdateSubscriptionOptionRequest, type index_d$1_UpdateSubscriptionOptionResponse as UpdateSubscriptionOptionResponse, type index_d$1_UpdateSubscriptionOptionResponseNonNullableFields as UpdateSubscriptionOptionResponseNonNullableFields, index_d$1_allowOneTimePurchases as allowOneTimePurchases, index_d$1_assignSubscriptionOptionsToProduct as assignSubscriptionOptionsToProduct, index_d$1_bulkCreateSubscriptionOptions as bulkCreateSubscriptionOptions, index_d$1_bulkDeleteSubscriptionOptions as bulkDeleteSubscriptionOptions, index_d$1_bulkUpdateSubscriptionOptions as bulkUpdateSubscriptionOptions, index_d$1_createSubscriptionOption as createSubscriptionOption, index_d$1_deleteSubscriptionOption as deleteSubscriptionOption, index_d$1_getOneTimePurchasesStatus as getOneTimePurchasesStatus, index_d$1_getProductIdsForSubscriptionOption as getProductIdsForSubscriptionOption, index_d$1_getSubscriptionOption as getSubscriptionOption, index_d$1_getSubscriptionOptionsForProduct as getSubscriptionOptionsForProduct, index_d$1_updateSubscriptionOption as updateSubscriptionOption };
}

interface InventoryItemV2 {
    /** Inventory item ID. */
    _id?: string | null;
    /**
     * @internal
     * @internal
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /**
     * Product ID.
     * @readonly
     */
    productId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventory’s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
interface InventoryVariantV2 {
    /** Variant ID. */
    variantId?: string;
    /** Whether the product is listed as in stock. */
    inStock?: boolean | null;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /**
     * Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level.
     * @readonly
     */
    availableForPreorder?: boolean;
}
interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
interface InventoryItemChanged {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Whether inventory is being tracked. */
    trackInventory?: boolean;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
    /** Date and time the inventory item was last updated. */
    _updatedDate?: Date | null;
}
interface InventoryVariantsChanged {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Information about changed variants. */
    variants?: ChangedInventoryVariant[];
    /** Date and time the inventory variant item was last updated. */
    _updatedDate?: Date | null;
}
interface ChangedInventoryVariant {
    /** Variant ID. */
    _id?: string;
    /** Previous inventory variant data. */
    oldValue?: ChangedInventoryVariantData;
    /** Current inventory variant data. */
    newValue?: ChangedInventoryVariantData;
}
interface ChangedInventoryVariantData {
    /** Inventory variant quantity. */
    quantity?: number | null;
    /** Whether the product variant is in stock. */
    inStock?: boolean;
    /** Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level. */
    availableForPreorder?: boolean;
}
declare enum ReasonType {
    UNKNOWN = "UNKNOWN",
    ORDER = "ORDER",
    MANUAL = "MANUAL",
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
interface GetInventoryVariantsRequest extends GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
/** @oneof */
interface GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface GetInventoryVariantsResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItemV2;
}
interface GetInventoryItemsRequest {
    /** Product IDs */
    productIds?: string[];
}
interface GetInventoryItemsResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
}
interface QueryInventoryRequest {
    /** Information about paging, filters, sorting. */
    query?: Query;
}
interface Query {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
interface Paging {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface QueryInventoryResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
    /** Display metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface UpdateInventoryVariantsRequest {
    /** Inventory item. */
    inventoryItem: InventoryItemV2;
}
interface UpdateInventoryVariantsResponse {
}
interface BulkUpdateInventoryVariantsRequest extends BulkUpdateInventoryVariantsRequestActionOneOf {
    /** Change availability. */
    setInStock?: boolean | null;
    /** Set new quantity. */
    setQuantity?: number | null;
    /** Number to increment inventory by. */
    incrementBy?: number | null;
    /** Number to decrement inventory by. */
    decrementBy?: number | null;
    /** Variants filter. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
}
/** @oneof */
interface BulkUpdateInventoryVariantsRequestActionOneOf {
    /** Change availability. */
    setInStock?: boolean | null;
    /** Set new quantity. */
    setQuantity?: number | null;
    /** Number to increment inventory by. */
    incrementBy?: number | null;
    /** Number to decrement inventory by. */
    decrementBy?: number | null;
}
interface BulkUpdateInventoryVariantsResponse {
}
interface BulkUpdateInventoryItemsRequest {
    /** Variants filter */
    variantsFilter?: Record<string, any> | null;
    /** Whether inventory is being tracked. */
    trackInventory?: boolean | null;
}
interface BulkUpdateInventoryItemsResponse {
}
interface DecrementInventoryRequest {
    /** Item or product to decrement. */
    decrementData?: DecrementData[];
}
interface DecrementData extends DecrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant ID. */
    variantId?: string;
    /** Number to decrement inventory by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the item's inventory was made as part of a purchase that includes preorder items.
     * If true and the item is available for preorder, we allow negative inventory.
     * If false and the item is not available for preorder, we allow regular buy flow (no negative inventory).
     */
    preorderRequest?: boolean;
}
/** @oneof */
interface DecrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface DecrementInventoryResponse {
}
interface IncrementInventoryRequest {
    /** Item or product to increment. */
    incrementData?: IncrementData[];
}
interface IncrementData extends IncrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant ID. */
    variantId?: string;
    /** Number to increment inventory by. */
    incrementBy?: number;
}
/** @oneof */
interface IncrementDataIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /** Product ID. */
    productId?: string;
}
interface IncrementInventoryResponse {
}
interface InventoryVariantV2NonNullableFields {
    variantId: string;
    availableForPreorder: boolean;
}
interface PreorderInfoNonNullableFields {
    enabled: boolean;
}
interface InventoryItemV2NonNullableFields {
    variants: InventoryVariantV2NonNullableFields[];
    numericId: string;
    preorderInfo?: PreorderInfoNonNullableFields;
}
interface GetInventoryVariantsResponseNonNullableFields {
    inventoryItem?: InventoryItemV2NonNullableFields;
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
interface QueryInventoryResponseNonNullableFields {
    inventoryItems: InventoryItemV2NonNullableFields[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}
interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface InventoryItemChangedEnvelope {
    data: InventoryItemChanged;
    metadata: BaseEventMetadata;
}
interface InventoryVariantsChangedEnvelope {
    data: InventoryVariantsChanged;
    metadata: BaseEventMetadata;
}
interface GetInventoryVariantsOptions extends GetInventoryVariantsRequestIdOneOf {
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
interface QueryInventoryOptions {
    /** Information about paging, filters, sorting. */
    query?: Query;
}
interface UpdateInventoryVariantsInventoryItem {
    /** Inventory item ID. */
    _id?: string | null;
    /**
     * @internal
     * @internal
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventory’s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}

declare function getInventoryVariants$1(httpClient: HttpClient): GetInventoryVariantsSignature;
interface GetInventoryVariantsSignature {
    /**
     * Gets inventory variant information based on the specified option choices.
     *
     *
     * The `getInventoryVariants()` function returns a Promise that resolves to the specified inventory variant information.
     * @param - Inventory item ID.
     */
    (inventoryId: string, options?: GetInventoryVariantsOptions | undefined): Promise<GetInventoryVariantsResponse & GetInventoryVariantsResponseNonNullableFields>;
}
declare function queryInventory$1(httpClient: HttpClient): QueryInventorySignature;
interface QueryInventorySignature {
    /**
     * Returns a list of inventory items, given the provided paging, sorting and filtering.
     */
    (options?: QueryInventoryOptions | undefined): Promise<QueryInventoryResponse & QueryInventoryResponseNonNullableFields>;
}
declare function updateInventoryVariants$1(httpClient: HttpClient): UpdateInventoryVariantsSignature;
interface UpdateInventoryVariantsSignature {
    /**
     * Updates product inventory, including total quantity, whether the product is in stock, and whether the product inventory is tracked.
     *
     *
     * The `updateInventoryVariants()` function is a Promise that resolves to the updated inventory variant data.
     * @param - Product ID.
     * @param - Inventory item to update.
     */
    (productId: string | null, inventoryItem: UpdateInventoryVariantsInventoryItem): Promise<void>;
}
declare function decrementInventory$1(httpClient: HttpClient): DecrementInventorySignature;
interface DecrementInventorySignature {
    /**
     * Subtracts a set number of items from inventory.
     *
     *
     * The `decrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
     * @param - Item or product to decrement.
     */
    (decrementData: DecrementData[]): Promise<void>;
}
declare function incrementInventory$1(httpClient: HttpClient): IncrementInventorySignature;
interface IncrementInventorySignature {
    /**
     * Adds a set number of items to inventory.
     *
     *
     * The `incrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
     * @param - Item or product to increment.
     */
    (incrementData: IncrementData[]): Promise<void>;
}
declare const onInventoryItemChanged$1: EventDefinition<InventoryItemChangedEnvelope, "com.wix.ecommerce.inventory.api.v1.InventoryItemChanged">;
declare const onInventoryVariantsChanged$1: EventDefinition<InventoryVariantsChangedEnvelope, "com.wix.ecommerce.inventory.api.v1.InventoryVariantsChanged">;

declare function createEventModule<T extends EventDefinition<any, string>>(eventDefinition: T): BuildEventDefinition<T> & T;

declare const getInventoryVariants: MaybeContext<BuildRESTFunction<typeof getInventoryVariants$1> & typeof getInventoryVariants$1>;
declare const queryInventory: MaybeContext<BuildRESTFunction<typeof queryInventory$1> & typeof queryInventory$1>;
declare const updateInventoryVariants: MaybeContext<BuildRESTFunction<typeof updateInventoryVariants$1> & typeof updateInventoryVariants$1>;
declare const decrementInventory: MaybeContext<BuildRESTFunction<typeof decrementInventory$1> & typeof decrementInventory$1>;
declare const incrementInventory: MaybeContext<BuildRESTFunction<typeof incrementInventory$1> & typeof incrementInventory$1>;

type _publicOnInventoryItemChangedType = typeof onInventoryItemChanged$1;
/**
 * Triggered when an inventory item is changed.
 */
declare const onInventoryItemChanged: ReturnType<typeof createEventModule<_publicOnInventoryItemChangedType>>;

type _publicOnInventoryVariantsChangedType = typeof onInventoryVariantsChanged$1;
/**
 * Triggered when inventory variants are changed.
 */
declare const onInventoryVariantsChanged: ReturnType<typeof createEventModule<_publicOnInventoryVariantsChangedType>>;

type index_d_BaseEventMetadata = BaseEventMetadata;
type index_d_BulkUpdateInventoryItemsRequest = BulkUpdateInventoryItemsRequest;
type index_d_BulkUpdateInventoryItemsResponse = BulkUpdateInventoryItemsResponse;
type index_d_BulkUpdateInventoryVariantsRequest = BulkUpdateInventoryVariantsRequest;
type index_d_BulkUpdateInventoryVariantsRequestActionOneOf = BulkUpdateInventoryVariantsRequestActionOneOf;
type index_d_BulkUpdateInventoryVariantsResponse = BulkUpdateInventoryVariantsResponse;
type index_d_ChangedInventoryVariant = ChangedInventoryVariant;
type index_d_ChangedInventoryVariantData = ChangedInventoryVariantData;
type index_d_DecrementData = DecrementData;
type index_d_DecrementDataIdOneOf = DecrementDataIdOneOf;
type index_d_DecrementInventoryRequest = DecrementInventoryRequest;
type index_d_DecrementInventoryResponse = DecrementInventoryResponse;
type index_d_GetInventoryItemsRequest = GetInventoryItemsRequest;
type index_d_GetInventoryItemsResponse = GetInventoryItemsResponse;
type index_d_GetInventoryVariantsOptions = GetInventoryVariantsOptions;
type index_d_GetInventoryVariantsRequest = GetInventoryVariantsRequest;
type index_d_GetInventoryVariantsRequestIdOneOf = GetInventoryVariantsRequestIdOneOf;
type index_d_GetInventoryVariantsResponse = GetInventoryVariantsResponse;
type index_d_GetInventoryVariantsResponseNonNullableFields = GetInventoryVariantsResponseNonNullableFields;
type index_d_IdentificationData = IdentificationData;
type index_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
type index_d_IncrementData = IncrementData;
type index_d_IncrementDataIdOneOf = IncrementDataIdOneOf;
type index_d_IncrementInventoryRequest = IncrementInventoryRequest;
type index_d_IncrementInventoryResponse = IncrementInventoryResponse;
type index_d_InventoryItemChanged = InventoryItemChanged;
type index_d_InventoryItemChangedEnvelope = InventoryItemChangedEnvelope;
type index_d_InventoryItemV2 = InventoryItemV2;
type index_d_InventoryVariantV2 = InventoryVariantV2;
type index_d_InventoryVariantsChanged = InventoryVariantsChanged;
type index_d_InventoryVariantsChangedEnvelope = InventoryVariantsChangedEnvelope;
type index_d_MessageEnvelope = MessageEnvelope;
type index_d_Paging = Paging;
type index_d_PagingMetadata = PagingMetadata;
type index_d_PreorderInfo = PreorderInfo;
type index_d_Query = Query;
type index_d_QueryInventoryOptions = QueryInventoryOptions;
type index_d_QueryInventoryRequest = QueryInventoryRequest;
type index_d_QueryInventoryResponse = QueryInventoryResponse;
type index_d_QueryInventoryResponseNonNullableFields = QueryInventoryResponseNonNullableFields;
type index_d_ReasonType = ReasonType;
declare const index_d_ReasonType: typeof ReasonType;
type index_d_UpdateInventoryVariantsInventoryItem = UpdateInventoryVariantsInventoryItem;
type index_d_UpdateInventoryVariantsRequest = UpdateInventoryVariantsRequest;
type index_d_UpdateInventoryVariantsResponse = UpdateInventoryVariantsResponse;
type index_d_WebhookIdentityType = WebhookIdentityType;
declare const index_d_WebhookIdentityType: typeof WebhookIdentityType;
type index_d__publicOnInventoryItemChangedType = _publicOnInventoryItemChangedType;
type index_d__publicOnInventoryVariantsChangedType = _publicOnInventoryVariantsChangedType;
declare const index_d_decrementInventory: typeof decrementInventory;
declare const index_d_getInventoryVariants: typeof getInventoryVariants;
declare const index_d_incrementInventory: typeof incrementInventory;
declare const index_d_onInventoryItemChanged: typeof onInventoryItemChanged;
declare const index_d_onInventoryVariantsChanged: typeof onInventoryVariantsChanged;
declare const index_d_queryInventory: typeof queryInventory;
declare const index_d_updateInventoryVariants: typeof updateInventoryVariants;
declare namespace index_d {
  export { type index_d_BaseEventMetadata as BaseEventMetadata, type index_d_BulkUpdateInventoryItemsRequest as BulkUpdateInventoryItemsRequest, type index_d_BulkUpdateInventoryItemsResponse as BulkUpdateInventoryItemsResponse, type index_d_BulkUpdateInventoryVariantsRequest as BulkUpdateInventoryVariantsRequest, type index_d_BulkUpdateInventoryVariantsRequestActionOneOf as BulkUpdateInventoryVariantsRequestActionOneOf, type index_d_BulkUpdateInventoryVariantsResponse as BulkUpdateInventoryVariantsResponse, type index_d_ChangedInventoryVariant as ChangedInventoryVariant, type index_d_ChangedInventoryVariantData as ChangedInventoryVariantData, type index_d_DecrementData as DecrementData, type index_d_DecrementDataIdOneOf as DecrementDataIdOneOf, type index_d_DecrementInventoryRequest as DecrementInventoryRequest, type index_d_DecrementInventoryResponse as DecrementInventoryResponse, type index_d_GetInventoryItemsRequest as GetInventoryItemsRequest, type index_d_GetInventoryItemsResponse as GetInventoryItemsResponse, type index_d_GetInventoryVariantsOptions as GetInventoryVariantsOptions, type index_d_GetInventoryVariantsRequest as GetInventoryVariantsRequest, type index_d_GetInventoryVariantsRequestIdOneOf as GetInventoryVariantsRequestIdOneOf, type index_d_GetInventoryVariantsResponse as GetInventoryVariantsResponse, type index_d_GetInventoryVariantsResponseNonNullableFields as GetInventoryVariantsResponseNonNullableFields, type index_d_IdentificationData as IdentificationData, type index_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf, type index_d_IncrementData as IncrementData, type index_d_IncrementDataIdOneOf as IncrementDataIdOneOf, type index_d_IncrementInventoryRequest as IncrementInventoryRequest, type index_d_IncrementInventoryResponse as IncrementInventoryResponse, type index_d_InventoryItemChanged as InventoryItemChanged, type index_d_InventoryItemChangedEnvelope as InventoryItemChangedEnvelope, type index_d_InventoryItemV2 as InventoryItemV2, type index_d_InventoryVariantV2 as InventoryVariantV2, type index_d_InventoryVariantsChanged as InventoryVariantsChanged, type index_d_InventoryVariantsChangedEnvelope as InventoryVariantsChangedEnvelope, type index_d_MessageEnvelope as MessageEnvelope, type index_d_Paging as Paging, type index_d_PagingMetadata as PagingMetadata, type index_d_PreorderInfo as PreorderInfo, type index_d_Query as Query, type index_d_QueryInventoryOptions as QueryInventoryOptions, type index_d_QueryInventoryRequest as QueryInventoryRequest, type index_d_QueryInventoryResponse as QueryInventoryResponse, type index_d_QueryInventoryResponseNonNullableFields as QueryInventoryResponseNonNullableFields, index_d_ReasonType as ReasonType, type index_d_UpdateInventoryVariantsInventoryItem as UpdateInventoryVariantsInventoryItem, type index_d_UpdateInventoryVariantsRequest as UpdateInventoryVariantsRequest, type index_d_UpdateInventoryVariantsResponse as UpdateInventoryVariantsResponse, index_d_WebhookIdentityType as WebhookIdentityType, type index_d__publicOnInventoryItemChangedType as _publicOnInventoryItemChangedType, type index_d__publicOnInventoryVariantsChangedType as _publicOnInventoryVariantsChangedType, index_d_decrementInventory as decrementInventory, index_d_getInventoryVariants as getInventoryVariants, index_d_incrementInventory as incrementInventory, index_d_onInventoryItemChanged as onInventoryItemChanged, index_d_onInventoryVariantsChanged as onInventoryVariantsChanged, onInventoryItemChanged$1 as publicOnInventoryItemChanged, onInventoryVariantsChanged$1 as publicOnInventoryVariantsChanged, index_d_queryInventory as queryInventory, index_d_updateInventoryVariants as updateInventoryVariants };
}

export { index_d$9 as brandsV3, index_d$4 as catalogVersioning, index_d$b as collections, index_d$8 as customizationsV3, index_d$7 as infoSectionsV3, index_d as inventory, index_d$6 as inventoryItemsV3, index_d$a as products, index_d$5 as productsV3, index_d$3 as ribbonsV3, index_d$2 as storesLocationsV3, index_d$1 as subscriptionOptions, index_d$c as wishlist };
