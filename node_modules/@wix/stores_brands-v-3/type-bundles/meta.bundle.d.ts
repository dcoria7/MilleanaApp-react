/**
 * A brand is a visible property of a product.
 * Adding brands to your products can help improve site and product visibility on search engines.
 */
interface Brand$1 {
    /**
     * Brand ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface CreateBrandRequest$1 {
    /** Brand to create. */
    brand: Brand$1;
}
interface CreateBrandResponse$1 {
    /** Created brand. */
    brand?: Brand$1;
}
interface GetBrandRequest$1 {
    /** Brand ID. */
    brandId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
declare enum RequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetBrandResponse$1 {
    /** Brand. */
    brand?: Brand$1;
}
interface UpdateBrandRequest$1 {
    /** Brand to update. */
    brand: Brand$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface UpdateBrandResponse$1 {
    /** Updated brand. */
    brand?: Brand$1;
}
interface DeleteBrandRequest$1 {
    /** Brand ID. */
    brandId: string;
}
interface DeleteBrandResponse$1 {
}
interface QueryBrandsRequest$1 {
    /** Query options. */
    query?: CursorQuery$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBrandsResponse$1 {
    /** List of brands. */
    brands?: Brand$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateBrandsRequest$1 {
    /** Brands to create. */
    brands: Brand$1[];
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateBrandsResponse$1 {
    /** Brands created by bulk action. */
    results?: BulkBrandsResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkBrandsResult$1 {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Full brand entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Brand$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateBrandsRequest$1 {
    /** List of brands to update. */
    brands: MaskedBrand$1[];
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface MaskedBrand$1 {
    /** Brand to update. */
    brand?: Brand$1;
}
interface BulkUpdateBrandsResponse$1 {
    /** Brands updated by bulk action. */
    results?: BulkBrandsResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface GetOrCreateBrandRequest$1 {
    /** Brand name to retrieve or create. */
    brandName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface GetOrCreateBrandResponse$1 {
    /** Brand. */
    brand?: Brand$1;
}
interface BulkGetOrCreateBrandsRequest$1 {
    /** Brand names to retrieve or create. */
    brandNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface BulkGetOrCreateBrandsResponse$1 {
    /** Brands retrieved or created by bulk action. */
    results?: BulkBrandsResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkDeleteBrandsRequest$1 {
    /** IDs of brands to delete. */
    brandIds: string[];
}
interface BulkDeleteBrandsResponse$1 {
    /** Brands deleted by bulk action. */
    results?: BulkDeleteBrandsResponseBulkBrandsResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkDeleteBrandsResponseBulkBrandsResult$1 {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata$1;
}
interface BrandNonNullableFields$1 {
    name: string;
}
interface CreateBrandResponseNonNullableFields$1 {
    brand?: BrandNonNullableFields$1;
}
interface GetBrandResponseNonNullableFields$1 {
    brand?: BrandNonNullableFields$1;
}
interface UpdateBrandResponseNonNullableFields$1 {
    brand?: BrandNonNullableFields$1;
}
interface QueryBrandsResponseNonNullableFields$1 {
    brands: BrandNonNullableFields$1[];
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface BulkBrandsResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: BrandNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateBrandsResponseNonNullableFields$1 {
    results: BulkBrandsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateBrandsResponseNonNullableFields$1 {
    results: BulkBrandsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface GetOrCreateBrandResponseNonNullableFields$1 {
    brand?: BrandNonNullableFields$1;
}
interface BulkGetOrCreateBrandsResponseNonNullableFields$1 {
    results: BulkBrandsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkDeleteBrandsResponseNonNullableFields$1 {
    results: BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

/**
 * A brand is a visible property of a product.
 * Adding brands to your products can help improve site and product visibility on search engines.
 */
interface Brand {
    /**
     * Brand ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface CreateBrandRequest {
    /** Brand to create. */
    brand: Brand;
}
interface CreateBrandResponse {
    /** Created brand. */
    brand?: Brand;
}
interface GetBrandRequest {
    /** Brand ID. */
    brandId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
interface GetBrandResponse {
    /** Brand. */
    brand?: Brand;
}
interface UpdateBrandRequest {
    /** Brand to update. */
    brand: Brand;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateBrandResponse {
    /** Updated brand. */
    brand?: Brand;
}
interface DeleteBrandRequest {
    /** Brand ID. */
    brandId: string;
}
interface DeleteBrandResponse {
}
interface QueryBrandsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryBrandsResponse {
    /** List of brands. */
    brands?: Brand[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateBrandsRequest {
    /** Brands to create. */
    brands: Brand[];
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateBrandsResponse {
    /** Brands created by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata;
    /**
     * Full brand entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Brand;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateBrandsRequest {
    /** List of brands to update. */
    brands: MaskedBrand[];
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface MaskedBrand {
    /** Brand to update. */
    brand?: Brand;
}
interface BulkUpdateBrandsResponse {
    /** Brands updated by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface GetOrCreateBrandRequest {
    /** Brand name to retrieve or create. */
    brandName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface GetOrCreateBrandResponse {
    /** Brand. */
    brand?: Brand;
}
interface BulkGetOrCreateBrandsRequest {
    /** Brand names to retrieve or create. */
    brandNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateBrandsResponse {
    /** Brands retrieved or created by bulk action. */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteBrandsRequest {
    /** IDs of brands to delete. */
    brandIds: string[];
}
interface BulkDeleteBrandsResponse {
    /** Brands deleted by bulk action. */
    results?: BulkDeleteBrandsResponseBulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteBrandsResponseBulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata;
}
interface BrandNonNullableFields {
    name: string;
}
interface CreateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface GetBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface UpdateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface QueryBrandsResponseNonNullableFields {
    brands: BrandNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkBrandsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: BrandNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface GetOrCreateBrandResponseNonNullableFields {
    brand?: BrandNonNullableFields;
}
interface BulkGetOrCreateBrandsResponseNonNullableFields {
    results: BulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkDeleteBrandsResponseNonNullableFields {
    results: BulkDeleteBrandsResponseBulkBrandsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createBrand(): __PublicMethodMetaInfo<'POST', {}, CreateBrandRequest, CreateBrandRequest$1, CreateBrandResponse & CreateBrandResponseNonNullableFields, CreateBrandResponse$1 & CreateBrandResponseNonNullableFields$1>;
declare function getBrand(): __PublicMethodMetaInfo<'GET', {
    brandId: string;
}, GetBrandRequest, GetBrandRequest$1, GetBrandResponse & GetBrandResponseNonNullableFields, GetBrandResponse$1 & GetBrandResponseNonNullableFields$1>;
declare function updateBrand(): __PublicMethodMetaInfo<'PATCH', {
    brandId: string;
}, UpdateBrandRequest, UpdateBrandRequest$1, UpdateBrandResponse & UpdateBrandResponseNonNullableFields, UpdateBrandResponse$1 & UpdateBrandResponseNonNullableFields$1>;
declare function deleteBrand(): __PublicMethodMetaInfo<'DELETE', {
    brandId: string;
}, DeleteBrandRequest, DeleteBrandRequest$1, DeleteBrandResponse, DeleteBrandResponse$1>;
declare function queryBrands(): __PublicMethodMetaInfo<'POST', {}, QueryBrandsRequest, QueryBrandsRequest$1, QueryBrandsResponse & QueryBrandsResponseNonNullableFields, QueryBrandsResponse$1 & QueryBrandsResponseNonNullableFields$1>;
declare function bulkCreateBrands(): __PublicMethodMetaInfo<'POST', {}, BulkCreateBrandsRequest, BulkCreateBrandsRequest$1, BulkCreateBrandsResponse & BulkCreateBrandsResponseNonNullableFields, BulkCreateBrandsResponse$1 & BulkCreateBrandsResponseNonNullableFields$1>;
declare function bulkUpdateBrands(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateBrandsRequest, BulkUpdateBrandsRequest$1, BulkUpdateBrandsResponse & BulkUpdateBrandsResponseNonNullableFields, BulkUpdateBrandsResponse$1 & BulkUpdateBrandsResponseNonNullableFields$1>;
declare function getOrCreateBrand(): __PublicMethodMetaInfo<'POST', {}, GetOrCreateBrandRequest, GetOrCreateBrandRequest$1, GetOrCreateBrandResponse & GetOrCreateBrandResponseNonNullableFields, GetOrCreateBrandResponse$1 & GetOrCreateBrandResponseNonNullableFields$1>;
declare function bulkGetOrCreateBrands(): __PublicMethodMetaInfo<'POST', {}, BulkGetOrCreateBrandsRequest, BulkGetOrCreateBrandsRequest$1, BulkGetOrCreateBrandsResponse & BulkGetOrCreateBrandsResponseNonNullableFields, BulkGetOrCreateBrandsResponse$1 & BulkGetOrCreateBrandsResponseNonNullableFields$1>;
declare function bulkDeleteBrands(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteBrandsRequest, BulkDeleteBrandsRequest$1, BulkDeleteBrandsResponse & BulkDeleteBrandsResponseNonNullableFields, BulkDeleteBrandsResponse$1 & BulkDeleteBrandsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, bulkCreateBrands, bulkDeleteBrands, bulkGetOrCreateBrands, bulkUpdateBrands, createBrand, deleteBrand, getBrand, getOrCreateBrand, queryBrands, updateBrand };
