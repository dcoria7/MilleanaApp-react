/** A Ribbon is a visual element that you can assign to products to highlight them on your site. */
interface Ribbon$1 {
    /**
     * Ribbon ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Ribbon name. */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
interface CreateRibbonRequest$1 {
    /** Ribbon to create. */
    ribbon: Ribbon$1;
}
interface CreateRibbonResponse$1 {
    /** Created ribbon. */
    ribbon?: Ribbon$1;
}
interface GetRibbonRequest$1 {
    /** Ribbon ID. */
    ribbonId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
declare enum RequestedFields$1 {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCT_COUNT = "ASSIGNED_PRODUCT_COUNT"
}
interface GetRibbonResponse$1 {
    /** Ribbon. */
    ribbon?: Ribbon$1;
}
interface UpdateRibbonRequest$1 {
    /** Ribbon to update. */
    ribbon: Ribbon$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface UpdateRibbonResponse$1 {
    /** Updated Ribbon. */
    ribbon?: Ribbon$1;
}
interface DeleteRibbonRequest$1 {
    /** Ribbon ID. */
    ribbonId: string;
}
interface DeleteRibbonResponse$1 {
}
interface QueryRibbonsRequest$1 {
    /** Query options. */
    query?: CursorQuery$1;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf$1 {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryRibbonsResponse$1 {
    /** List of ribbons. */
    ribbons?: Ribbon$1[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateRibbonsRequest$1 {
    /** Ribbons to create. */
    ribbons: Ribbon$1[];
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateRibbonsResponse$1 {
    /** Ribbons created by bulk action. */
    results?: V3BulkRibbonResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface V3BulkRibbonResult$1 {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Full ribbon entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Ribbon$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateRibbonsRequest$1 {
    /** List of ribbons to update. */
    ribbons: MaskedRibbon$1[];
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface MaskedRibbon$1 {
    /** Ribbon to update. */
    ribbon?: Ribbon$1;
}
interface BulkUpdateRibbonsResponse$1 {
    /** Ribbons updated by bulk action. */
    results?: V3BulkRibbonResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface GetOrCreateRibbonRequest$1 {
    /** Ribbon name to retrieve or create. */
    ribbonName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface GetOrCreateRibbonResponse$1 {
    /** Ribbon. */
    ribbon?: Ribbon$1;
}
interface BulkGetOrCreateRibbonsRequest$1 {
    /** Ribbon names to retrieve or create. */
    ribbonNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields$1[];
}
interface BulkGetOrCreateRibbonsResponse$1 {
    /** Ribbons retrieved or created by bulk action. */
    results?: V3BulkRibbonResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkDeleteRibbonsRequest$1 {
    /** IDs of ribbons to delete. */
    ribbonIds: string[];
}
interface BulkDeleteRibbonsResponse$1 {
    /** Ribbons deleted by bulk action. */
    results?: BulkRibbonResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkRibbonResult$1 {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata$1;
}
interface RibbonNonNullableFields$1 {
    name: string;
}
interface CreateRibbonResponseNonNullableFields$1 {
    ribbon?: RibbonNonNullableFields$1;
}
interface GetRibbonResponseNonNullableFields$1 {
    ribbon?: RibbonNonNullableFields$1;
}
interface UpdateRibbonResponseNonNullableFields$1 {
    ribbon?: RibbonNonNullableFields$1;
}
interface QueryRibbonsResponseNonNullableFields$1 {
    ribbons: RibbonNonNullableFields$1[];
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface V3BulkRibbonResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: RibbonNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateRibbonsResponseNonNullableFields$1 {
    results: V3BulkRibbonResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateRibbonsResponseNonNullableFields$1 {
    results: V3BulkRibbonResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface GetOrCreateRibbonResponseNonNullableFields$1 {
    ribbon?: RibbonNonNullableFields$1;
}
interface BulkGetOrCreateRibbonsResponseNonNullableFields$1 {
    results: V3BulkRibbonResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkRibbonResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkDeleteRibbonsResponseNonNullableFields$1 {
    results: BulkRibbonResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

/** A Ribbon is a visual element that you can assign to products to highlight them on your site. */
interface Ribbon {
    /**
     * Ribbon ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Ribbon name. */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
interface CreateRibbonRequest {
    /** Ribbon to create. */
    ribbon: Ribbon;
}
interface CreateRibbonResponse {
    /** Created ribbon. */
    ribbon?: Ribbon;
}
interface GetRibbonRequest {
    /** Ribbon ID. */
    ribbonId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCT_COUNT = "ASSIGNED_PRODUCT_COUNT"
}
interface GetRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
interface UpdateRibbonRequest {
    /** Ribbon to update. */
    ribbon: Ribbon;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface UpdateRibbonResponse {
    /** Updated Ribbon. */
    ribbon?: Ribbon;
}
interface DeleteRibbonRequest {
    /** Ribbon ID. */
    ribbonId: string;
}
interface DeleteRibbonResponse {
}
interface QueryRibbonsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryRibbonsResponse {
    /** List of ribbons. */
    ribbons?: Ribbon[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface BulkCreateRibbonsRequest {
    /** Ribbons to create. */
    ribbons: Ribbon[];
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateRibbonsResponse {
    /** Ribbons created by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
    /**
     * Full ribbon entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Ribbon;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateRibbonsRequest {
    /** List of ribbons to update. */
    ribbons: MaskedRibbon[];
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface MaskedRibbon {
    /** Ribbon to update. */
    ribbon?: Ribbon;
}
interface BulkUpdateRibbonsResponse {
    /** Ribbons updated by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface GetOrCreateRibbonRequest {
    /** Ribbon name to retrieve or create. */
    ribbonName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface GetOrCreateRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
interface BulkGetOrCreateRibbonsRequest {
    /** Ribbon names to retrieve or create. */
    ribbonNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
interface BulkGetOrCreateRibbonsResponse {
    /** Ribbons retrieved or created by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteRibbonsRequest {
    /** IDs of ribbons to delete. */
    ribbonIds: string[];
}
interface BulkDeleteRibbonsResponse {
    /** Ribbons deleted by bulk action. */
    results?: BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
}
interface RibbonNonNullableFields {
    name: string;
}
interface CreateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface GetRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface UpdateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface QueryRibbonsResponseNonNullableFields {
    ribbons: RibbonNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface V3BulkRibbonResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: RibbonNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface GetOrCreateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
interface BulkGetOrCreateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkRibbonResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkDeleteRibbonsResponseNonNullableFields {
    results: BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createRibbon(): __PublicMethodMetaInfo<'POST', {}, CreateRibbonRequest, CreateRibbonRequest$1, CreateRibbonResponse & CreateRibbonResponseNonNullableFields, CreateRibbonResponse$1 & CreateRibbonResponseNonNullableFields$1>;
declare function getRibbon(): __PublicMethodMetaInfo<'GET', {
    ribbonId: string;
}, GetRibbonRequest, GetRibbonRequest$1, GetRibbonResponse & GetRibbonResponseNonNullableFields, GetRibbonResponse$1 & GetRibbonResponseNonNullableFields$1>;
declare function updateRibbon(): __PublicMethodMetaInfo<'PATCH', {
    ribbonId: string;
}, UpdateRibbonRequest, UpdateRibbonRequest$1, UpdateRibbonResponse & UpdateRibbonResponseNonNullableFields, UpdateRibbonResponse$1 & UpdateRibbonResponseNonNullableFields$1>;
declare function deleteRibbon(): __PublicMethodMetaInfo<'DELETE', {
    ribbonId: string;
}, DeleteRibbonRequest, DeleteRibbonRequest$1, DeleteRibbonResponse, DeleteRibbonResponse$1>;
declare function queryRibbons(): __PublicMethodMetaInfo<'POST', {}, QueryRibbonsRequest, QueryRibbonsRequest$1, QueryRibbonsResponse & QueryRibbonsResponseNonNullableFields, QueryRibbonsResponse$1 & QueryRibbonsResponseNonNullableFields$1>;
declare function bulkCreateRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkCreateRibbonsRequest, BulkCreateRibbonsRequest$1, BulkCreateRibbonsResponse & BulkCreateRibbonsResponseNonNullableFields, BulkCreateRibbonsResponse$1 & BulkCreateRibbonsResponseNonNullableFields$1>;
declare function bulkUpdateRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateRibbonsRequest, BulkUpdateRibbonsRequest$1, BulkUpdateRibbonsResponse & BulkUpdateRibbonsResponseNonNullableFields, BulkUpdateRibbonsResponse$1 & BulkUpdateRibbonsResponseNonNullableFields$1>;
declare function getOrCreateRibbon(): __PublicMethodMetaInfo<'POST', {}, GetOrCreateRibbonRequest, GetOrCreateRibbonRequest$1, GetOrCreateRibbonResponse & GetOrCreateRibbonResponseNonNullableFields, GetOrCreateRibbonResponse$1 & GetOrCreateRibbonResponseNonNullableFields$1>;
declare function bulkGetOrCreateRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkGetOrCreateRibbonsRequest, BulkGetOrCreateRibbonsRequest$1, BulkGetOrCreateRibbonsResponse & BulkGetOrCreateRibbonsResponseNonNullableFields, BulkGetOrCreateRibbonsResponse$1 & BulkGetOrCreateRibbonsResponseNonNullableFields$1>;
declare function bulkDeleteRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteRibbonsRequest, BulkDeleteRibbonsRequest$1, BulkDeleteRibbonsResponse & BulkDeleteRibbonsResponseNonNullableFields, BulkDeleteRibbonsResponse$1 & BulkDeleteRibbonsResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, bulkCreateRibbons, bulkDeleteRibbons, bulkGetOrCreateRibbons, bulkUpdateRibbons, createRibbon, deleteRibbon, getOrCreateRibbon, getRibbon, queryRibbons, updateRibbon };
