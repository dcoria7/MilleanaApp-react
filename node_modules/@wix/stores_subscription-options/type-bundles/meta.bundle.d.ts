interface SubscriptionOption$1 {
    /** Subscription option ID (auto-generated upon subscription option creation). */
    id?: string | null;
    /** Subscription option title. */
    title?: string | null;
    /** Subscription option description (optional). */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings$1;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount$1;
}
interface SubscriptionSettings$1 {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency$1;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface Discount$1 {
    /** Discount type. */
    type?: DiscountType$1;
    /** Discount value. */
    value?: number;
}
declare enum DiscountType$1 {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface CreateSubscriptionOptionRequest$1 {
    /** Subscription option info. */
    subscriptionOption: SubscriptionOption$1;
}
interface CreateSubscriptionOptionResponse$1 {
    /** Newly created subscription option. */
    subscriptionOption?: SubscriptionOption$1;
}
interface UpdateSubscriptionOptionRequest$1 {
    /** Subscription option info. Only the passed parameters will be updated. */
    subscriptionOption: SubscriptionOption$1;
}
interface UpdateSubscriptionOptionResponse$1 {
    /** Updated subscription option. */
    subscriptionOption?: SubscriptionOption$1;
}
interface DeleteSubscriptionOptionRequest$1 {
    /** ID of the subscription option to delete. */
    id: string;
}
interface DeleteSubscriptionOptionResponse$1 {
}
interface BulkCreateSubscriptionOptionsRequest$1 {
    /** Subscription options info. */
    subscriptionOptions: SubscriptionOption$1[];
}
interface BulkCreateSubscriptionOptionsResponse$1 {
    /** Newly created subscription options. */
    subscriptionOptions?: SubscriptionOption$1[];
}
interface BulkUpdateSubscriptionOptionsRequest$1 {
    /** Subscription options info. Only the passed parameters in each subscription option will be updated. */
    subscriptionOptions: SubscriptionOption$1[];
}
interface BulkUpdateSubscriptionOptionsResponse$1 {
    /** Updated subscription options. */
    subscriptionOptions?: SubscriptionOption$1[];
}
interface BulkDeleteSubscriptionOptionsRequest$1 {
    /** IDs of the subscription options to delete. */
    ids: string[];
}
interface BulkDeleteSubscriptionOptionsResponse$1 {
}
interface AssignSubscriptionOptionsToProductRequest$1 {
    /** Product ID. */
    productId: string;
    /** Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product. */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct$1[];
}
interface SubscriptionOptionInProduct$1 {
    /** Subscription option ID. */
    id?: string;
    /** Whether the subscription option is hidden for the product (the default is false). */
    hidden?: boolean;
    /**
     * Subscription option title.
     * @readonly
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @readonly
     */
    description?: string | null;
    /**
     * Subscription payment settings. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     * @readonly
     */
    subscriptionSettings?: SubscriptionSettings$1;
    /**
     * Discount info (optional).
     * @readonly
     */
    discount?: Discount$1;
}
interface AssignSubscriptionOptionsToProductResponse$1 {
}
interface AllowOneTimePurchasesRequest$1 {
    /** Product ID. */
    productId: string;
    /** Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only. */
    allowed: boolean | null;
}
interface AllowOneTimePurchasesResponse$1 {
}
interface GetSubscriptionOptionRequest$1 {
    /** Subscription option ID. */
    id: string;
}
interface GetSubscriptionOptionResponse$1 {
    /** Subscription option. */
    subscriptionOption?: SubscriptionOption$1;
}
interface GetSubscriptionOptionsForProductRequest$1 {
    /** Product ID. */
    productId: string;
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetSubscriptionOptionsForProductResponse$1 {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOptionInProduct$1[];
}
interface GetProductIdsForSubscriptionOptionRequest$1 {
    /** Subscription option ID. */
    id: string;
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging$1;
}
interface Paging$1 {
    /** Amount of items to load per page. */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number | null;
}
interface GetProductIdsForSubscriptionOptionResponse$1 {
    /** IDs of products associated with the specified subscription option. */
    productIds?: string[];
    /** Paging metadata. */
    metadata?: PagingMetadata$1;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata$1 {
    /** Amount of items to load per page. */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number;
}
interface GetOneTimePurchasesStatusRequest$1 {
    /** Product ID. */
    productId: string;
}
interface GetOneTimePurchasesStatusResponse$1 {
    /** Whether the specified product is available for one-time purchase */
    allowed?: boolean;
}
interface SubscriptionSettingsNonNullableFields$1 {
    frequency: SubscriptionFrequency$1;
    autoRenewal: boolean;
}
interface DiscountNonNullableFields$1 {
    type: DiscountType$1;
    value: number;
}
interface SubscriptionOptionNonNullableFields$1 {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
    discount?: DiscountNonNullableFields$1;
}
interface CreateSubscriptionOptionResponseNonNullableFields$1 {
    subscriptionOption?: SubscriptionOptionNonNullableFields$1;
}
interface UpdateSubscriptionOptionResponseNonNullableFields$1 {
    subscriptionOption?: SubscriptionOptionNonNullableFields$1;
}
interface BulkCreateSubscriptionOptionsResponseNonNullableFields$1 {
    subscriptionOptions: SubscriptionOptionNonNullableFields$1[];
}
interface BulkUpdateSubscriptionOptionsResponseNonNullableFields$1 {
    subscriptionOptions: SubscriptionOptionNonNullableFields$1[];
}
interface GetSubscriptionOptionResponseNonNullableFields$1 {
    subscriptionOption?: SubscriptionOptionNonNullableFields$1;
}
interface SubscriptionOptionInProductNonNullableFields$1 {
    id: string;
    hidden: boolean;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields$1;
    discount?: DiscountNonNullableFields$1;
}
interface GetSubscriptionOptionsForProductResponseNonNullableFields$1 {
    subscriptionOptions: SubscriptionOptionInProductNonNullableFields$1[];
}
interface PagingMetadataNonNullableFields$1 {
    items: number;
    offset: number;
}
interface GetProductIdsForSubscriptionOptionResponseNonNullableFields$1 {
    productIds: string[];
    metadata?: PagingMetadataNonNullableFields$1;
    totalResults: number;
}
interface GetOneTimePurchasesStatusResponseNonNullableFields$1 {
    allowed: boolean;
}

interface SubscriptionOption {
    /** Subscription option ID (auto-generated upon subscription option creation). */
    _id?: string | null;
    /** Subscription option title. */
    title?: string | null;
    /** Subscription option description (optional). */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface Discount {
    /** Discount type. */
    type?: DiscountType;
    /** Discount value. */
    value?: number;
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
interface CreateSubscriptionOptionRequest {
    /** Subscription option info. */
    subscriptionOption: SubscriptionOption;
}
interface CreateSubscriptionOptionResponse {
    /** Newly created subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface UpdateSubscriptionOptionRequest {
    /** Subscription option info. Only the passed parameters will be updated. */
    subscriptionOption: SubscriptionOption;
}
interface UpdateSubscriptionOptionResponse {
    /** Updated subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface DeleteSubscriptionOptionRequest {
    /** ID of the subscription option to delete. */
    _id: string;
}
interface DeleteSubscriptionOptionResponse {
}
interface BulkCreateSubscriptionOptionsRequest {
    /** Subscription options info. */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkCreateSubscriptionOptionsResponse {
    /** Newly created subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsRequest {
    /** Subscription options info. Only the passed parameters in each subscription option will be updated. */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsResponse {
    /** Updated subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkDeleteSubscriptionOptionsRequest {
    /** IDs of the subscription options to delete. */
    ids: string[];
}
interface BulkDeleteSubscriptionOptionsResponse {
}
interface AssignSubscriptionOptionsToProductRequest {
    /** Product ID. */
    productId: string;
    /** Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product. */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}
interface SubscriptionOptionInProduct {
    /** Subscription option ID. */
    _id?: string;
    /** Whether the subscription option is hidden for the product (the default is false). */
    hidden?: boolean;
    /**
     * Subscription option title.
     * @readonly
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @readonly
     */
    description?: string | null;
    /**
     * Subscription payment settings. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     * @readonly
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * @readonly
     */
    discount?: Discount;
}
interface AssignSubscriptionOptionsToProductResponse {
}
interface AllowOneTimePurchasesRequest {
    /** Product ID. */
    productId: string;
    /** Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only. */
    allowed: boolean | null;
}
interface AllowOneTimePurchasesResponse {
}
interface GetSubscriptionOptionRequest {
    /** Subscription option ID. */
    _id: string;
}
interface GetSubscriptionOptionResponse {
    /** Subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface GetSubscriptionOptionsForProductRequest {
    /** Product ID. */
    productId: string;
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetSubscriptionOptionsForProductResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOptionInProduct[];
}
interface GetProductIdsForSubscriptionOptionRequest {
    /** Subscription option ID. */
    _id: string;
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging;
}
interface Paging {
    /** Amount of items to load per page. */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number | null;
}
interface GetProductIdsForSubscriptionOptionResponse {
    /** IDs of products associated with the specified subscription option. */
    productIds?: string[];
    /** Paging metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata {
    /** Amount of items to load per page. */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number;
}
interface GetOneTimePurchasesStatusRequest {
    /** Product ID. */
    productId: string;
}
interface GetOneTimePurchasesStatusResponse {
    /** Whether the specified product is available for one-time purchase */
    allowed?: boolean;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
}
interface DiscountNonNullableFields {
    type: DiscountType;
    value: number;
}
interface SubscriptionOptionNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    discount?: DiscountNonNullableFields;
}
interface CreateSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface UpdateSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface BulkCreateSubscriptionOptionsResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionNonNullableFields[];
}
interface BulkUpdateSubscriptionOptionsResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionNonNullableFields[];
}
interface GetSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface SubscriptionOptionInProductNonNullableFields {
    _id: string;
    hidden: boolean;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    discount?: DiscountNonNullableFields;
}
interface GetSubscriptionOptionsForProductResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionInProductNonNullableFields[];
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
interface GetProductIdsForSubscriptionOptionResponseNonNullableFields {
    productIds: string[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}
interface GetOneTimePurchasesStatusResponseNonNullableFields {
    allowed: boolean;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createSubscriptionOption(): __PublicMethodMetaInfo<'POST', {}, CreateSubscriptionOptionRequest, CreateSubscriptionOptionRequest$1, CreateSubscriptionOptionResponse & CreateSubscriptionOptionResponseNonNullableFields, CreateSubscriptionOptionResponse$1 & CreateSubscriptionOptionResponseNonNullableFields$1>;
declare function updateSubscriptionOption(): __PublicMethodMetaInfo<'PATCH', {
    subscriptionOptionId: string;
}, UpdateSubscriptionOptionRequest, UpdateSubscriptionOptionRequest$1, UpdateSubscriptionOptionResponse & UpdateSubscriptionOptionResponseNonNullableFields, UpdateSubscriptionOptionResponse$1 & UpdateSubscriptionOptionResponseNonNullableFields$1>;
declare function deleteSubscriptionOption(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteSubscriptionOptionRequest, DeleteSubscriptionOptionRequest$1, DeleteSubscriptionOptionResponse, DeleteSubscriptionOptionResponse$1>;
declare function bulkCreateSubscriptionOptions(): __PublicMethodMetaInfo<'POST', {}, BulkCreateSubscriptionOptionsRequest, BulkCreateSubscriptionOptionsRequest$1, BulkCreateSubscriptionOptionsResponse & BulkCreateSubscriptionOptionsResponseNonNullableFields, BulkCreateSubscriptionOptionsResponse$1 & BulkCreateSubscriptionOptionsResponseNonNullableFields$1>;
declare function bulkUpdateSubscriptionOptions(): __PublicMethodMetaInfo<'PATCH', {}, BulkUpdateSubscriptionOptionsRequest, BulkUpdateSubscriptionOptionsRequest$1, BulkUpdateSubscriptionOptionsResponse & BulkUpdateSubscriptionOptionsResponseNonNullableFields, BulkUpdateSubscriptionOptionsResponse$1 & BulkUpdateSubscriptionOptionsResponseNonNullableFields$1>;
declare function bulkDeleteSubscriptionOptions(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteSubscriptionOptionsRequest, BulkDeleteSubscriptionOptionsRequest$1, BulkDeleteSubscriptionOptionsResponse, BulkDeleteSubscriptionOptionsResponse$1>;
declare function assignSubscriptionOptionsToProduct(): __PublicMethodMetaInfo<'POST', {
    productId: string;
}, AssignSubscriptionOptionsToProductRequest, AssignSubscriptionOptionsToProductRequest$1, AssignSubscriptionOptionsToProductResponse, AssignSubscriptionOptionsToProductResponse$1>;
declare function allowOneTimePurchases(): __PublicMethodMetaInfo<'PATCH', {
    productId: string;
}, AllowOneTimePurchasesRequest, AllowOneTimePurchasesRequest$1, AllowOneTimePurchasesResponse, AllowOneTimePurchasesResponse$1>;
declare function getSubscriptionOption(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetSubscriptionOptionRequest, GetSubscriptionOptionRequest$1, GetSubscriptionOptionResponse & GetSubscriptionOptionResponseNonNullableFields, GetSubscriptionOptionResponse$1 & GetSubscriptionOptionResponseNonNullableFields$1>;
declare function getSubscriptionOptionsForProduct(): __PublicMethodMetaInfo<'GET', {
    productId: string;
}, GetSubscriptionOptionsForProductRequest, GetSubscriptionOptionsForProductRequest$1, GetSubscriptionOptionsForProductResponse & GetSubscriptionOptionsForProductResponseNonNullableFields, GetSubscriptionOptionsForProductResponse$1 & GetSubscriptionOptionsForProductResponseNonNullableFields$1>;
declare function getProductIdsForSubscriptionOption(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetProductIdsForSubscriptionOptionRequest, GetProductIdsForSubscriptionOptionRequest$1, GetProductIdsForSubscriptionOptionResponse & GetProductIdsForSubscriptionOptionResponseNonNullableFields, GetProductIdsForSubscriptionOptionResponse$1 & GetProductIdsForSubscriptionOptionResponseNonNullableFields$1>;
declare function getOneTimePurchasesStatus(): __PublicMethodMetaInfo<'GET', {
    productId: string;
}, GetOneTimePurchasesStatusRequest, GetOneTimePurchasesStatusRequest$1, GetOneTimePurchasesStatusResponse & GetOneTimePurchasesStatusResponseNonNullableFields, GetOneTimePurchasesStatusResponse$1 & GetOneTimePurchasesStatusResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, allowOneTimePurchases, assignSubscriptionOptionsToProduct, bulkCreateSubscriptionOptions, bulkDeleteSubscriptionOptions, bulkUpdateSubscriptionOptions, createSubscriptionOption, deleteSubscriptionOption, getOneTimePurchasesStatus, getProductIdsForSubscriptionOption, getSubscriptionOption, getSubscriptionOptionsForProduct, updateSubscriptionOption };
