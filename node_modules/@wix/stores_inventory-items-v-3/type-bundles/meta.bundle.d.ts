/** Inventory Item. */
interface InventoryItem$1 extends InventoryItemTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus$1;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo$1;
    /**
     * Product.
     * @readonly
     */
    product?: Product$1;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields$1;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf$1 {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
declare enum AvailabilityStatus$1 {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    IN_STOCK = "IN_STOCK",
    /**
     * Whether the variant is available for preorder. InventoryItem will be available only when all below conditions are met:
     * 1. the variant is out of stock
     * 2. preorder is enabled on inventory item level (preorder_setting.enabled is true)
     * 3. preorder limit wasn't reached (preorder_setting.limit)
     */
    PREORDER = "PREORDER"
}
interface PreorderInfo$1 {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface Product$1 {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
}
interface ExtendedFields$1 {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateInventoryItemRequest$1 {
    /** Inventory item to create. */
    inventoryItem: InventoryItem$1;
}
interface CreateInventoryItemResponse$1 {
    /** Created inventory item. */
    inventoryItem?: InventoryItem$1;
}
interface BulkCreateInventoryItemsRequest$1 {
    /** Inventory items to create. */
    inventoryItems: InventoryItem$1[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInventoryItemsResponse$1 {
    /** Inventory items created by bulk action. */
    results?: V3BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface V3BulkInventoryItemResult$1 {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata$1;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem$1;
}
interface ItemMetadata$1 {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError$1;
}
interface ApplicationError$1 {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata$1 {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetInventoryItemRequest$1 {
    /** Inventory item ID. */
    inventoryItemId: string;
}
interface GetInventoryItemResponse$1 {
    /** Inventory item. */
    inventoryItem?: InventoryItem$1;
}
interface UpdateInventoryItemRequest$1 {
    /** Inventory item to update. */
    inventoryItem: InventoryItem$1;
    /** Reason for update. */
    reason?: ReasonType$1;
}
/** The reason for the inventory change. */
declare enum ReasonType$1 {
    UNKNOWN = "UNKNOWN",
    ORDER = "ORDER",
    MANUAL = "MANUAL",
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
interface UpdateInventoryItemResponse$1 {
    /** Updated inventory item. */
    inventoryItem?: InventoryItem$1;
}
interface BulkUpdateInventoryItemsRequest$1 {
    /** Inventory items to update. */
    inventoryItems: MaskedInventoryItem$1[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonType$1;
}
interface MaskedInventoryItem$1 {
    /** Inventory item to update. */
    inventoryItem?: InventoryItem$1;
}
interface BulkUpdateInventoryItemsResponse$1 {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkUpdateInventoryItemsByFilterRequest$1 {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Inventory item to update. */
    inventoryItem: InventoryItem$1;
    /** Free text to match in searchable fields. */
    search?: SearchDetails$1;
}
interface SearchDetails$1 {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: Mode$1;
    /** Search term or expression. */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path. */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
declare enum Mode$1 {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
interface BulkUpdateInventoryItemsByFilterResponse$1 {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface DeleteInventoryItemRequest$1 {
    /** Inventory item ID. */
    inventoryItemId: string;
}
interface DeleteInventoryItemResponse$1 {
}
interface BulkDeleteInventoryItemsRequest$1 {
    /** IDs of inventory items to delete. */
    inventoryItemIds: string[];
}
interface BulkDeleteInventoryItemsResponse$1 {
    /** Inventory items deleted by bulk action. */
    results?: BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkInventoryItemResult$1 {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata$1;
}
interface QueryInventoryItemsRequest$1 {
    /** Query options. */
    query?: InventoryQuery$1;
}
interface InventoryQuery$1 extends InventoryQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: InventoryPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: InventoryCursorPaging$1;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting$1[];
}
/** @oneof */
interface InventoryQueryPagingMethodOneOf$1 {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: InventoryPaging$1;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: InventoryCursorPaging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface InventoryPaging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface InventoryCursorPaging$1 {
    /**
     * Number of items to load.
     * Cursor token returned in the query response. To be used on the next query request, but not the first query request.
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryInventoryItemsResponse$1 {
    /** List of inventory items. */
    inventoryItems?: InventoryItem$1[];
    /** Paging metadata. */
    pagingMetadata?: PlatformPagingMetadataV2$1;
}
interface PlatformPagingMetadataV2$1 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchInventoryItemsRequest$1 {
    /** Search options. */
    search?: CursorSearch$1;
}
interface CursorSearch$1 extends CursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$1;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting$1[];
    /** Aggregations are a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: Aggregation$1[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails$1;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome.
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. For example, `"2023-12-20T10:52:34.795Z"`.
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf$1 {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging$1;
}
interface Aggregation$1 extends AggregationKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
    /** Nested aggregation. */
    nested?: NestedAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: AggregationType$1;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation$1;
}
/** @oneof */
interface AggregationKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
    /** Nested aggregation. */
    nested?: NestedAggregation$1;
}
interface RangeBucket$1 {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum SortType$1 {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
declare enum SortDirection$1 {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
declare enum MissingValues$1 {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
interface IncludeMissingValuesOptions$1 {
    /** Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum ScalarType$1 {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX",
    /** Sum of values. */
    SUM = "SUM",
    /** Average of values. */
    AVG = "AVG"
}
interface ValueAggregation$1 extends ValueAggregationOptionsOneOf$1 {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions$1;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: SortType$1;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: SortDirection$1;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: MissingValues$1;
}
/** @oneof */
interface ValueAggregationOptionsOneOf$1 {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions$1;
}
declare enum NestedAggregationType$1 {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface RangeAggregation$1 {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds. */
    buckets?: RangeBucket$1[];
}
interface ScalarAggregation$1 {
    /** Define the operator for the scalar aggregation. */
    type?: ScalarType$1;
}
interface DateHistogramAggregation$1 {
    /** Interval for date histogram aggregation. */
    interval?: Interval$1;
}
declare enum Interval$1 {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface NestedAggregationItem$1 extends NestedAggregationItemKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationType$1;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf$1 {
    /** Value aggregation. */
    value?: ValueAggregation$1;
    /** Range aggregation. */
    range?: RangeAggregation$1;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation$1;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation$1;
}
declare enum AggregationType$1 {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface NestedAggregation$1 {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one. */
    nestedAggregations?: NestedAggregationItem$1[];
}
interface GroupByAggregation$1 extends GroupByAggregationKindOneOf$1 {
    /** Value aggregation configuration. */
    value?: ValueAggregation$1;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Field to aggregate by. */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf$1 {
    /** Value aggregation configuration. */
    value?: ValueAggregation$1;
}
interface CursorPaging$1 {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchInventoryItemsResponse$1 {
    /** List of inventory items. */
    inventoryItems?: InventoryItem$1[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata$1;
    /** Aggregation data. */
    aggregationData?: AggregationData$1;
}
interface CursorPagingMetadata$1 {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors$1;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface AggregationData$1 {
    /** key = aggregation name (as derived from search request). */
    results?: AggregationResults$1[];
}
interface ValueAggregationResult$1 {
    /** Value of the field. */
    value?: string;
    /** Count of entities with this value. */
    count?: number;
}
interface RangeAggregationResult$1 {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number;
}
interface NestedAggregationResults$1 extends NestedAggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
    /** User-defined name of aggregation, matches the one provided in request. */
    name?: string;
    /** Type of aggregation that matches result. */
    type?: AggregationType$1;
    /** Field to aggregate by, matches the one provided in request. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
}
interface ValueResults$1 {
    /** List of value aggregations. */
    results?: ValueAggregationResult$1[];
}
interface RangeResults$1 {
    /** List of ranges returned in same order as requested. */
    results?: RangeAggregationResult$1[];
}
interface AggregationResultsScalarResult$1 {
    /** Type of scalar aggregation. */
    type?: ScalarType$1;
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedValueAggregationResult$1 {
    /** Value of the field. */
    value?: string;
    /** Nested aggregations. */
    nestedResults?: NestedAggregationResults$1;
}
interface ValueResult$1 {
    /** Value of the field. */
    value?: string;
    /** Count of entities with this value. */
    count?: number | null;
}
interface RangeResult$1 {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number | null;
}
interface ScalarResult$1 {
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedResultValue$1 extends NestedResultValueResultOneOf$1 {
    /** Value aggregation result. */
    value?: ValueResult$1;
    /** Range aggregation result. */
    range?: RangeResult$1;
    /** Scalar aggregation result. */
    scalar?: ScalarResult$1;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult$1;
}
/** @oneof */
interface NestedResultValueResultOneOf$1 {
    /** Value aggregation result. */
    value?: ValueResult$1;
    /** Range aggregation result. */
    range?: RangeResult$1;
    /** Scalar aggregation result. */
    scalar?: ScalarResult$1;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult$1;
}
interface Results$1 {
    /** List of nested aggregations. */
    results?: Record<string, NestedResultValue$1>;
}
interface DateHistogramResult$1 {
    /** Date in ISO 8601 format. */
    value?: string;
    /** Count of documents in the bucket. */
    count?: number;
}
interface GroupByValueResults$1 {
    /** List of value aggregations. */
    results?: NestedValueAggregationResult$1[];
}
interface DateHistogramResults$1 {
    /** List of date histogram aggregations. */
    results?: DateHistogramResult$1[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form.
 * Aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults$1 {
    /** List of nested aggregations. */
    results?: Results$1[];
}
interface AggregationResults$1 extends AggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults$1;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults$1;
    /** Nested aggregation results. */
    nested?: NestedResults$1;
    /** User-defined name of aggregation as derived from search request. */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request. */
    type?: AggregationType$1;
    /** Field to aggregate by as derived from search request. */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf$1 {
    /** Value aggregation results. */
    values?: ValueResults$1;
    /** Range aggregation results. */
    ranges?: RangeResults$1;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult$1;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults$1;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults$1;
    /** Nested aggregation results. */
    nested?: NestedResults$1;
}
interface BulkDecrementInventoryItemsRequest$1 {
    /** Inventory item IDs and decrement data. */
    decrementData: DecrementDataById$1[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType$1;
}
interface DecrementDataById$1 {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /** Amount to decrement by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsResponse$1 {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkIncrementInventoryItemsRequest$1 {
    /** Inventory item IDs and increment data. */
    incrementData: IncrementDataById$1[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType$1;
}
interface IncrementDataById$1 {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /** Amount to increment by. */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsResponse$1 {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkDecrementInventoryItemsByVariantAndLocationRequest$1 {
    /** Variant and location IDs, as well as decrement data. */
    decrementData: DecrementDataByVariantAndLocation$1[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType$1;
}
interface DecrementDataByVariantAndLocation$1 {
    /** Variant ID. */
    variantId?: string;
    /** Location ID. */
    locationId?: string | null;
    /** Amount to decrement by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponse$1 {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult$1[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface BulkIncrementInventoryItemsByVariantAndLocationRequest$1 {
    /** Variant and location IDs, as well as increment data. */
    incrementData: IncrementDataByVariantAndLocation$1[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType$1;
}
interface IncrementDataByVariantAndLocation$1 {
    /** Variant ID. */
    variantId?: string;
    /** Location ID. */
    locationId?: string | null;
    /** Amount to increment by. */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponse$1 {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult$1[];
    /** Bulk action metadata details as: totalSuccess and totalFailure. */
    bulkActionMetadata?: BulkActionMetadata$1;
}
interface ProductNonNullableFields$1 {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields$1 {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus$1;
    product?: ProductNonNullableFields$1;
}
interface CreateInventoryItemResponseNonNullableFields$1 {
    inventoryItem?: InventoryItemNonNullableFields$1;
}
interface ApplicationErrorNonNullableFields$1 {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields$1 {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields$1;
}
interface V3BulkInventoryItemResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
    item?: InventoryItemNonNullableFields$1;
}
interface BulkActionMetadataNonNullableFields$1 {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateInventoryItemsResponseNonNullableFields$1 {
    results: V3BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface GetInventoryItemResponseNonNullableFields$1 {
    inventoryItem?: InventoryItemNonNullableFields$1;
}
interface UpdateInventoryItemResponseNonNullableFields$1 {
    inventoryItem?: InventoryItemNonNullableFields$1;
}
interface BulkUpdateInventoryItemsResponseNonNullableFields$1 {
    results: V3BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkUpdateInventoryItemsByFilterResponseNonNullableFields$1 {
    jobId: string;
}
interface BulkInventoryItemResultNonNullableFields$1 {
    itemMetadata?: ItemMetadataNonNullableFields$1;
}
interface BulkDeleteInventoryItemsResponseNonNullableFields$1 {
    results: BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface QueryInventoryItemsResponseNonNullableFields$1 {
    inventoryItems: InventoryItemNonNullableFields$1[];
}
interface ValueAggregationResultNonNullableFields$1 {
    value: string;
    count: number;
}
interface ValueResultsNonNullableFields$1 {
    results: ValueAggregationResultNonNullableFields$1[];
}
interface RangeAggregationResultNonNullableFields$1 {
    count: number;
}
interface RangeResultsNonNullableFields$1 {
    results: RangeAggregationResultNonNullableFields$1[];
}
interface AggregationResultsScalarResultNonNullableFields$1 {
    type: ScalarType$1;
    value: number;
}
interface NestedAggregationResultsNonNullableFields$1 {
    values?: ValueResultsNonNullableFields$1;
    ranges?: RangeResultsNonNullableFields$1;
    scalar?: AggregationResultsScalarResultNonNullableFields$1;
    name: string;
    type: AggregationType$1;
    fieldPath: string;
}
interface NestedValueAggregationResultNonNullableFields$1 {
    value: string;
    nestedResults?: NestedAggregationResultsNonNullableFields$1;
}
interface GroupByValueResultsNonNullableFields$1 {
    results: NestedValueAggregationResultNonNullableFields$1[];
}
interface DateHistogramResultNonNullableFields$1 {
    value: string;
    count: number;
}
interface DateHistogramResultsNonNullableFields$1 {
    results: DateHistogramResultNonNullableFields$1[];
}
interface AggregationResultsNonNullableFields$1 {
    values?: ValueResultsNonNullableFields$1;
    ranges?: RangeResultsNonNullableFields$1;
    scalar?: AggregationResultsScalarResultNonNullableFields$1;
    groupedByValue?: GroupByValueResultsNonNullableFields$1;
    dateHistogram?: DateHistogramResultsNonNullableFields$1;
    name: string;
    type: AggregationType$1;
    fieldPath: string;
}
interface AggregationDataNonNullableFields$1 {
    results: AggregationResultsNonNullableFields$1[];
}
interface SearchInventoryItemsResponseNonNullableFields$1 {
    inventoryItems: InventoryItemNonNullableFields$1[];
    aggregationData?: AggregationDataNonNullableFields$1;
}
interface BulkDecrementInventoryItemsResponseNonNullableFields$1 {
    results: V3BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkIncrementInventoryItemsResponseNonNullableFields$1 {
    results: V3BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields$1 {
    results: V3BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields$1 {
    results: V3BulkInventoryItemResultNonNullableFields$1[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields$1;
}

/** Inventory Item. */
interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    OUT_OF_STOCK = "OUT_OF_STOCK",
    IN_STOCK = "IN_STOCK",
    /**
     * Whether the variant is available for preorder. InventoryItem will be available only when all below conditions are met:
     * 1. the variant is out of stock
     * 2. preorder is enabled on inventory item level (preorder_setting.enabled is true)
     * 3. preorder limit wasn't reached (preorder_setting.limit)
     */
    PREORDER = "PREORDER"
}
interface PreorderInfo {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface Product {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateInventoryItemRequest {
    /** Inventory item to create. */
    inventoryItem: InventoryItem;
}
interface CreateInventoryItemResponse {
    /** Created inventory item. */
    inventoryItem?: InventoryItem;
}
interface BulkCreateInventoryItemsRequest {
    /** Inventory items to create. */
    inventoryItems: InventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInventoryItemsResponse {
    /** Inventory items created by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetInventoryItemRequest {
    /** Inventory item ID. */
    inventoryItemId: string;
}
interface GetInventoryItemResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItem;
}
interface UpdateInventoryItemRequest {
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Reason for update. */
    reason?: ReasonType;
}
/** The reason for the inventory change. */
declare enum ReasonType {
    UNKNOWN = "UNKNOWN",
    ORDER = "ORDER",
    MANUAL = "MANUAL",
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
interface UpdateInventoryItemResponse {
    /** Updated inventory item. */
    inventoryItem?: InventoryItem;
}
interface BulkUpdateInventoryItemsRequest {
    /** Inventory items to update. */
    inventoryItems: MaskedInventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonType;
}
interface MaskedInventoryItem {
    /** Inventory item to update. */
    inventoryItem?: InventoryItem;
}
interface BulkUpdateInventoryItemsResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateInventoryItemsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: Mode;
    /** Search term or expression. */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path. */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
interface BulkUpdateInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface DeleteInventoryItemRequest {
    /** Inventory item ID. */
    inventoryItemId: string;
}
interface DeleteInventoryItemResponse {
}
interface BulkDeleteInventoryItemsRequest {
    /** IDs of inventory items to delete. */
    inventoryItemIds: string[];
}
interface BulkDeleteInventoryItemsResponse {
    /** Inventory items deleted by bulk action. */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
}
interface QueryInventoryItemsRequest {
    /** Query options. */
    query?: InventoryQuery;
}
interface InventoryQuery extends InventoryQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: InventoryPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: InventoryCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface InventoryQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: InventoryPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: InventoryCursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface InventoryPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface InventoryCursorPaging {
    /**
     * Number of items to load.
     * Cursor token returned in the query response. To be used on the next query request, but not the first query request.
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryInventoryItemsResponse {
    /** List of inventory items. */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. */
    pagingMetadata?: PlatformPagingMetadataV2;
}
interface PlatformPagingMetadataV2 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface SearchInventoryItemsRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Aggregations are a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome.
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. For example, `"2023-12-20T10:52:34.795Z"`.
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation. */
    nested?: NestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: AggregationType;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation. */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum SortType {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
declare enum SortDirection {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
declare enum MissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
interface IncludeMissingValuesOptions {
    /** Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
declare enum ScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX",
    /** Sum of values. */
    SUM = "SUM",
    /** Average of values. */
    AVG = "AVG"
}
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: SortType;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: SortDirection;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: MissingValues;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
interface RangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds. */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation. */
    type?: ScalarType;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: Interval;
}
declare enum Interval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationType;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface NestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one. */
    nestedAggregations?: NestedAggregationItem[];
}
interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: ValueAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Field to aggregate by. */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: ValueAggregation;
}
interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface SearchInventoryItemsResponse {
    /** List of inventory items. */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface AggregationData {
    /** key = aggregation name (as derived from search request). */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /** Value of the field. */
    value?: string;
    /** Count of entities with this value. */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** User-defined name of aggregation, matches the one provided in request. */
    name?: string;
    /** Type of aggregation that matches result. */
    type?: AggregationType;
    /** Field to aggregate by, matches the one provided in request. */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /** List of value aggregations. */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /** List of ranges returned in same order as requested. */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation. */
    type?: ScalarType;
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedValueAggregationResult {
    /** Value of the field. */
    value?: string;
    /** Nested aggregations. */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /** Value of the field. */
    value?: string;
    /** Count of entities with this value. */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: ValueResult;
    /** Range aggregation result. */
    range?: RangeResult;
    /** Scalar aggregation result. */
    scalar?: ScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: ValueResult;
    /** Range aggregation result. */
    range?: RangeResult;
    /** Scalar aggregation result. */
    scalar?: ScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations. */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /** Date in ISO 8601 format. */
    value?: string;
    /** Count of documents in the bucket. */
    count?: number;
}
interface GroupByValueResults {
    /** List of value aggregations. */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /** List of date histogram aggregations. */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form.
 * Aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /** List of nested aggregations. */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results. */
    nested?: NestedResults;
    /** User-defined name of aggregation as derived from search request. */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request. */
    type?: AggregationType;
    /** Field to aggregate by as derived from search request. */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results. */
    nested?: NestedResults;
}
interface BulkDecrementInventoryItemsRequest {
    /** Inventory item IDs and decrement data. */
    decrementData: DecrementDataById[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType;
}
interface DecrementDataById {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /** Amount to decrement by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkIncrementInventoryItemsRequest {
    /** Inventory item IDs and increment data. */
    incrementData: IncrementDataById[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType;
}
interface IncrementDataById {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /** Amount to increment by. */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDecrementInventoryItemsByVariantAndLocationRequest {
    /** Variant and location IDs, as well as decrement data. */
    decrementData: DecrementDataByVariantAndLocation[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonType;
}
interface DecrementDataByVariantAndLocation {
    /** Variant ID. */
    variantId?: string;
    /** Location ID. */
    locationId?: string | null;
    /** Amount to decrement by. */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkIncrementInventoryItemsByVariantAndLocationRequest {
    /** Variant and location IDs, as well as increment data. */
    incrementData: IncrementDataByVariantAndLocation[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonType;
}
interface IncrementDataByVariantAndLocation {
    /** Variant ID. */
    variantId?: string;
    /** Location ID. */
    locationId?: string | null;
    /** Amount to increment by. */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponse {
    /** Inventory items updated by bulk action. */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata details as: totalSuccess and totalFailure. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface ProductNonNullableFields {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus;
    product?: ProductNonNullableFields;
}
interface CreateInventoryItemResponseNonNullableFields {
    inventoryItem?: InventoryItemNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface V3BulkInventoryItemResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: InventoryItemNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkCreateInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface GetInventoryItemResponseNonNullableFields {
    inventoryItem?: InventoryItemNonNullableFields;
}
interface UpdateInventoryItemResponseNonNullableFields {
    inventoryItem?: InventoryItemNonNullableFields;
}
interface BulkUpdateInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkUpdateInventoryItemsByFilterResponseNonNullableFields {
    jobId: string;
}
interface BulkInventoryItemResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkDeleteInventoryItemsResponseNonNullableFields {
    results: BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface QueryInventoryItemsResponseNonNullableFields {
    inventoryItems: InventoryItemNonNullableFields[];
}
interface ValueAggregationResultNonNullableFields {
    value: string;
    count: number;
}
interface ValueResultsNonNullableFields {
    results: ValueAggregationResultNonNullableFields[];
}
interface RangeAggregationResultNonNullableFields {
    count: number;
}
interface RangeResultsNonNullableFields {
    results: RangeAggregationResultNonNullableFields[];
}
interface AggregationResultsScalarResultNonNullableFields {
    type: ScalarType;
    value: number;
}
interface NestedAggregationResultsNonNullableFields {
    values?: ValueResultsNonNullableFields;
    ranges?: RangeResultsNonNullableFields;
    scalar?: AggregationResultsScalarResultNonNullableFields;
    name: string;
    type: AggregationType;
    fieldPath: string;
}
interface NestedValueAggregationResultNonNullableFields {
    value: string;
    nestedResults?: NestedAggregationResultsNonNullableFields;
}
interface GroupByValueResultsNonNullableFields {
    results: NestedValueAggregationResultNonNullableFields[];
}
interface DateHistogramResultNonNullableFields {
    value: string;
    count: number;
}
interface DateHistogramResultsNonNullableFields {
    results: DateHistogramResultNonNullableFields[];
}
interface AggregationResultsNonNullableFields {
    values?: ValueResultsNonNullableFields;
    ranges?: RangeResultsNonNullableFields;
    scalar?: AggregationResultsScalarResultNonNullableFields;
    groupedByValue?: GroupByValueResultsNonNullableFields;
    dateHistogram?: DateHistogramResultsNonNullableFields;
    name: string;
    type: AggregationType;
    fieldPath: string;
}
interface AggregationDataNonNullableFields {
    results: AggregationResultsNonNullableFields[];
}
interface SearchInventoryItemsResponseNonNullableFields {
    inventoryItems: InventoryItemNonNullableFields[];
    aggregationData?: AggregationDataNonNullableFields;
}
interface BulkDecrementInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkIncrementInventoryItemsResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields {
    results: V3BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createInventoryItem(): __PublicMethodMetaInfo<'POST', {}, CreateInventoryItemRequest, CreateInventoryItemRequest$1, CreateInventoryItemResponse & CreateInventoryItemResponseNonNullableFields, CreateInventoryItemResponse$1 & CreateInventoryItemResponseNonNullableFields$1>;
declare function bulkCreateInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkCreateInventoryItemsRequest, BulkCreateInventoryItemsRequest$1, BulkCreateInventoryItemsResponse & BulkCreateInventoryItemsResponseNonNullableFields, BulkCreateInventoryItemsResponse$1 & BulkCreateInventoryItemsResponseNonNullableFields$1>;
declare function getInventoryItem(): __PublicMethodMetaInfo<'GET', {
    inventoryItemId: string;
}, GetInventoryItemRequest, GetInventoryItemRequest$1, GetInventoryItemResponse & GetInventoryItemResponseNonNullableFields, GetInventoryItemResponse$1 & GetInventoryItemResponseNonNullableFields$1>;
declare function updateInventoryItem(): __PublicMethodMetaInfo<'PATCH', {
    inventoryItemId: string;
}, UpdateInventoryItemRequest, UpdateInventoryItemRequest$1, UpdateInventoryItemResponse & UpdateInventoryItemResponseNonNullableFields, UpdateInventoryItemResponse$1 & UpdateInventoryItemResponseNonNullableFields$1>;
declare function bulkUpdateInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateInventoryItemsRequest, BulkUpdateInventoryItemsRequest$1, BulkUpdateInventoryItemsResponse & BulkUpdateInventoryItemsResponseNonNullableFields, BulkUpdateInventoryItemsResponse$1 & BulkUpdateInventoryItemsResponseNonNullableFields$1>;
declare function bulkUpdateInventoryItemsByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateInventoryItemsByFilterRequest, BulkUpdateInventoryItemsByFilterRequest$1, BulkUpdateInventoryItemsByFilterResponse & BulkUpdateInventoryItemsByFilterResponseNonNullableFields, BulkUpdateInventoryItemsByFilterResponse$1 & BulkUpdateInventoryItemsByFilterResponseNonNullableFields$1>;
declare function deleteInventoryItem(): __PublicMethodMetaInfo<'DELETE', {
    inventoryItemId: string;
}, DeleteInventoryItemRequest, DeleteInventoryItemRequest$1, DeleteInventoryItemResponse, DeleteInventoryItemResponse$1>;
declare function bulkDeleteInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteInventoryItemsRequest, BulkDeleteInventoryItemsRequest$1, BulkDeleteInventoryItemsResponse & BulkDeleteInventoryItemsResponseNonNullableFields, BulkDeleteInventoryItemsResponse$1 & BulkDeleteInventoryItemsResponseNonNullableFields$1>;
declare function queryInventoryItems(): __PublicMethodMetaInfo<'POST', {}, QueryInventoryItemsRequest, QueryInventoryItemsRequest$1, QueryInventoryItemsResponse & QueryInventoryItemsResponseNonNullableFields, QueryInventoryItemsResponse$1 & QueryInventoryItemsResponseNonNullableFields$1>;
declare function searchInventoryItems(): __PublicMethodMetaInfo<'POST', {}, SearchInventoryItemsRequest, SearchInventoryItemsRequest$1, SearchInventoryItemsResponse & SearchInventoryItemsResponseNonNullableFields, SearchInventoryItemsResponse$1 & SearchInventoryItemsResponseNonNullableFields$1>;
declare function bulkDecrementInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkDecrementInventoryItemsRequest, BulkDecrementInventoryItemsRequest$1, BulkDecrementInventoryItemsResponse & BulkDecrementInventoryItemsResponseNonNullableFields, BulkDecrementInventoryItemsResponse$1 & BulkDecrementInventoryItemsResponseNonNullableFields$1>;
declare function bulkIncrementInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkIncrementInventoryItemsRequest, BulkIncrementInventoryItemsRequest$1, BulkIncrementInventoryItemsResponse & BulkIncrementInventoryItemsResponseNonNullableFields, BulkIncrementInventoryItemsResponse$1 & BulkIncrementInventoryItemsResponseNonNullableFields$1>;
declare function bulkDecrementInventoryItemsByVariantAndLocation(): __PublicMethodMetaInfo<'POST', {}, BulkDecrementInventoryItemsByVariantAndLocationRequest, BulkDecrementInventoryItemsByVariantAndLocationRequest$1, BulkDecrementInventoryItemsByVariantAndLocationResponse & BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields, BulkDecrementInventoryItemsByVariantAndLocationResponse$1 & BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields$1>;
declare function bulkIncrementInventoryItemsByVariantAndLocation(): __PublicMethodMetaInfo<'POST', {}, BulkIncrementInventoryItemsByVariantAndLocationRequest, BulkIncrementInventoryItemsByVariantAndLocationRequest$1, BulkIncrementInventoryItemsByVariantAndLocationResponse & BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields, BulkIncrementInventoryItemsByVariantAndLocationResponse$1 & BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, bulkCreateInventoryItems, bulkDecrementInventoryItems, bulkDecrementInventoryItemsByVariantAndLocation, bulkDeleteInventoryItems, bulkIncrementInventoryItems, bulkIncrementInventoryItemsByVariantAndLocation, bulkUpdateInventoryItems, bulkUpdateInventoryItemsByFilter, createInventoryItem, deleteInventoryItem, getInventoryItem, queryInventoryItems, searchInventoryItems, updateInventoryItem };
